# Project Documentation: latest version
Generated on: 2025-10-09 10:35:57

## Project Structure

```
latest version/
├── archiv/
│   └── gui/
│       ├── advanced_config_editor/
│       │   ├── form_views/
│       │   │   ├── __init__.py
│       │   │   ├── items_form.py
│       │   │   ├── paths_form.py
│       │   │   ├── races_form.py
│       │   │   ├── scenarios_form.py
│       │   │   └── world_settings_form.py
│       │   ├── __init__.py
│       │   ├── advanced_config_editor.py
│       │   ├── custom_widgets.py
│       │   ├── entry_editor.py
│       │   ├── schemas.py
│       │   └── versioning.py
│       ├── inventory/
│       │   ├── __init__.py
│       │   ├── detail_panels.py
│       │   ├── equipment_slot_widget.py
│       │   ├── inventory_widget.py
│       │   ├── item_widget.py
│       │   └── utils.py
│       ├── widgets/
│       │   ├── __init__.py
│       │   ├── music_controls.py
│       │   └── widgets-LEGACY-MOVED TO INIT.py
│       ├── __init__.py
│       ├── conversation_widget.py
│       ├── dialogs.py
│       ├── game_engine_runner.py
│       ├── llm_settings_dialog.py
│       ├── log_explorer.py
│       ├── logging_handlers.py
│       ├── main_window.py
│       ├── message_widget.py
│       ├── quest_widgets.py
│       ├── safe_zone_widget.py
│       └── tab_widgets.py
├── archiv_dev/
│   ├── FIXES_APPLIED_2025-09-30.md
│   ├── INVENTORY_EQUIPMENT_REFACTORING_REPORT.md
│   ├── TESTING_INSTRUCTIONS.md
│   ├── VARIANTS_AI_IMPROVEMENTS.md
│   └── items&damage_types.md
├── config/
│   ├── aliases/
│   │   └── entities.json
│   ├── backup/
│   │   ├── skills_skills_20250912_235959.json
│   │   ├── skills_skills_20250913_002318.json
│   │   ├── skills_skills_20250913_002554.json
│   │   ├── skills_skills_20250913_141551.json
│   │   ├── skills_skills_20250913_141748.json
│   │   ├── skills_skills_20250913_180742.json
│   │   ├── skills_skills_20250913_235905.json
│   │   ├── skills_skills_20250914_130547.json
│   │   ├── skills_skills_20250914_131055.json
│   │   ├── skills_skills_20250914_132944.json
│   │   ├── skills_skills_20250919_095109.json
│   │   ├── skills_skills_20250919_131027.json
│   │   ├── skills_skills_20250919_142500.json
│   │   ├── skills_skills_20251006_220742.json
│   │   ├── skills_skills_20251006_225101.json
│   │   └── skills_skills_20251007_222935.json
│   ├── character/
│   │   ├── backup/
│   │   │   ├── classes_20250418_133031.json
│   │   │   ├── classes_20250418_135120.json
│   │   │   ├── classes_20250912_235959.json
│   │   │   ├── classes_20250913_002318.json
│   │   │   ├── classes_20250913_002554.json
│   │   │   ├── classes_20250913_141551.json
│   │   │   ├── classes_20250913_141748.json
│   │   │   ├── classes_20250913_180742.json
│   │   │   ├── classes_20250913_235905.json
│   │   │   ├── classes_20250914_130547.json
│   │   │   ├── classes_20250914_131055.json
│   │   │   ├── classes_20250914_132944.json
│   │   │   ├── classes_20250919_095109.json
│   │   │   ├── classes_20250919_131027.json
│   │   │   ├── classes_20250919_142500.json
│   │   │   ├── classes_20251006_220742.json
│   │   │   ├── classes_20251006_225101.json
│   │   │   ├── classes_20251007_222935.json
│   │   │   ├── races_20250418_131835.json
│   │   │   ├── races_20250418_132122.json
│   │   │   ├── races_20250418_132911.json
│   │   │   ├── races_20250418_135120.json
│   │   │   ├── races_20250912_235959.json
│   │   │   ├── races_20250913_002318.json
│   │   │   ├── races_20250913_002554.json
│   │   │   ├── races_20250913_141551.json
│   │   │   ├── races_20250913_141748.json
│   │   │   ├── races_20250913_180742.json
│   │   │   ├── races_20250913_235905.json
│   │   │   ├── races_20250914_130547.json
│   │   │   ├── races_20250914_131055.json
│   │   │   ├── races_20250914_132944.json
│   │   │   ├── races_20250919_095109.json
│   │   │   ├── races_20250919_131027.json
│   │   │   ├── races_20250919_142500.json
│   │   │   ├── races_20251006_220742.json
│   │   │   ├── races_20251006_225101.json
│   │   │   └── races_20251007_222935.json
│   │   ├── backgrounds.json
│   │   ├── classes.json
│   │   ├── npc_templates.json
│   │   ├── races.json
│   │   ├── stat_registry.json
│   │   └── stats_config.json
│   ├── combat/
│   │   └── combat_config.json
│   ├── game/
│   │   └── base_config.json
│   ├── gameplay/
│   │   └── canonical_lists.json
│   ├── items/
│   │   ├── backup/
│   │   │   ├── base_armor_items_armor_20250912_235959.json
│   │   │   ├── base_armor_items_armor_20250913_002318.json
│   │   │   ├── base_armor_items_armor_20250913_002554.json
│   │   │   ├── base_armor_items_armor_20250913_141551.json
│   │   │   ├── base_armor_items_armor_20250913_141748.json
│   │   │   ├── base_armor_items_armor_20250913_180742.json
│   │   │   ├── base_armor_items_armor_20250913_235905.json
│   │   │   ├── base_armor_items_armor_20250914_130547.json
│   │   │   ├── base_armor_items_armor_20250914_131055.json
│   │   │   ├── base_armor_items_armor_20250914_132944.json
│   │   │   ├── base_armor_items_armor_20250919_095109.json
│   │   │   ├── base_armor_items_armor_20250919_131027.json
│   │   │   ├── base_armor_items_armor_20250919_142500.json
│   │   │   ├── base_armor_items_armor_20251006_220742.json
│   │   │   ├── base_armor_items_armor_20251006_225101.json
│   │   │   ├── base_armor_items_armor_20251007_222935.json
│   │   │   ├── base_armor_items_armor_20251007_230717.json
│   │   │   ├── base_weapons_items_weapons_20250912_235959.json
│   │   │   ├── base_weapons_items_weapons_20250913_002318.json
│   │   │   ├── base_weapons_items_weapons_20250913_002554.json
│   │   │   ├── base_weapons_items_weapons_20250913_141551.json
│   │   │   ├── base_weapons_items_weapons_20250913_141748.json
│   │   │   ├── base_weapons_items_weapons_20250913_180742.json
│   │   │   ├── base_weapons_items_weapons_20250913_235905.json
│   │   │   ├── base_weapons_items_weapons_20250914_130547.json
│   │   │   ├── base_weapons_items_weapons_20250914_131055.json
│   │   │   ├── base_weapons_items_weapons_20250914_132944.json
│   │   │   ├── base_weapons_items_weapons_20250919_095109.json
│   │   │   ├── base_weapons_items_weapons_20250919_131027.json
│   │   │   ├── base_weapons_items_weapons_20250919_142500.json
│   │   │   ├── base_weapons_items_weapons_20251006_220302.json
│   │   │   ├── base_weapons_items_weapons_20251006_220742.json
│   │   │   ├── base_weapons_items_weapons_20251006_225101.json
│   │   │   ├── base_weapons_items_weapons_20251007_222935.json
│   │   │   ├── base_weapons_items_weapons_20251007_224914.json
│   │   │   ├── base_weapons_items_weapons_20251007_225231.json
│   │   │   ├── base_weapons_items_weapons_20251007_225824.json
│   │   │   ├── base_weapons_items_weapons_20251007_230517.json
│   │   │   ├── consumables_items_consumables_20250912_235959.json
│   │   │   ├── consumables_items_consumables_20250913_002318.json
│   │   │   ├── consumables_items_consumables_20250913_002554.json
│   │   │   ├── consumables_items_consumables_20250913_141551.json
│   │   │   ├── consumables_items_consumables_20250913_141748.json
│   │   │   ├── consumables_items_consumables_20250913_180742.json
│   │   │   ├── consumables_items_consumables_20250913_235905.json
│   │   │   ├── consumables_items_consumables_20250914_130547.json
│   │   │   ├── consumables_items_consumables_20250914_131055.json
│   │   │   ├── consumables_items_consumables_20250914_132944.json
│   │   │   ├── consumables_items_consumables_20250919_095109.json
│   │   │   ├── consumables_items_consumables_20250919_131027.json
│   │   │   ├── consumables_items_consumables_20250919_142500.json
│   │   │   ├── consumables_items_consumables_20251006_220742.json
│   │   │   ├── consumables_items_consumables_20251006_225101.json
│   │   │   ├── consumables_items_consumables_20251007_222935.json
│   │   │   ├── miscellaneous_items_misc_20250912_235959.json
│   │   │   ├── miscellaneous_items_misc_20250913_002318.json
│   │   │   ├── miscellaneous_items_misc_20250913_002554.json
│   │   │   ├── miscellaneous_items_misc_20250913_141551.json
│   │   │   ├── miscellaneous_items_misc_20250913_141748.json
│   │   │   ├── miscellaneous_items_misc_20250913_180742.json
│   │   │   ├── miscellaneous_items_misc_20250913_235905.json
│   │   │   ├── miscellaneous_items_misc_20250914_130547.json
│   │   │   ├── miscellaneous_items_misc_20250914_131055.json
│   │   │   ├── miscellaneous_items_misc_20250914_132944.json
│   │   │   ├── miscellaneous_items_misc_20250919_095109.json
│   │   │   ├── miscellaneous_items_misc_20250919_131027.json
│   │   │   ├── miscellaneous_items_misc_20250919_142500.json
│   │   │   ├── miscellaneous_items_misc_20251006_220742.json
│   │   │   ├── miscellaneous_items_misc_20251006_225101.json
│   │   │   ├── miscellaneous_items_misc_20251007_222935.json
│   │   │   ├── origin_items_items_origin_20250912_235959.json
│   │   │   ├── origin_items_items_origin_20250913_002318.json
│   │   │   ├── origin_items_items_origin_20250913_002554.json
│   │   │   ├── origin_items_items_origin_20250913_141551.json
│   │   │   ├── origin_items_items_origin_20250913_141748.json
│   │   │   ├── origin_items_items_origin_20250913_180742.json
│   │   │   ├── origin_items_items_origin_20250913_235905.json
│   │   │   ├── origin_items_items_origin_20250914_130547.json
│   │   │   ├── origin_items_items_origin_20250914_131055.json
│   │   │   ├── origin_items_items_origin_20250914_132944.json
│   │   │   ├── origin_items_items_origin_20250919_095109.json
│   │   │   ├── origin_items_items_origin_20250919_131027.json
│   │   │   ├── origin_items_items_origin_20250919_142500.json
│   │   │   ├── origin_items_items_origin_20251006_220742.json
│   │   │   ├── origin_items_items_origin_20251006_225101.json
│   │   │   └── origin_items_items_origin_20251007_222935.json
│   │   ├── README.md
│   │   ├── base_armor.json
│   │   ├── base_weapons.json
│   │   ├── consumables.json
│   │   ├── miscellaneous.json
│   │   └── origin_items.json
│   ├── llm/
│   │   ├── agents/
│   │   │   ├── README.md
│   │   │   ├── combatnarrator.json
│   │   │   ├── context_evaluator.json
│   │   │   ├── narrator.json
│   │   │   └── rule_checker.json
│   │   ├── base_config.json
│   │   ├── models.json
│   │   └── providers.json
│   ├── npc/
│   │   ├── backup/
│   │   │   ├── names_20250919_095109.json
│   │   │   ├── names_20250919_131027.json
│   │   │   ├── names_20250919_142500.json
│   │   │   ├── names_20251006_220742.json
│   │   │   ├── names_20251006_225101.json
│   │   │   ├── names_20251007_222935.json
│   │   │   ├── variants_20251006_220742.json
│   │   │   ├── variants_20251006_225101.json
│   │   │   └── variants_20251007_222935.json
│   │   ├── NPC_SYSTEM.md
│   │   ├── README_scaling_system.md
│   │   ├── abilities.json
│   │   ├── abilities.schema.json
│   │   ├── boss_overlays.json
│   │   ├── boss_overlays.schema.json
│   │   ├── families.json
│   │   ├── families.schema.json
│   │   ├── families_factions.json
│   │   ├── generation_rules.json
│   │   ├── generation_rules.schema.json
│   │   ├── names.json
│   │   ├── roles.json
│   │   ├── roles.schema.json
│   │   ├── tags.json
│   │   ├── tags.schema.json
│   │   └── variants.json
│   ├── schemas/
│   │   ├── aliases.schema.json
│   │   ├── npc_family.schema.json
│   │   ├── npc_tags.schema.json
│   │   └── npc_variant.schema.json
│   ├── world/
│   │   ├── base/
│   │   │   ├── backup/
│   │   │   │   ├── cultures_20250912_235959.json
│   │   │   │   ├── cultures_20250913_002318.json
│   │   │   │   ├── cultures_20250913_002554.json
│   │   │   │   ├── cultures_20250913_141551.json
│   │   │   │   ├── cultures_20250913_141748.json
│   │   │   │   ├── cultures_20250913_180742.json
│   │   │   │   ├── cultures_20250913_235905.json
│   │   │   │   ├── cultures_20250914_130547.json
│   │   │   │   ├── cultures_20250914_131055.json
│   │   │   │   ├── cultures_20250914_132944.json
│   │   │   │   ├── cultures_20250919_095109.json
│   │   │   │   ├── cultures_20250919_131027.json
│   │   │   │   ├── cultures_20250919_142500.json
│   │   │   │   ├── cultures_20251006_220742.json
│   │   │   │   ├── cultures_20251006_225101.json
│   │   │   │   ├── cultures_20251007_222935.json
│   │   │   │   ├── fundamental_rules_20250912_235959.json
│   │   │   │   ├── fundamental_rules_20250913_002318.json
│   │   │   │   ├── fundamental_rules_20250913_002554.json
│   │   │   │   ├── fundamental_rules_20250913_141551.json
│   │   │   │   ├── fundamental_rules_20250913_141748.json
│   │   │   │   ├── fundamental_rules_20250913_180742.json
│   │   │   │   ├── fundamental_rules_20250913_235905.json
│   │   │   │   ├── fundamental_rules_20250914_130547.json
│   │   │   │   ├── fundamental_rules_20250914_131055.json
│   │   │   │   ├── fundamental_rules_20250914_132944.json
│   │   │   │   ├── fundamental_rules_20250919_095109.json
│   │   │   │   ├── fundamental_rules_20250919_131027.json
│   │   │   │   ├── fundamental_rules_20250919_142500.json
│   │   │   │   ├── fundamental_rules_20251006_220742.json
│   │   │   │   ├── fundamental_rules_20251006_225101.json
│   │   │   │   ├── fundamental_rules_20251007_222935.json
│   │   │   │   ├── magic_systems_20250912_235959.json
│   │   │   │   ├── magic_systems_20250913_002318.json
│   │   │   │   ├── magic_systems_20250913_002554.json
│   │   │   │   ├── magic_systems_20250913_141551.json
│   │   │   │   ├── magic_systems_20250913_141748.json
│   │   │   │   ├── magic_systems_20250913_180742.json
│   │   │   │   ├── magic_systems_20250913_235905.json
│   │   │   │   ├── magic_systems_20250914_130547.json
│   │   │   │   ├── magic_systems_20250914_131055.json
│   │   │   │   ├── magic_systems_20250914_132944.json
│   │   │   │   ├── magic_systems_20250919_095109.json
│   │   │   │   ├── magic_systems_20250919_131027.json
│   │   │   │   ├── magic_systems_20250919_142500.json
│   │   │   │   ├── magic_systems_20251006_220742.json
│   │   │   │   ├── magic_systems_20251006_225101.json
│   │   │   │   ├── magic_systems_20251007_222935.json
│   │   │   │   ├── world_history_20250912_235959.json
│   │   │   │   ├── world_history_20250913_002318.json
│   │   │   │   ├── world_history_20250913_002554.json
│   │   │   │   ├── world_history_20250913_141551.json
│   │   │   │   ├── world_history_20250913_141748.json
│   │   │   │   ├── world_history_20250913_180742.json
│   │   │   │   ├── world_history_20250913_235905.json
│   │   │   │   ├── world_history_20250914_130547.json
│   │   │   │   ├── world_history_20250914_131055.json
│   │   │   │   ├── world_history_20250914_132944.json
│   │   │   │   ├── world_history_20250919_095109.json
│   │   │   │   ├── world_history_20250919_131027.json
│   │   │   │   ├── world_history_20250919_142500.json
│   │   │   │   ├── world_history_20251006_220742.json
│   │   │   │   ├── world_history_20251006_225101.json
│   │   │   │   └── world_history_20251007_222935.json
│   │   │   ├── cultures.json
│   │   │   ├── fundamental_rules.json
│   │   │   ├── magic_systems.json
│   │   │   └── world_history.json
│   │   ├── locations/
│   │   │   ├── backup/
│   │   │   │   ├── defaults_20251006_220742.json
│   │   │   │   ├── defaults_20251006_225101.json
│   │   │   │   ├── defaults_20251007_222935.json
│   │   │   │   ├── locations_20250912_235959.json
│   │   │   │   ├── locations_20250913_002318.json
│   │   │   │   ├── locations_20250913_002554.json
│   │   │   │   ├── locations_20250913_141551.json
│   │   │   │   ├── locations_20250913_141748.json
│   │   │   │   ├── locations_20250913_180742.json
│   │   │   │   ├── locations_20250913_235905.json
│   │   │   │   ├── locations_20250914_130547.json
│   │   │   │   ├── locations_20250914_131055.json
│   │   │   │   ├── locations_20250914_132944.json
│   │   │   │   ├── locations_20250919_095109.json
│   │   │   │   ├── locations_20250919_131027.json
│   │   │   │   ├── locations_20250919_142500.json
│   │   │   │   ├── locations_20251006_220742.json
│   │   │   │   ├── locations_20251006_225101.json
│   │   │   │   └── locations_20251007_222935.json
│   │   │   ├── defaults.json
│   │   │   └── locations.json
│   │   └── scenarios/
│   │       ├── backup/
│   │       │   ├── origins_20250912_235330.json
│   │       │   ├── origins_20250912_235959.json
│   │       │   ├── origins_20250913_002318.json
│   │       │   ├── origins_20250913_002554.json
│   │       │   ├── origins_20250913_141551.json
│   │       │   ├── origins_20250913_141748.json
│   │       │   ├── origins_20250913_180742.json
│   │       │   ├── origins_20250913_235905.json
│   │       │   ├── origins_20250914_130547.json
│   │       │   ├── origins_20250914_131055.json
│   │       │   ├── origins_20250914_132944.json
│   │       │   ├── origins_20250919_095109.json
│   │       │   ├── origins_20250919_131027.json
│   │       │   ├── origins_20250919_142500.json
│   │       │   ├── origins_20251006_220742.json
│   │       │   ├── origins_20251006_225101.json
│   │       │   ├── origins_20251007_222935.json
│   │       │   ├── quests_20250912_235330.json
│   │       │   ├── quests_20250912_235959.json
│   │       │   ├── quests_20250913_002318.json
│   │       │   ├── quests_20250913_002554.json
│   │       │   ├── quests_20250913_141551.json
│   │       │   ├── quests_20250913_141748.json
│   │       │   ├── quests_20250913_180742.json
│   │       │   ├── quests_20250913_235905.json
│   │       │   ├── quests_20250914_130547.json
│   │       │   ├── quests_20250914_131055.json
│   │       │   ├── quests_20250914_132944.json
│   │       │   ├── quests_20250919_095109.json
│   │       │   ├── quests_20250919_131027.json
│   │       │   ├── quests_20250919_142500.json
│   │       │   ├── quests_20251006_220742.json
│   │       │   ├── quests_20251006_225101.json
│   │       │   └── quests_20251007_222935.json
│   │       ├── origins.json
│   │       └── quests.json
│   ├── README.md
│   ├── combat_display_settings.json
│   ├── game_config.json
│   ├── gui_config.json
│   ├── llm_config.json
│   ├── skills.json
│   └── system_config.json
├── core/
│   ├── agents/
│   │   ├── README.md
│   │   ├── __init__.py
│   │   ├── agent_manager.py
│   │   ├── base_agent.py
│   │   ├── combat_narrator.py
│   │   ├── context_evaluator.py
│   │   ├── data_retrieval_commands.py
│   │   ├── narrator.py
│   │   ├── rule_checker.py
│   │   ├── social_conflict_agent.py
│   │   └── trade_agent.py
│   ├── audio/
│   │   ├── __init__.py
│   │   └── tts_manager.py
│   ├── base/
│   │   ├── state/
│   │   │   ├── __init__.py
│   │   │   ├── game_state.py
│   │   │   ├── player_state.py
│   │   │   ├── state_manager.py
│   │   │   ├── stats_integration.py
│   │   │   └── world_state.py
│   │   ├── README.md
│   │   ├── __init__.py
│   │   ├── commands.py
│   │   ├── config.py
│   │   ├── engine.py
│   │   ├── game_loop.py
│   │   ├── init_modules.py
│   │   └── state.py
│   ├── character/
│   │   ├── selected_files_documentation_25.05.2025_22_45_07_output/
│   │   ├── README.md
│   │   ├── __init__.py
│   │   ├── background_generator.py
│   │   ├── npc_base.py
│   │   ├── npc_creator.py
│   │   ├── npc_family_generator.py
│   │   ├── npc_flavor.py
│   │   ├── npc_generator.py
│   │   ├── npc_manager.py
│   │   ├── npc_memory.py
│   │   ├── npc_persistence.py
│   │   └── npc_system.py
│   ├── combat/
│   │   ├── README.md
│   │   ├── __init__.py
│   │   ├── action_handlers.py
│   │   ├── combat_action.py
│   │   ├── combat_entity.py
│   │   ├── combat_manager.py
│   │   ├── dev_commands.py
│   │   └── enums.py
│   ├── game_flow/
│   │   ├── __init__.py
│   │   ├── command_handlers.py
│   │   ├── command_router.py
│   │   ├── event_log.py
│   │   ├── game_flow_utils.py
│   │   ├── input_router.py
│   │   ├── interaction_core.py
│   │   ├── interaction_processor.py
│   │   ├── lifecycle.py
│   │   ├── mode_transitions.py
│   │   ├── npc_interaction.py
│   │   ├── quest_updates.py
│   │   ├── reference_resolver.py
│   │   └── request_handlers.py
│   ├── interaction/
│   │   ├── context_builder.py
│   │   ├── enums.py
│   │   ├── social_effects.py
│   │   └── structured_requests.py
│   ├── inventory/
│   │   ├── README.md
│   │   ├── __init__.py
│   │   ├── currency_manager.py
│   │   ├── equipment_manager.py
│   │   ├── inventory_base.py
│   │   ├── inventory_commands.py
│   │   ├── inventory_commands_2.py
│   │   ├── inventory_commands_3.py
│   │   ├── inventory_item_operations.py
│   │   ├── inventory_limits.py
│   │   ├── inventory_manager.py
│   │   ├── item.py
│   │   ├── item_effect.py
│   │   ├── item_enums.py
│   │   ├── item_factory.py
│   │   ├── item_manager.py
│   │   ├── item_modifier.py
│   │   ├── item_serialization.py
│   │   ├── item_stat.py
│   │   ├── item_stat_modifier.py
│   │   ├── item_template_loader.py
│   │   ├── item_variation_generator.py
│   │   ├── narrative_item_creation.py
│   │   ├── narrative_item_discovery.py
│   │   ├── narrative_item_manager.py
│   │   └── narrative_item_mappings.py
│   ├── llm/
│   │   ├── README.md
│   │   ├── __init__.py
│   │   ├── llm_manager.py
│   │   ├── provider_manager.py
│   │   ├── settings_cli.py
│   │   ├── settings_manager.py
│   │   └── settings_manager_new.py
│   ├── orchestration/
│   │   ├── __init__.py
│   │   ├── combat_orchestrator.py
│   │   └── events.py
│   ├── stats/
│   │   ├── enums/
│   │   │   └── __init__.py
│   │   ├── tests/
│   │   │   ├── __init__.py
│   │   │   └── test_stats_manager.py
│   │   ├── README.md
│   │   ├── __init__.py
│   │   ├── combat_effects.py
│   │   ├── derived_stats.py
│   │   ├── enums.py
│   │   ├── modifier.py
│   │   ├── modifier_manager.py
│   │   ├── registry.py
│   │   ├── skill_check.py
│   │   ├── skill_manager.py
│   │   ├── stat_allocation.py
│   │   ├── stat_modifier_info.py
│   │   ├── stats_base.py
│   │   └── stats_manager.py
│   ├── testing/
│   │   ├── __init__.py
│   │   ├── headless_env.py
│   │   ├── headless_ui_listener.py
│   │   ├── quest_commands.py
│   │   └── scenario_runner.py
│   ├── utils/
│   │   ├── README.md
│   │   ├── dice.py
│   │   ├── dice.py.README.md
│   │   ├── dotdict.py
│   │   ├── enhanced_time_manager.py
│   │   ├── json_utils.py
│   │   ├── logging_config.py
│   │   ├── save_manager.py
│   │   └── time_utils.py
│   ├── README.md
│   └── __init__.py
├── gui/
│   ├── components/
│   │   ├── README.md
│   │   ├── character_sheet.py
│   │   ├── combat_display.py
│   │   ├── command_input.py
│   │   ├── game_menu.py
│   │   ├── game_output.py
│   │   ├── inventory_panel.py
│   │   ├── journal_panel.py
│   │   ├── menu_panel.py
│   │   ├── right_panel.py
│   │   ├── skill_check_display.py
│   │   ├── stat_allocation_widget.py
│   │   └── status_bar.py
│   ├── dialogs/
│   │   ├── settings/
│   │   │   ├── __init__.py
│   │   │   ├── agent_setup_tab.py
│   │   │   ├── anthropic_tab.py
│   │   │   ├── background_tab.py
│   │   │   ├── base_settings_dialog.py
│   │   │   ├── llm_general_tab.py
│   │   │   ├── llm_provider_tab.py
│   │   │   ├── llm_settings_dialog.py
│   │   │   ├── model_management_widget.py
│   │   │   ├── provider_tabs.py
│   │   │   ├── settings_dialog.py
│   │   │   └── style_tab.py
│   │   ├── README.md
│   │   ├── __init__.py
│   │   ├── base_dialog.py
│   │   ├── character_creation_dialog.py
│   │   ├── combat_settings_dialog.py
│   │   ├── game_over_dialog.py
│   │   ├── item_info_dialog.py
│   │   ├── load_game_dialog.py
│   │   ├── new_game_dialog.py
│   │   └── save_game_dialog.py
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── init_settings.py
│   │   └── resource_manager.py
│   ├── README.md
│   ├── descr.md
│   └── main_window.py
├── images/
│   ├── character/
│   │   └── paperdoll/
│   │       └── dump/
│   ├── character_icons/
│   │   ├── Cinderspawn_Cleric/
│   │   ├── Cinderspawn_Mage/
│   │   ├── Cinderspawn_Ranger/
│   │   ├── Cinderspawn_Rogue/
│   │   ├── Cinderspawn_Wanderer/
│   │   ├── Cinderspawn_Warrior/
│   │   ├── Dwarf_Cleric/
│   │   ├── Dwarf_Mage/
│   │   ├── Dwarf_Ranger/
│   │   ├── Dwarf_Rogue/
│   │   ├── Dwarf_Warrior/
│   │   ├── Elf_Cleric/
│   │   ├── Elf_Mage/
│   │   ├── Elf_Ranger/
│   │   ├── Elf_Rogue/
│   │   ├── Elf_Wanderer/
│   │   ├── Elf_Warrior/
│   │   ├── Halfling_Cleric/
│   │   ├── Halfling_Mage/
│   │   ├── Halfling_Ranger/
│   │   ├── Halfling_Rogue/
│   │   ├── Halfling_Wanderer/
│   │   ├── Halfling_Warrior/
│   │   ├── Human_Cleric/
│   │   ├── Human_Mage/
│   │   ├── Human_Ranger/
│   │   ├── Human_Rogue/
│   │   ├── Human_Wanderer/
│   │   ├── Human_Warrior/
│   │   ├── Maelstri_Cleric/
│   │   ├── Maelstri_Mage/
│   │   ├── Maelstri_Ranger/
│   │   ├── Maelstri_Rogue/
│   │   ├── Maelstri_Wanderer/
│   │   ├── Maelstri_Warrior/
│   │   ├── Mycora_Cleric/
│   │   ├── Mycora_Mage/
│   │   ├── Mycora_Ranger/
│   │   ├── Mycora_Rogue/
│   │   ├── Mycora_Wanderer/
│   │   ├── Mycora_Warrior/
│   │   ├── Orc_Cleric/
│   │   ├── Orc_Mage/
│   │   ├── Orc_Ranger/
│   │   ├── Orc_Rogue/
│   │   ├── Orc_Wanderer/
│   │   ├── Orc_Warrior/
│   │   ├── Prismal_Cleric/
│   │   ├── Prismal_Mage/
│   │   ├── Prismal_Ranger/
│   │   ├── Prismal_Rogue/
│   │   ├── Prismal_Wanderer/
│   │   ├── Prismal_Warrior/
│   │   ├── gui/
│   │   │   ├── background/
│   │   │   ├── colors/
│   │   │   │   └── placeholder_creator.py
│   │   │   ├── combat_display/
│   │   │   ├── textures/
│   │   │   └── placeholder_creator.py
│   │   ├── icons/
│   │   ├── character_combinations.txt.bulk_settings.json
│   │   └── convert_images_recursive.py
│   ├── gui/
│   │   ├── background/
│   │   └── combat_display/
│   ├── icons/
│   │   ├── accessory/
│   │   ├── armor/
│   │   ├── consumable/
│   │   ├── container/
│   │   ├── document/
│   │   ├── key/
│   │   ├── material/
│   │   ├── miscellaneous/
│   │   ├── quest/
│   │   ├── shield/
│   │   ├── tool/
│   │   ├── treasure/
│   │   └── weapon/
│   └── convert_images_recursive.py
├── log_viewer_tool/
│   ├── logs/
│   ├── __init__.py
│   ├── color_delegate.py
│   ├── color_settings_dialog.py
│   ├── export_dialog.py
│   ├── filter_model.py
│   ├── log_entry.py
│   ├── log_parser.py
│   ├── main_window.py
│   └── settings_manager.py
├── logs/
│   └── item_normalization_report.json
├── reports/
│   └── npc_headless_report.json
├── saves/
│   ├── backups/
│   ├── npcs/
│   │   └── _report_tmp/
│   ├── README.md
│   ├── newgame1.json
│   ├── newgame2.json
│   ├── newgame3.json
│   ├── test1.json
│   ├── test2.json
│   ├── test3.json
│   ├── test4.json
│   ├── test5.json
│   ├── test6.json
│   ├── test7.json
│   ├── test8.json
│   ├── test8wolf.json
│   ├── test9.json
│   ├── test_fight_new.json
│   ├── testing.json
│   ├── testing_apple1.json
│   └── wolf_alpha.json
├── scripts/
│   └── migrations/
│       └── normalize_items_aliases.py
├── selected_files_documentation_08.10.2025_22_29_43_output/
├── selected_files_documentation_09.10.2025_10_35_57_output/
├── sound/
│   └── README.md
├── tests/
│   ├── README.md
│   ├── __init__.py
│   └── test_stats_system.py
├── tools/
│   ├── headless_cli/
│   │   ├── __init__.py
│   │   ├── main.py
│   │   ├── repro_new_game_wolf.py
│   │   ├── run_families_quick.py
│   │   ├── run_loaded.py
│   │   └── verify_q02_autocomplete.py
│   ├── __init__.py
│   ├── npc_headless_report.py
│   ├── sanity_check_npc.py
│   ├── test_npc_boss_overlays_headless.py
│   ├── test_npc_families_headless.py
│   ├── test_npc_generation_rules_headless.py
│   ├── test_npc_variants_headless.py
│   ├── test_social_determinism_headless.py
│   ├── test_social_npcs_headless.py
│   ├── test_spawn_intent_resolution_headless.py
│   └── validate_json.py
├── web/
│   ├── client/
│   │   ├── css/
│   │   └── js/
│   ├── server/
│   │   └── server.py
│   ├── README.md
│   └── layout_edit_instr.md
├── world_configurator/
│   ├── assistant/
│   │   ├── __init__.py
│   │   ├── context.py
│   │   ├── panel.py
│   │   ├── patching.py
│   │   └── prompt_builder.py
│   ├── config/
│   │   └── skills.json
│   ├── data/
│   ├── llm/
│   │   ├── __init__.py
│   │   ├── client_base.py
│   │   ├── gemini.py
│   │   ├── providers_registry.py
│   │   └── settings.py
│   ├── logs/
│   ├── models/
│   │   ├── __init__.py
│   │   ├── base_models.py
│   │   ├── item_data_manager.py
│   │   ├── location_data.py
│   │   ├── location_defaults_manager.py
│   │   ├── names_manager.py
│   │   ├── origin_data.py
│   │   ├── skill_manager.py
│   │   ├── variants_manager.py
│   │   ├── world_config.py
│   │   └── world_data.py
│   ├── selected_files_documentation_31.05.2025_22_40_59_output/
│   ├── ui/
│   │   ├── dialogs/
│   │   │   ├── __init__.py
│   │   │   ├── base_dialog.py
│   │   │   ├── export_dialog.py
│   │   │   ├── item_selection_dialog.py
│   │   │   ├── new_project_dialog.py
│   │   │   ├── quest_selection_dialog.py
│   │   │   ├── settings_dialog.py
│   │   │   └── skill_selection_dialog.py
│   │   ├── editors/
│   │   │   ├── SpecificItemEditor.py
│   │   │   ├── __init__.py
│   │   │   ├── class_editor.py
│   │   │   ├── culture_editor.py
│   │   │   ├── history_editor.py
│   │   │   ├── item_editor_panel.py
│   │   │   ├── location_editor.py
│   │   │   ├── magic_systems_editor.py
│   │   │   ├── names_editor.py
│   │   │   ├── origin_editor.py
│   │   │   ├── quest_editor.py
│   │   │   ├── race_editor.py
│   │   │   ├── skills_editor.py
│   │   │   └── variants_editor.py
│   │   ├── widgets/
│   │   │   ├── __init__.py
│   │   │   ├── multiselect_combo.py
│   │   │   └── typed_resistances_editor.py
│   │   ├── __init__.py
│   │   └── main_window.py
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── data_validator.py
│   │   ├── file_manager.py
│   │   └── logging_setup.py
│   ├── validators/
│   │   └── origins_quests_validator.py
│   ├── README.md
│   ├── __init__.py
│   └── main.py
├── world_configurator.egg-info/
├── PROJECT_STRUCTURE.MD
├── README.md
├── REFACTORING_PLAN.MD
├── WARP.md
├── background_refactor_checklist.md
├── checklist.md
├── checklist_full.md
├── combat_flow.md
├── combat_flow_adjustment_checklist.md
├── create_color_swatches.py
├── create_texture.py
├── create_textures.py
├── engine_refactor_checklist.md
├── gameworld_framework.md
├── generate_project_structure.py
├── gui_redesign_spec.md
├── implementation_summary.md
├── magic_system_overhaul.md
├── magic_system_overhaul_checklist.md
├── main.py
├── manage_llm_settings.py
├── mode_transition_plan.md
├── npc_item_mgmt_combat.md
├── prompt_construction.md
├── quest_management_implementation.md
├── root_causes.MD
├── run_gui.py
├── run_headless.py
├── run_headless_load.py
├── run_log_viewer.py
├── run_verify_q02.py
├── setup.py
├── start_server.py
├── test_difficulty_encounter_scaling.py
├── test_inventory.py
└── world_configurator.py
```

## Files Content

### File: config\aliases\entities.json

```json
{
  "entities": {
    "white_wolf": {
      "aliases": [
        "white_wolf",
        "wolf_white",
        "white-wolf",
        "albino_wolf",
        "snow_wolf"
      ]
    }
  },
  "metadata": {
    "version": "1.0.0",
    "description": "Alias mappings for entities to support normalization in quests/evidence. Extend freely."
  }
}


```

### File: config\world\base\cultures.json

```json
{
  "cultures": {
    "concordant": {
      "id": "concordant",
      "name": "The Concordant Cities",
      "description": "A confederation of seven interconnected city-states that sit at major Resonance nodes on the Nexus plane. Their architecture constantly shifts as it incorporates elements from other planes during Resonance Events.",
      "values": [
        {
          "name": "Harmony",
          "description": "Balancing the influences of all planes for the benefit of society.",
          "importance": 9
        },
        {
          "name": "Adaptability",
          "description": "Embracing change brought by Resonance Events rather than fearing it.",
          "importance": 8
        },
        {
          "name": "Knowledge",
          "description": "Understanding the patterns of Resonance to better predict and utilize them.",
          "importance": 7
        }
      ],
      "traditions": [
        {
          "name": "Attunement",
          "description": "A ritual tattooing process that helps citizens maintain their identity during plane shifts. The tattoos contain geometric patterns representing all five planes.",
          "occasion": "Coming of age (16 years)",
          "significance": "Marks full citizenship and provides protection during Resonance Events."
        },
        {
          "name": "Resonance Festival",
          "description": "A celebration held during major predicted Resonance Events, with music, dance, and temporary markets for cross-planar goods.",
          "occasion": "Major Resonance Events (5-7 times per year)",
          "significance": "Celebrates the unique nature of their fractured world and the opportunities it presents."
        }
      ],
      "language_style": "Formal with many technical terms related to planar phenomena. Contains words and sounds borrowed from all five planes.",
      "naming_conventions": {
        "male": "Melodic names with consonant pairs (Jaedin, Thaerol, Vestrian)",
        "female": "Flowing names with multiple vowels (Aliora, Nyaeve, Seraphine)",
        "places": "Often named after Resonance patterns or Luminary fragments (Harmonium, Echopoint, Luminfall)"
      },
      "common_traits": [
        "Diplomatic",
        "Studious",
        "Pragmatic",
        "Adaptable"
      ]
    },
    "verdant": {
      "id": "verdant",
      "name": "The Verdant Collective",
      "description": "A nature-focused society that primarily exists in the Verdant plane but maintains outposts on Nexus. Their societal roles are seasonal, with individuals changing their functions throughout the year.",
      "values": [
        {
          "name": "Symbiosis",
          "description": "Living in harmony with the natural world and each other.",
          "importance": 10
        },
        {
          "name": "Renewal",
          "description": "Embracing the cycles of growth, death, and rebirth.",
          "importance": 8
        },
        {
          "name": "Community",
          "description": "Prioritizing the needs of the collective over the individual.",
          "importance": 7
        }
      ],
      "traditions": [
        {
          "name": "Season Shifting",
          "description": "A ceremony where individuals transition to new societal roles based on the changing seasons.",
          "occasion": "Each solstice and equinox",
          "significance": "Ensures that everyone experiences different aspects of their society and prevents stagnation."
        },
        {
          "name": "Green Speech Initiation",
          "description": "A ritual where new members learn the secret language of the collective, composed of plant growth patterns and pheromones.",
          "occasion": "Upon joining the collective or coming of age",
          "significance": "Allows communication that outsiders cannot decode, preserving the collective's secrets."
        }
      ],
      "language_style": "Soft spoken verbal language with many metaphors drawn from plant and animal life. Green Speech is non-verbal and uses pheromones and subtle manipulation of nearby plants.",
      "naming_conventions": {
        "male": "Names derived from plant species or natural phenomena (Alder, Rowan, Brook)",
        "female": "Names derived from flowers or natural elements (Willow, Laurel, Dawn)",
        "places": "Named after ecological features (Deeproot, Sunmeadow, Mistcanopy)"
      },
      "common_traits": [
        "Patient",
        "Communal",
        "Secretive with outsiders",
        "Deeply intuitive"
      ]
    },
    "crystalline": {
      "id": "crystalline",
      "name": "The Crystalline Consortium",
      "description": "A highly ordered society with the most stable presence on the Crystalline plane and trading enclaves on Nexus. Personal worth is measured by one's contribution to mathematical and magical precision.",
      "values": [
        {
          "name": "Order",
          "description": "Maintaining structure, hierarchy, and predictability in all things.",
          "importance": 9
        },
        {
          "name": "Excellence",
          "description": "Striving for perfection in one's specialized field.",
          "importance": 8
        },
        {
          "name": "Legacy",
          "description": "Creating lasting works that will endure through time.",
          "importance": 7
        }
      ],
      "traditions": [
        {
          "name": "Faceting",
          "description": "A coming-of-age ritual where adolescents receive geometric crystal implants that enhance specific mental abilities.",
          "occasion": "Upon completing academic assessment (typically age 14-16)",
          "significance": "Determines one's specialized role in society and enhances natural talents."
        },
        {
          "name": "Calculation Contest",
          "description": "Annual competition where individuals and teams solve increasingly complex mathematical and magical equations.",
          "occasion": "Mid-winter",
          "significance": "Elevates social standing and determines resource allocation for the coming year."
        }
      ],
      "language_style": "Precise and technical with minimal use of metaphor or ambiguity. Mathematical formulae are often incorporated into everyday speech.",
      "naming_conventions": {
        "male": "Geometric or mineral-based names (Hexar, Obsidian, Quartz)",
        "female": "Gemstone or crystalline structure names (Sapphira, Amethyst, Lattice)",
        "places": "Named after mathematical concepts or crystal formations (Dodecahedron, Fibonacci, Geode)"
      },
      "common_traits": [
        "Methodical",
        "Reserved",
        "Perfectionistic",
        "Specialized"
      ]
    },
    "ashen": {
      "id": "ashen",
      "name": "The Ashen Covenant",
      "description": "Nomadic societies traveling the Ashen plane with temporary settlements on Nexus. Their culture focuses on impermanence and rebirth, with no permanent ownership as possessions rotate through the community.",
      "values": [
        {
          "name": "Impermanence",
          "description": "Accepting that all things eventually end and transform.",
          "importance": 9
        },
        {
          "name": "Memory",
          "description": "Preserving the wisdom and stories of those who came before.",
          "importance": 8
        },
        {
          "name": "Transformation",
          "description": "Embracing change and rebirth as natural and necessary.",
          "importance": 8
        }
      ],
      "traditions": [
        {
          "name": "Dust Keeping",
          "description": "The practice of preserving the ashes of ancestors and using them in rituals to communicate with the dead.",
          "occasion": "Death of community members and monthly remembrance ceremonies",
          "significance": "Maintains connection with ancestors and their wisdom, while honoring the cycle of decay and rebirth."
        },
        {
          "name": "Possession Exchange",
          "description": "Periodic ceremony where all material goods are collected and redistributed among the community.",
          "occasion": "New moon of each month",
          "significance": "Reinforces the concept that nothing is permanently owned, teaches detachment from material possessions."
        }
      ],
      "language_style": "Poetic with many euphemisms, especially regarding death and endings. Words often have multiple context-dependent meanings.",
      "naming_conventions": {
        "male": "Names related to fire or earth (Ember, Coal, Dust)",
        "female": "Names related to transition or cycles (Twilight, Echo, Whisper)",
        "places": "Temporary settlements named for events or omens (Ravenfall, Ashbloom, Veilbreak)"
      },
      "common_traits": [
        "Philosophical",
        "Detached",
        "Spiritual",
        "Resilient"
      ]
    },
    "tempest": {
      "id": "tempest",
      "name": "The Tempest Flotilla",
      "description": "A society constantly moving throughout the chaotic Tempest plane with harbors on Nexus during certain celestial alignments. They adapt rapidly to change with fluid social hierarchies that can transform daily.",
      "values": [
        {
          "name": "Freedom",
          "description": "The right to change and choose one's path without constraint.",
          "importance": 10
        },
        {
          "name": "Opportunity",
          "description": "Seizing chances that arise from chaos and unexpected change.",
          "importance": 8
        },
        {
          "name": "Resilience",
          "description": "Weathering storms both literal and metaphorical with flexibility and strength.",
          "importance": 7
        }
      ],
      "traditions": [
        {
          "name": "Storm Binding",
          "description": "Capturing the essence of Tempest plane storms in tattoos that grant unpredictable magical abilities.",
          "occasion": "When an individual successfully navigates their first major Tempest storm",
          "significance": "Marks true membership in the Flotilla and bestows unique, often chaotic magical gifts."
        },
        {
          "name": "Leadership Flux",
          "description": "A daily ritual where leadership positions are reassigned based on needs and circumstances.",
          "occasion": "Dawn of each day",
          "significance": "Ensures that those best suited to current challenges take command, prevents power entrenchment."
        }
      ],
      "language_style": "Fast-paced with many slang terms that change rapidly. Incorporates sounds mimicking wind and water. Tonal shifts indicate emotional context.",
      "naming_conventions": {
        "male": "Action-oriented names (Surge, Dash, Flint)",
        "female": "Weather or energy-based names (Storm, Spark, Gale)",
        "places": "Named after vessels or weather events (Thunderwake, Squallrider, Maelstrom)"
      },
      "common_traits": [
        "Spontaneous",
        "Bold",
        "Adaptable",
        "Unpredictable"
      ]
    }
  },
  "metadata": {
    "version": "1.0.0",
    "description": "Culture definitions for the RPG game world"
  }
}
```

### File: config\world\base\fundamental_rules.json

```json
{
  "name": "Laws of Aetheris",
  "description": "The fundamental rules that govern how the world of Aetheris operates after The Shattering.",
  "rules": [
    {
      "name": "The Fractured Reality",
      "description": "Aetheris is split into five overlapping planes: Verdant (nature), Crystalline (order), Ashen (decay), Tempest (chaos), and Nexus (the central plane where most inhabitants now dwell).",
      "category": "cosmology",
      "effects": [
        "Most sentient beings live on the Nexus plane, which serves as a crossroads between the other planes",
        "The other planes can be accessed through special portals, during Resonance Events, or through specific magical techniques",
        "Each plane has unique physical laws and resources that influence magic and technology",
        "Time flows slightly differently in each plane, causing travelers to experience temporal distortion"
      ]
    },
    {
      "name": "Resonance Events",
      "description": "Periodic and partly predictable occurrences where planes temporarily merge, causing landscapes, creatures, and cultures to blend before separating again.",
      "category": "planar phenomenon",
      "effects": [
        "Minor Resonance Events are common and localized, affecting small areas",
        "Major Resonance Events are rarer and can transform entire regions",
        "The Resonance Calendar predicts many events, but anomalies are increasing",
        "Beings caught during Resonance Events may be altered or merged with alternate versions of themselves",
        "Some areas become 'Planar Bleed Zones' where the merger becomes permanent"
      ]
    },
    {
      "name": "The Luminaries",
      "description": "Once-unified cosmic entities who maintained balance before The Shattering, now fragmented across the planes. Their fragments still influence reality.",
      "category": "divine",
      "effects": [
        "Luminary fragments manifest as powerful artifacts with reality-altering properties",
        "The Five Speakers can hear and interpret the will of specific Luminaries",
        "Divine magic draws power from Luminary fragments rather than unified deities",
        "Collecting multiple fragments increases power but risks instability",
        "Some fragments have developed sentience and their own agendas"
      ]
    },
    {
      "name": "Planar Affinity",
      "description": "All beings have natural affinities for specific planes, influencing their abilities, temperament, and magical talent.",
      "category": "biology",
      "effects": [
        "Birth location and lineage determine initial planar affinity",
        "Exposure to different planes can gradually shift one's affinity",
        "Magic is easier to perform when aligned with one's planar affinity",
        "Some individuals (Resonance-touched) have multiple affinities",
        "Certain races evolved specific adaptations to their primary plane"
      ]
    },
    {
      "name": "Magical Resonance",
      "description": "Magic in Aetheris is shaped by The Shattering, manifesting differently in each plane and requiring specific techniques based on planar alignment.",
      "category": "magic",
      "effects": [
        "Traditional spellcasting is unreliable across planar boundaries",
        "Song Weaving is the most ancient and stable form of cross-planar magic",
        "Each plane has a signature magical style (e.g., Facet Magic in Crystalline)",
        "Magical education typically focuses on a planar specialty",
        "The most powerful magic often requires components from multiple planes"
      ]
    },
    {
      "name": "Planar Resources",
      "description": "Each plane produces unique materials and resources essential for advanced magic, technology, and medicine.",
      "category": "economy",
      "effects": [
        "Verdant Plane: Living materials, adaptive plant matter, medicinal components",
        "Crystalline Plane: Perfect geometric minerals, resonance crystals, timekeeping devices",
        "Ashen Plane: Memory metals, preservative compounds, spectral essences",
        "Tempest Plane: Energy condensates, probability alloys, chaos crystals",
        "Nexus Plane: Planar binding agents, stabilizing compounds, universal catalysts"
      ]
    }
  ]
}
```

### File: config\world\base\magic_systems.json

```json
{
  "magic_systems": {
    "song_weaving": {
      "id": "song_weaving",
      "name": "Song Weaving",
      "description": "The most ancient form of magic, predating The Shattering. Practitioners create effects through specific melodies and harmonies rather than formal spellcasting.",
      "origin": "Song Weaving is the original form of magic used in Aetheris before The Shattering. It was taught directly by the Luminaries to the first inhabitants of the world, who discovered that certain melodies could tap into the natural magical currents that flowed through the land.",
      "limitations": "Requires vocal ability and musical aptitude. Effects are weaker when performed solo rather than in a group. Cannot be performed silently. Some complex effects require specific musical instruments as foci.",
      "practitioners": "Most commonly practiced among Elves, who have maintained the ancient traditions, and Maelstri, who naturally resonate with the harmonic frequencies. However, any race with sufficient musical talent can learn its basics.",
      "cultural_significance": "Song Weaving is revered as the purest form of magic, especially among older cultures. Annual music festivals in the Concordant Cities often feature Song Weaving performances, and the most skilled practitioners are highly respected across all planes.",
      "racial_affinities": {
        "Elf": {
          "affinity_level": "High",
          "learning_difficulty": "Easy",
          "natural_talent": true,
          "bonus_effects": "10% increased potency of all Song Weaving spells"
        },
        "Maelstri": {
          "affinity_level": "High",
          "learning_difficulty": "Easy",
          "natural_talent": true,
          "bonus_effects": "Can maintain Song Weaving effects 25% longer than other races"
        },
        "Human": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Halfling": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Mycora": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Dwarf": {
          "affinity_level": "Low",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Orc": {
          "affinity_level": "Low",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Prismal": {
          "affinity_level": "Low",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Cinderspawn": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        }
      },
      "class_affinities": {
        "Mage": {
          "affinity_level": "High",
          "learning_difficulty": "Easy",
          "required_stats": {
            "INT": 12,
            "CHA": 10
          }
        },
        "Cleric": {
          "affinity_level": "High",
          "learning_difficulty": "Easy",
          "required_stats": {
            "WIS": 12,
            "CHA": 10
          }
        },
        "Wanderer": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "required_stats": {
            "CHA": 12
          }
        },
        "Ranger": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "required_stats": {
            "WIS": 12,
            "CHA": 8
          }
        },
        "Rogue": {
          "affinity_level": "Low",
          "learning_difficulty": "Hard",
          "required_stats": {
            "CHA": 14
          }
        },
        "Warrior": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "CHA": 14,
            "INT": 10
          }
        }
      },
      "spells": {
        "harmonic_healing": {
          "id": "harmonic_healing",
          "name": "Harmonic Healing",
          "description": "A soothing melody that accelerates natural healing processes in the target.",
          "mana_cost": 15,
          "casting_time": "10 seconds",
          "range": "5m",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "healing",
              "value": 20.0,
              "stat_affected": "",
              "status_effect": "",
              "duration": 0,
              "dice_notation": "2d6+8",
              "description": "Immediate healing of wounds and ailments"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 2.0,
              "stat_affected": "HP Regeneration",
              "status_effect": "",
              "duration": 3,
              "dice_notation": "",
              "description": "Accelerated natural healing for a short duration"
            }
          ],
          "level": 2,
          "components": [
            "voice",
            "focus"
          ],
          "tags": [
            "healing",
            "regeneration",
            "restoration"
          ]
        },
        "resonant_shield": {
          "id": "resonant_shield",
          "name": "Resonant Shield",
          "description": "Creates a barrier of sound waves that deflects incoming attacks.",
          "mana_cost": 20,
          "casting_time": "1 action",
          "range": "self",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 5.0,
              "stat_affected": "Defense",
              "status_effect": "",
              "duration": 5,
              "dice_notation": "",
              "description": "Sound waves deflect physical and magical attacks"
            }
          ],
          "level": 2,
          "components": [
            "voice",
            "gesture"
          ],
          "tags": [
            "protection",
            "defense",
            "sound"
          ]
        },
        "chorus_of_clarity": {
          "id": "chorus_of_clarity",
          "name": "Chorus of Clarity",
          "description": "A harmonizing melody that clears the mind and enhances perception.",
          "mana_cost": 10,
          "casting_time": "5 seconds",
          "range": "10m",
          "target": "multiple",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 2.0,
              "stat_affected": "INT",
              "status_effect": "",
              "duration": 10,
              "dice_notation": "",
              "description": "Temporarily enhances intellectual capabilities"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 2.0,
              "stat_affected": "WIS",
              "status_effect": "",
              "duration": 10,
              "dice_notation": "",
              "description": "Temporarily enhances perceptive capabilities"
            }
          ],
          "level": 1,
          "components": [
            "voice",
            "concentration"
          ],
          "tags": [
            "enhancement",
            "mind",
            "perception"
          ]
        },
        "dirge_of_despair": {
          "id": "dirge_of_despair",
          "name": "Dirge of Despair",
          "description": "A haunting melody that instills dread and weakens resolve.",
          "mana_cost": 25,
          "casting_time": "1 action",
          "range": "15m",
          "target": "area",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": -2.0,
              "stat_affected": "CHA",
              "status_effect": "",
              "duration": 5,
              "dice_notation": "",
              "description": "Weakens social presence and confidence"
            },
            {
              "target_type": "target",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Frightened",
              "duration": 3,
              "dice_notation": "",
              "description": "Targets feel a deep sense of dread and fear"
            }
          ],
          "level": 3,
          "components": [
            "voice",
            "gesture",
            "concentration"
          ],
          "tags": [
            "debuff",
            "fear",
            "control"
          ]
        },
        "planar_harmonization": {
          "id": "planar_harmonization",
          "name": "Planar Harmonization",
          "description": "A complex melody that resonates with the natural frequencies of different planes, facilitating travel and communication between them.",
          "mana_cost": 40,
          "casting_time": "1 minute",
          "range": "30m",
          "target": "area",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 10.0,
              "stat_affected": "Planar Resonance",
              "status_effect": "",
              "duration": 30,
              "dice_notation": "",
              "description": "Enhances ability to perceive and interact with planar energies"
            }
          ],
          "level": 5,
          "components": [
            "voice",
            "instrument",
            "focus",
            "concentration"
          ],
          "tags": [
            "planar",
            "utility",
            "ritual"
          ]
        },
        "song_of_mending": {
          "id": "song_of_mending",
          "name": "Song of Mending",
          "description": "A gentle tune that repairs physical objects and mends broken items.",
          "mana_cost": 15,
          "casting_time": "30 seconds",
          "range": "5m",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "healing",
              "value": 30.0,
              "stat_affected": "",
              "status_effect": "",
              "duration": 0,
              "dice_notation": "",
              "description": "Repairs damage to a non-living object"
            }
          ],
          "level": 2,
          "components": [
            "voice",
            "focus"
          ],
          "tags": [
            "utility",
            "restoration",
            "crafting"
          ]
        }
      }
    },
    "planar_anchoring": {
      "id": "planar_anchoring",
      "name": "Planar Anchoring",
      "description": "The art of maintaining stability during Resonance Events. Practitioners can extend areas of stability or purposefully blur planar boundaries.",
      "origin": "Planar Anchoring emerged shortly after The Shattering as a necessity for survival. The Harmonic Order developed these techniques to protect settlements when the planes would temporarily merge, preventing catastrophic destruction.",
      "limitations": "Requires physical components from multiple planes. Creates significant mental strain on the caster, with prolonged use potentially causing 'planar sickness' - a condition where the practitioner begins to exist partially in multiple planes simultaneously.",
      "practitioners": "Primarily used by the Harmonic Order as part of their duty to protect settlements during Resonance Events. It is also practiced by planar researchers and certain specialized mages who study the boundaries between realities.",
      "cultural_significance": "Planar Anchors are highly respected in all societies, as they serve as protectors during dangerous Resonance Events. In the Concordant Cities, they hold positions of authority and are often consulted on matters of planar significance.",
      "racial_affinities": {
        "Human": {
          "affinity_level": "High",
          "learning_difficulty": "Moderate",
          "natural_talent": true,
          "bonus_effects": "Can maintain anchoring effects 20% longer than other races"
        },
        "Prismal": {
          "affinity_level": "Very High",
          "learning_difficulty": "Easy",
          "natural_talent": true,
          "bonus_effects": "15% reduced mana cost for planar anchoring spells"
        },
        "Maelstri": {
          "affinity_level": "High",
          "learning_difficulty": "Moderate",
          "natural_talent": true,
          "bonus_effects": "Can detect planar instabilities within 50m radius"
        },
        "Elf": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Dwarf": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Mycora": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Halfling": {
          "affinity_level": "Low",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Orc": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Cinderspawn": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        }
      },
      "class_affinities": {
        "Mage": {
          "affinity_level": "Very High",
          "learning_difficulty": "Moderate",
          "required_stats": {
            "INT": 14,
            "WIS": 10
          }
        },
        "Cleric": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "required_stats": {
            "WIS": 14,
            "INT": 10
          }
        },
        "Wanderer": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "required_stats": {
            "INT": 12,
            "WIS": 12
          }
        },
        "Ranger": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "WIS": 14,
            "INT": 12
          }
        },
        "Rogue": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "INT": 14,
            "DEX": 14
          }
        },
        "Warrior": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "required_stats": {
            "INT": 14,
            "CON": 14,
            "WIS": 10
          }
        }
      },
      "spells": {
        "stability_field": {
          "id": "stability_field",
          "name": "Stability Field",
          "description": "Creates a field where planar fluctuations are suppressed, providing safety during Resonance Events.",
          "mana_cost": 30,
          "casting_time": "30 seconds",
          "range": "20m radius",
          "target": "area",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 15.0,
              "stat_affected": "Planar Stability",
              "status_effect": "",
              "duration": 30,
              "dice_notation": "",
              "description": "Maintains the current plane's physics and prevents planar bleeding"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 3.0,
              "stat_affected": "Defense",
              "status_effect": "",
              "duration": 30,
              "dice_notation": "",
              "description": "The stability field provides minor protection against normal attacks as well"
            }
          ],
          "level": 3,
          "components": [
            "gesture",
            "focus",
            "planar components"
          ],
          "tags": [
            "protection",
            "planar",
            "area effect"
          ]
        },
        "reality_tether": {
          "id": "reality_tether",
          "name": "Reality Tether",
          "description": "Anchors a person or object to their home plane, protecting them from planar shifts and dimensional effects.",
          "mana_cost": 25,
          "casting_time": "1 action",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": -10.0,
              "stat_affected": "Planar Resonance",
              "status_effect": "",
              "duration": 60,
              "dice_notation": "",
              "description": "Reduces susceptibility to planar effects and dimensional displacement"
            }
          ],
          "level": 2,
          "components": [
            "touch",
            "focus",
            "crystalline dust"
          ],
          "tags": [
            "protection",
            "planar",
            "anchoring"
          ]
        },
        "planar_sight": {
          "id": "planar_sight",
          "name": "Planar Sight",
          "description": "Grants the ability to see planar boundaries, resonance patterns, and entities from other planes that might otherwise be invisible.",
          "mana_cost": 20,
          "casting_time": "1 action",
          "range": "self",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 10.0,
              "stat_affected": "Perception",
              "status_effect": "",
              "duration": 15,
              "dice_notation": "",
              "description": "Allows visibility of planar boundaries and cross-planar entities"
            }
          ],
          "level": 2,
          "components": [
            "gesture",
            "prismatic lens"
          ],
          "tags": [
            "divination",
            "planar",
            "perception"
          ]
        },
        "boundary_distortion": {
          "id": "boundary_distortion",
          "name": "Boundary Distortion",
          "description": "Temporarily weakens planar boundaries in a small area, allowing for partial merging of planes or extraction of planar energy.",
          "mana_cost": 35,
          "casting_time": "1 minute",
          "range": "10m radius",
          "target": "area",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": -20.0,
              "stat_affected": "Planar Stability",
              "status_effect": "",
              "duration": 10,
              "dice_notation": "",
              "description": "Creates a controlled destabilization of planar boundaries"
            }
          ],
          "level": 4,
          "components": [
            "gesture",
            "focus",
            "components from target plane",
            "ritual circle"
          ],
          "tags": [
            "planar",
            "manipulation",
            "advanced"
          ]
        },
        "resonance_shield": {
          "id": "resonance_shield",
          "name": "Resonance Shield",
          "description": "Creates a personal barrier that absorbs planar energy and harmful resonance effects.",
          "mana_cost": 25,
          "casting_time": "1 action",
          "range": "self",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 15.0,
              "stat_affected": "Planar Resistance",
              "status_effect": "",
              "duration": 20,
              "dice_notation": "",
              "description": "Provides immunity to harmful effects from planar resonance and instability"
            },
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 5.0,
              "stat_affected": "Magic Resistance",
              "status_effect": "",
              "duration": 20,
              "dice_notation": "",
              "description": "The shield also provides some protection against conventional magic"
            }
          ],
          "level": 3,
          "components": [
            "gesture",
            "focus",
            "resonant crystal"
          ],
          "tags": [
            "protection",
            "planar",
            "defensive"
          ]
        },
        "planar_transit": {
          "id": "planar_transit",
          "name": "Planar Transit",
          "description": "Creates a stable corridor between planes, allowing safe passage for a short time. Only works between planes currently in resonance.",
          "mana_cost": 50,
          "casting_time": "5 minutes",
          "range": "5m radius",
          "target": "area",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Planar Transit",
              "duration": 10,
              "dice_notation": "",
              "description": "Creates a controlled passage between planes in resonance"
            }
          ],
          "level": 5,
          "components": [
            "gesture",
            "focus",
            "planar essence",
            "ritual circle",
            "resonance map"
          ],
          "tags": [
            "planar",
            "travel",
            "advanced",
            "ritual"
          ]
        }
      }
    },
    "echo_binding": {
      "id": "echo_binding",
      "name": "Echo Binding",
      "description": "The art of capturing 'echoes' - residual effects from other planes that linger after Resonance Events - and binding them to objects or people to grant temporary planar properties.",
      "origin": "Echo Binding emerged from the opportunistic practices of scavengers who frequented areas after Resonance Events. They discovered that certain residual energies could be captured and preserved for later use, eventually developing sophisticated techniques to harness these 'echoes'.",
      "limitations": "Requires fresh echoes from recent Resonance Events. Prolonged use can cause 'planar bleeding' - uncontrolled manifestations of other planes. The practice is somewhat unstable; effects can be unpredictable if not properly controlled.",
      "practitioners": "Popular among independent magical practitioners, merchants specializing in unique magical items, and adventurers who need versatile magical effects without formal training. The Mercantile Chord employs many Echo Binders to create valuable cross-planar goods.",
      "cultural_significance": "Viewed with mixed opinions across cultures. Some see it as a practical adaptation to the post-Shattering world, while others consider it dangerous tampering with forces that should be left alone. There's a growing black market for illegal echo harvesting, particularly from dangerous or forbidden planes.",
      "racial_affinities": {
        "Human": {
          "affinity_level": "High",
          "learning_difficulty": "Moderate",
          "natural_talent": true,
          "bonus_effects": "Can identify echo properties 25% more accurately than other races"
        },
        "Halfling": {
          "affinity_level": "High",
          "learning_difficulty": "Moderate",
          "natural_talent": true,
          "bonus_effects": "Echo bindings last 15% longer when created by Halflings"
        },
        "Maelstri": {
          "affinity_level": "Very High",
          "learning_difficulty": "Easy",
          "natural_talent": true,
          "bonus_effects": "Can naturally sense echoes within 30m radius"
        },
        "Elf": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Prismal": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Dwarf": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Mycora": {
          "affinity_level": "Low",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Orc": {
          "affinity_level": "Low",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Cinderspawn": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        }
      },
      "class_affinities": {
        "Rogue": {
          "affinity_level": "Very High",
          "learning_difficulty": "Easy",
          "required_stats": {
            "DEX": 12,
            "INT": 10
          }
        },
        "Mage": {
          "affinity_level": "High",
          "learning_difficulty": "Moderate",
          "required_stats": {
            "INT": 12,
            "DEX": 10
          }
        },
        "Wanderer": {
          "affinity_level": "High",
          "learning_difficulty": "Moderate",
          "required_stats": {
            "DEX": 12,
            "INT": 10
          }
        },
        "Ranger": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "required_stats": {
            "DEX": 12,
            "WIS": 12
          }
        },
        "Cleric": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "WIS": 14,
            "INT": 12
          }
        },
        "Warrior": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "STR": 14,
            "DEX": 12
          }
        }
      },
      "spells": {
        "echo_capture": {
          "id": "echo_capture",
          "name": "Echo Capture",
          "description": "Captures a lingering planar echo and stores it temporarily for later use.",
          "mana_cost": 15,
          "casting_time": "30 seconds",
          "range": "5m",
          "target": "area",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Echo Contained",
              "duration": 60,
              "dice_notation": "",
              "description": "Captures a planar echo for later binding"
            }
          ],
          "level": 1,
          "components": [
            "gesture",
            "echo vessel",
            "focusing crystal"
          ],
          "tags": [
            "utility",
            "planar",
            "gathering"
          ]
        },
        "bind_echo": {
          "id": "bind_echo",
          "name": "Bind Echo",
          "description": "Binds a captured echo to an object or person, transferring its planar properties.",
          "mana_cost": 20,
          "casting_time": "1 minute",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 10.0,
              "stat_affected": "Planar Essence",
              "status_effect": "",
              "duration": 120,
              "dice_notation": "",
              "description": "Transfers captured echo properties to the target"
            }
          ],
          "level": 2,
          "components": [
            "gesture",
            "captured echo",
            "binding agent"
          ],
          "tags": [
            "enchantment",
            "planar",
            "binding"
          ]
        },
        "echo_sight": {
          "id": "echo_sight",
          "name": "Echo Sight",
          "description": "Grants the ability to see lingering echoes and assess their properties and potential uses.",
          "mana_cost": 10,
          "casting_time": "1 action",
          "range": "self",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 15.0,
              "stat_affected": "Echo Perception",
              "status_effect": "",
              "duration": 30,
              "dice_notation": "",
              "description": "Allows visibility of planar echoes and understanding of their properties"
            }
          ],
          "level": 1,
          "components": [
            "gesture",
            "residue sample"
          ],
          "tags": [
            "divination",
            "planar",
            "perception"
          ]
        },
        "weapon_echo": {
          "id": "weapon_echo",
          "name": "Weapon Echo",
          "description": "Binds a combat-oriented echo to a weapon, granting it planar offensive properties.",
          "mana_cost": 25,
          "casting_time": "1 minute",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 6.0,
              "stat_affected": "Damage",
              "status_effect": "",
              "duration": 30,
              "dice_notation": "",
              "description": "Adds planar damage to weapon attacks"
            },
            {
              "target_type": "target",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Planar Disruption",
              "duration": 3,
              "dice_notation": "",
              "description": "Weapon attacks can disrupt planar abilities of targets"
            }
          ],
          "level": 3,
          "components": [
            "gesture",
            "combat echo",
            "binding agent",
            "weapon"
          ],
          "tags": [
            "combat",
            "enhancement",
            "planar"
          ]
        },
        "echo_ward": {
          "id": "echo_ward",
          "name": "Echo Ward",
          "description": "Creates a protective barrier using protective echoes, shielding against both physical and planar threats.",
          "mana_cost": 30,
          "casting_time": "1 minute",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 7.0,
              "stat_affected": "Defense",
              "status_effect": "",
              "duration": 60,
              "dice_notation": "",
              "description": "Protects against physical attacks"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 12.0,
              "stat_affected": "Planar Resistance",
              "status_effect": "",
              "duration": 60,
              "dice_notation": "",
              "description": "Protects against planar effects and energies"
            }
          ],
          "level": 3,
          "components": [
            "gesture",
            "protective echo",
            "binding circle"
          ],
          "tags": [
            "protection",
            "defensive",
            "planar"
          ]
        },
        "echo_mimicry": {
          "id": "echo_mimicry",
          "name": "Echo Mimicry",
          "description": "Binds an entity echo to the caster, temporarily granting traits, abilities, or appearance of creatures from other planes.",
          "mana_cost": 40,
          "casting_time": "2 minutes",
          "range": "self",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 8.0,
              "stat_affected": "Varied",
              "status_effect": "",
              "duration": 30,
              "dice_notation": "",
              "description": "Grants traits and abilities based on the specific echo bound"
            },
            {
              "target_type": "caster",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Echo Transformation",
              "duration": 30,
              "dice_notation": "",
              "description": "Physically transforms aspects of the caster to match the echo source"
            }
          ],
          "level": 4,
          "components": [
            "gesture",
            "entity echo",
            "binding agent",
            "personal focus"
          ],
          "tags": [
            "transformation",
            "planar",
            "mimicry"
          ]
        }
      }
    },
    "facet_magic": {
      "id": "facet_magic",
      "name": "Facet Magic",
      "description": "A precise form of magic developed by the Crystalline Consortium that uses geometric crystals to channel and focus magical energies with mathematical precision.",
      "origin": "Facet Magic was developed in the Crystalline plane after The Shattering. The Prismals, with their natural crystalline bodies, discovered they could channel magical energies through precisely cut geometric forms, leading to a highly structured and mathematical approach to spellcasting.",
      "limitations": "Requires precisely cut crystals as foci, with different shapes producing different effects. Demands mathematical precision and calculation. Less effective in chaotic environments or when crystals are damaged. Requires significant preparation and is difficult to use spontaneously.",
      "practitioners": "Primarily used by members of the Crystalline Consortium, especially Prismals and mathematically-inclined humans and dwarves. Requires formal education in crystalline geometry and facet theory, making it inaccessible to those without proper training.",
      "cultural_significance": "Facet Magic is seen as the most 'civilized' and scholarly form of magic within the Crystalline Consortium. Practitioners are viewed as elite intellectuals, and the precision of one's faceted crystals is a status symbol. Those who master this art often receive the honorific 'Facet' before their name.",
      "racial_affinities": {
        "Prismal": {
          "affinity_level": "Very High",
          "learning_difficulty": "Very Easy",
          "natural_talent": true,
          "bonus_effects": "20% reduced mana cost for all Facet Magic spells"
        },
        "Dwarf": {
          "affinity_level": "High",
          "learning_difficulty": "Moderate",
          "natural_talent": true,
          "bonus_effects": "Facet crystals crafted by Dwarves last 30% longer before needing recalibration"
        },
        "Human": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Elf": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Halfling": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Mycora": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Orc": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Maelstri": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Cinderspawn": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "natural_talent": false,
          "bonus_effects": null
        }
      },
      "class_affinities": {
        "Mage": {
          "affinity_level": "Very High",
          "learning_difficulty": "Moderate",
          "required_stats": {
            "INT": 14
          }
        },
        "Cleric": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "required_stats": {
            "INT": 12,
            "WIS": 12
          }
        },
        "Rogue": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "required_stats": {
            "INT": 12,
            "DEX": 12
          }
        },
        "Warrior": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "INT": 14,
            "STR": 12
          }
        },
        "Ranger": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "INT": 14,
            "DEX": 12
          }
        },
        "Wanderer": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "INT": 14
          }
        }
      },
      "spells": {
        "prismatic_bolt": {
          "id": "prismatic_bolt",
          "name": "Prismatic Bolt",
          "description": "Creates a beam of concentrated light energy that strikes with geometric precision.",
          "mana_cost": 15,
          "casting_time": "1 action",
          "range": "30m",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "damage",
              "value": 25.0,
              "stat_affected": "",
              "status_effect": "",
              "duration": 0,
              "dice_notation": "3d8+4",
              "description": "Pure light energy strikes the target with unerring accuracy"
            }
          ],
          "level": 2,
          "components": [
            "octahedral crystal",
            "gesture",
            "calculation"
          ],
          "tags": [
            "attack",
            "precision",
            "light"
          ]
        },
        "crystalline_shield": {
          "id": "crystalline_shield",
          "name": "Crystalline Shield",
          "description": "Forms a perfect geometric barrier of faceted energy that absorbs damage.",
          "mana_cost": 20,
          "casting_time": "1 action",
          "range": "self",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 8.0,
              "stat_affected": "Defense",
              "status_effect": "",
              "duration": 10,
              "dice_notation": "",
              "description": "Creates a perfectly calculated defensive barrier"
            }
          ],
          "level": 2,
          "components": [
            "cubic crystal",
            "gesture"
          ],
          "tags": [
            "protection",
            "defensive",
            "barrier"
          ]
        },
        "computational_enhancement": {
          "id": "computational_enhancement",
          "name": "Computational Enhancement",
          "description": "Enhances mental faculties through crystalline resonance with the brain's natural patterns.",
          "mana_cost": 25,
          "casting_time": "1 minute",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 4.0,
              "stat_affected": "INT",
              "status_effect": "",
              "duration": 30,
              "dice_notation": "",
              "description": "Temporarily boosts intellectual capacity and computational ability"
            }
          ],
          "level": 3,
          "components": [
            "dodecahedral crystal",
            "mental calculation",
            "touch"
          ],
          "tags": [
            "enhancement",
            "mental",
            "intellect"
          ]
        },
        "perfect_analysis": {
          "id": "perfect_analysis",
          "name": "Perfect Analysis",
          "description": "Uses crystalline resonance to perfectly analyze an object, creature, or phenomenon.",
          "mana_cost": 15,
          "casting_time": "1 minute",
          "range": "5m",
          "target": "single",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 20.0,
              "stat_affected": "Knowledge",
              "status_effect": "",
              "duration": 5,
              "dice_notation": "",
              "description": "Grants precise information about the target's composition, properties, and nature"
            }
          ],
          "level": 2,
          "components": [
            "tetrahedral crystal",
            "concentration",
            "calculation"
          ],
          "tags": [
            "divination",
            "knowledge",
            "analysis"
          ]
        },
        "geometric_restructuring": {
          "id": "geometric_restructuring",
          "name": "Geometric Restructuring",
          "description": "Manipulates the physical structure of non-living matter by precisely realigning its internal geometry.",
          "mana_cost": 30,
          "casting_time": "5 minutes",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "healing",
              "value": 40.0,
              "stat_affected": "",
              "status_effect": "",
              "duration": 0,
              "dice_notation": "",
              "description": "Repairs and restructures non-living matter according to precise calculations"
            }
          ],
          "level": 3,
          "components": [
            "icosahedral crystal",
            "geometric diagram",
            "touch",
            "calculation"
          ],
          "tags": [
            "transmutation",
            "repair",
            "crafting"
          ]
        },
        "crystal_prison": {
          "id": "crystal_prison",
          "name": "Crystal Prison",
          "description": "Encases the target in a perfect crystalline structure that restricts movement.",
          "mana_cost": 35,
          "casting_time": "1 action",
          "range": "15m",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Restrained",
              "duration": 5,
              "dice_notation": "",
              "description": "Target is encased in a precisely calculated crystalline structure"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": -5.0,
              "stat_affected": "DEX",
              "status_effect": "",
              "duration": 5,
              "dice_notation": "",
              "description": "Crystal severely restricts movement"
            }
          ],
          "level": 4,
          "components": [
            "cubic crystal",
            "gesture",
            "calculation"
          ],
          "tags": [
            "control",
            "restraint",
            "crystal"
          ]
        }
      }
    },
    "ash_walking": {
      "id": "ash_walking",
      "name": "Ash Walking",
      "description": "A unique form of magic from the Ashen plane that allows practitioners to temporarily transfer their consciousness into the Ashen plane for communication, espionage, and retrieving lost knowledge.",
      "origin": "Ash Walking developed among the nomadic societies of the Ashen plane as a means of maintaining communication across vast distances. After The Shattering, the Cinderspawn refined these techniques into a formal magical practice that allows consciousness to slip between the boundaries of physical existence.",
      "limitations": "Extended use causes physical body to gradually turn to ash. Risk of becoming lost in the Ashen plane increases with duration. Requires absolute concentration, making it vulnerable to interruption. Cannot interact physically with the material world while consciousness is transferred.",
      "practitioners": "Primarily practiced by members of the Ashen Covenant, especially Cinderspawn who have a natural affinity for the practice. Some secretive groups like assassins guilds have adopted modified versions for espionage purposes.",
      "cultural_significance": "Among the Ashen Covenant, Ash Walking is considered sacred, used in important ceremonies to commune with ancestors. Outside these communities, it is often viewed with suspicion or fear, associated with death magic and necromancy, though this is a misunderstanding of its true nature.",
      "racial_affinities": {
        "Cinderspawn": {
          "affinity_level": "Very High",
          "learning_difficulty": "Very Easy",
          "natural_talent": true,
          "bonus_effects": "Can maintain Ash Walking 50% longer without physical degradation"
        },
        "Orc": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "natural_talent": true,
          "bonus_effects": "15% increased perception while Ash Walking"
        },
        "Human": {
          "affinity_level": "Medium",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Elf": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Dwarf": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Halfling": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Mycora": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Prismal": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Maelstri": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "natural_talent": false,
          "bonus_effects": null
        }
      },
      "class_affinities": {
        "Rogue": {
          "affinity_level": "Very High",
          "learning_difficulty": "Moderate",
          "required_stats": {
            "DEX": 12,
            "WIS": 12
          }
        },
        "Mage": {
          "affinity_level": "High",
          "learning_difficulty": "Hard",
          "required_stats": {
            "INT": 14,
            "WIS": 12
          }
        },
        "Wanderer": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "required_stats": {
            "WIS": 14
          }
        },
        "Cleric": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "required_stats": {
            "WIS": 14,
            "CON": 12
          }
        },
        "Ranger": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "WIS": 14,
            "DEX": 12
          }
        },
        "Warrior": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "required_stats": {
            "WIS": 14,
            "CON": 14
          }
        }
      },
      "spells": {
        "minor_projection": {
          "id": "minor_projection",
          "name": "Minor Projection",
          "description": "Temporarily transfers a small portion of consciousness into the Ashen plane, allowing limited perception beyond physical barriers.",
          "mana_cost": 10,
          "casting_time": "30 seconds",
          "range": "50m",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Ash Perception",
              "duration": 5,
              "dice_notation": "",
              "description": "Allows perception through solid objects within range"
            }
          ],
          "level": 1,
          "components": [
            "pinch of ash",
            "concentration"
          ],
          "tags": [
            "perception",
            "divination",
            "espionage"
          ]
        },
        "ashen_transit": {
          "id": "ashen_transit",
          "name": "Ashen Transit",
          "description": "Fully transfers consciousness into the Ashen plane, leaving the physical body in a trance-like state.",
          "mana_cost": 25,
          "casting_time": "1 minute",
          "range": "self",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Ash Walking",
              "duration": 15,
              "dice_notation": "",
              "description": "Consciousness fully transfers to the Ashen plane"
            },
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": -10.0,
              "stat_affected": "Physical Defense",
              "status_effect": "",
              "duration": 15,
              "dice_notation": "",
              "description": "Physical body is vulnerable while consciousness is elsewhere"
            }
          ],
          "level": 3,
          "components": [
            "handful of ashes",
            "ritual circle",
            "concentration"
          ],
          "tags": [
            "transportation",
            "planar",
            "espionage"
          ]
        },
        "whispers_of_ash": {
          "id": "whispers_of_ash",
          "name": "Whispers of Ash",
          "description": "Allows communication through the Ashen plane to another individual, regardless of distance, so long as both parties have access to ash from the same source.",
          "mana_cost": 15,
          "casting_time": "1 minute",
          "range": "unlimited",
          "target": "single",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Ash Communication",
              "duration": 10,
              "dice_notation": "",
              "description": "Establishes a mental link through the Ashen plane"
            }
          ],
          "level": 2,
          "components": [
            "shared ash source",
            "concentration"
          ],
          "tags": [
            "communication",
            "utility",
            "social"
          ]
        },
        "ashen_knowledge": {
          "id": "ashen_knowledge",
          "name": "Ashen Knowledge",
          "description": "Accesses the collective memory of the Ashen plane to retrieve lost or forgotten knowledge about a specific subject or location.",
          "mana_cost": 30,
          "casting_time": "10 minutes",
          "range": "self",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 15.0,
              "stat_affected": "Knowledge",
              "status_effect": "",
              "duration": 1,
              "dice_notation": "",
              "description": "Grants specific knowledge about a subject from the collective memory of the Ashen plane"
            }
          ],
          "level": 4,
          "components": [
            "ash from location or subject",
            "ritual circle",
            "concentration",
            "meditation"
          ],
          "tags": [
            "knowledge",
            "divination",
            "history"
          ]
        },
        "ash_veil": {
          "id": "ash_veil",
          "name": "Ash Veil",
          "description": "Creates a cloud of animate ash that obscures vision and can be mentally controlled by the caster.",
          "mana_cost": 20,
          "casting_time": "1 action",
          "range": "15m radius",
          "target": "area",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": -10.0,
              "stat_affected": "Perception",
              "status_effect": "",
              "duration": 5,
              "dice_notation": "",
              "description": "Reduces visibility and sensory perception in the affected area"
            }
          ],
          "level": 2,
          "components": [
            "handful of ashes",
            "gesture"
          ],
          "tags": [
            "concealment",
            "control",
            "defense"
          ]
        },
        "ashen_body": {
          "id": "ashen_body",
          "name": "Ashen Body",
          "description": "Temporarily transforms the caster's physical form into ash, allowing them to flow through small openings and resist physical damage.",
          "mana_cost": 35,
          "casting_time": "1 action",
          "range": "self",
          "target": "self",
          "effects": [
            {
              "target_type": "caster",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Ashen Form",
              "duration": 5,
              "dice_notation": "",
              "description": "Physical body becomes partially incorporeal ash"
            },
            {
              "target_type": "caster",
              "effect_type": "stat_modification",
              "value": 10.0,
              "stat_affected": "Physical Resistance",
              "status_effect": "",
              "duration": 5,
              "dice_notation": "",
              "description": "Significantly reduces damage from physical attacks"
            }
          ],
          "level": 4,
          "components": [
            "ritual ashes",
            "gesture",
            "concentration"
          ],
          "tags": [
            "transformation",
            "defense",
            "movement"
          ]
        }
      }
    },
    "divine_healing": {
      "id": "divine_healing",
      "name": "Divine Healing",
      "description": "A sacred form of magic that channels divine energy to heal wounds, cure ailments, and restore life force. While healing effects can be achieved through other magical systems, Divine Healing is specifically focused on restoration and protection through spiritual connection.",
      "origin": "Divine Healing predates The Shattering, stemming from the earliest spiritual practices across all planes. After the cosmic trauma of The Shattering, these healing traditions became even more vital, with practitioners developing formalized methods to channel divine energies from fragmented Luminaries.",
      "limitations": "Requires genuine spiritual conviction or connection. Effectiveness is reduced when used for selfish purposes. Cannot typically restore life to the truly dead. More severe injuries require greater spiritual energy and preparation. Some ailments require specific divine connections or rituals.",
      "practitioners": "Most commonly practiced by clerics and spiritual leaders, though anyone with sufficient faith and training can learn its basics. The most powerful practitioners are those who maintain a deep connection with the fragmented Luminaries or other divine entities.",
      "cultural_significance": "Healing practitioners are highly respected in all societies, often serving both spiritual and medical roles in their communities. In many cultures, significant healing rituals mark important life transitions and community events. The ability to heal is seen as one of the most noble uses of magic.",
      "racial_affinities": {
        "Mycora": {
          "affinity_level": "Very High",
          "learning_difficulty": "Easy",
          "natural_talent": true,
          "bonus_effects": "Healing spells are 25% more effective when cast by Mycora"
        },
        "Human": {
          "affinity_level": "High",
          "learning_difficulty": "Moderate",
          "natural_talent": true,
          "bonus_effects": "Can sense injuries and ailments within 10m radius"
        },
        "Elf": {
          "affinity_level": "High",
          "learning_difficulty": "Moderate",
          "natural_talent": true,
          "bonus_effects": "Can maintain healing effects 20% longer than other races"
        },
        "Dwarf": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Halfling": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Orc": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Prismal": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Cinderspawn": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        },
        "Maelstri": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "natural_talent": false,
          "bonus_effects": null
        }
      },
      "class_affinities": {
        "Cleric": {
          "affinity_level": "Very High",
          "learning_difficulty": "Very Easy",
          "required_stats": {
            "WIS": 10
          }
        },
        "Wanderer": {
          "affinity_level": "Medium",
          "learning_difficulty": "Moderate",
          "required_stats": {
            "WIS": 12,
            "CHA": 10
          }
        },
        "Ranger": {
          "affinity_level": "Medium",
          "learning_difficulty": "Hard",
          "required_stats": {
            "WIS": 12
          }
        },
        "Mage": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "WIS": 14,
            "INT": 12
          }
        },
        "Warrior": {
          "affinity_level": "Low",
          "learning_difficulty": "Very Hard",
          "required_stats": {
            "WIS": 14,
            "CHA": 12
          }
        },
        "Rogue": {
          "affinity_level": "Very Low",
          "learning_difficulty": "Extremely Hard",
          "required_stats": {
            "WIS": 14,
            "CHA": 12
          }
        }
      },
      "spells": {
        "healing_touch": {
          "id": "healing_touch",
          "name": "Healing Touch",
          "description": "Channels divine energy through the caster's hands to heal wounds and injuries.",
          "mana_cost": 15,
          "casting_time": "1 action",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "healing",
              "value": 25.0,
              "stat_affected": "",
              "status_effect": "",
              "duration": 0,
              "dice_notation": "2d8+10",
              "description": "Immediate healing of physical wounds and injuries"
            }
          ],
          "level": 2,
          "components": [
            "touch",
            "prayer",
            "focus"
          ],
          "tags": [
            "healing",
            "restoration",
            "touch"
          ]
        },
        "purify_body": {
          "id": "purify_body",
          "name": "Purify Body",
          "description": "Cleanses the body of disease, poison, and other harmful substances through divine intervention.",
          "mana_cost": 20,
          "casting_time": "1 minute",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Purified",
              "duration": 0,
              "dice_notation": "",
              "description": "Removes disease, poison, and other harmful conditions"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 2.0,
              "stat_affected": "CON",
              "status_effect": "",
              "duration": 10,
              "dice_notation": "",
              "description": "Temporarily enhances physical resilience"
            }
          ],
          "level": 3,
          "components": [
            "touch",
            "prayer",
            "holy water",
            "focus"
          ],
          "tags": [
            "purification",
            "restoration",
            "protection"
          ]
        },
        "divine_restoration": {
          "id": "divine_restoration",
          "name": "Divine Restoration",
          "description": "A powerful healing spell that mends severe injuries, regenerates damaged tissue, and restores vitality.",
          "mana_cost": 35,
          "casting_time": "5 minutes",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "healing",
              "value": 50.0,
              "stat_affected": "",
              "status_effect": "",
              "duration": 0,
              "dice_notation": "4d10+20",
              "description": "Comprehensive healing of major wounds and injuries"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 5.0,
              "stat_affected": "HP Regeneration",
              "status_effect": "",
              "duration": 10,
              "dice_notation": "",
              "description": "Enhances natural healing for a period of time"
            }
          ],
          "level": 4,
          "components": [
            "touch",
            "ritual prayer",
            "holy symbol",
            "focus",
            "sacred herbs"
          ],
          "tags": [
            "healing",
            "restoration",
            "regeneration"
          ]
        },
        "circle_of_healing": {
          "id": "circle_of_healing",
          "name": "Circle of Healing",
          "description": "Creates a sacred circle that radiates healing energy to all within its bounds.",
          "mana_cost": 30,
          "casting_time": "1 minute",
          "range": "10m radius",
          "target": "area",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "healing",
              "value": 15.0,
              "stat_affected": "",
              "status_effect": "",
              "duration": 0,
              "dice_notation": "2d6+5",
              "description": "Immediate healing to all within the circle"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 2.0,
              "stat_affected": "HP Regeneration",
              "status_effect": "",
              "duration": 5,
              "dice_notation": "",
              "description": "Enhances natural healing while within the circle"
            }
          ],
          "level": 3,
          "components": [
            "ritual circle",
            "group prayer",
            "holy symbol"
          ],
          "tags": [
            "healing",
            "area effect",
            "support"
          ]
        },
        "protective_blessing": {
          "id": "protective_blessing",
          "name": "Protective Blessing",
          "description": "Invokes divine protection to shield the target from harm and enhance their resilience.",
          "mana_cost": 25,
          "casting_time": "1 action",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 5.0,
              "stat_affected": "Defense",
              "status_effect": "",
              "duration": 15,
              "dice_notation": "",
              "description": "Divine energy creates a protective barrier against harm"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 5.0,
              "stat_affected": "Magic Resistance",
              "status_effect": "",
              "duration": 15,
              "dice_notation": "",
              "description": "Enhances resistance to harmful magical effects"
            }
          ],
          "level": 3,
          "components": [
            "touch",
            "prayer",
            "holy symbol"
          ],
          "tags": [
            "protection",
            "defensive",
            "blessing"
          ]
        },
        "revitalize": {
          "id": "revitalize",
          "name": "Revitalize",
          "description": "Restores energy and vitality to the exhausted, removing fatigue and granting renewed strength.",
          "mana_cost": 20,
          "casting_time": "1 minute",
          "range": "touch",
          "target": "single",
          "effects": [
            {
              "target_type": "target",
              "effect_type": "status_effect",
              "value": 0.0,
              "stat_affected": "",
              "status_effect": "Revitalized",
              "duration": 60,
              "dice_notation": "",
              "description": "Removes exhaustion and fatigue"
            },
            {
              "target_type": "target",
              "effect_type": "stat_modification",
              "value": 10.0,
              "stat_affected": "Stamina",
              "status_effect": "",
              "duration": 30,
              "dice_notation": "",
              "description": "Enhances physical endurance and energy"
            }
          ],
          "level": 2,
          "components": [
            "touch",
            "prayer",
            "holy water"
          ],
          "tags": [
            "restoration",
            "enhancement",
            "recovery"
          ]
        }
      }
    }
  },
  "metadata": {
    "version": "1.0.0",
    "description": "Magic system definitions for the RPG game world"
  }
}
```

### File: config\world\base\world_history.json

```json
{
  "name": "Aetheris",
  "description": "A world once unified that was fractured into five overlapping planes by The Shattering, a catastrophic magical event approximately 2,500 years ago.",
  "current_year": 2500,
  "eras": [
    {
      "name": "The Age of Harmony",
      "start_year": -3000,
      "end_year": 0,
      "description": "The ancient era when Aetheris was a singular reality where all races existed in harmony under the watchful eye of the Luminaries - cosmic entities who maintained balance.",
      "events": [
        {
          "year": -3000,
          "title": "The First Settlements",
          "description": "The earliest known civilizations of Aetheris form, following the seasonal magical currents across the unified world.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": -2500,
          "title": "The Song of Creation",
          "description": "The first documented use of Song Weaving magic, which becomes the primary magical practice of the era.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": -1500,
          "title": "Formation of the Cipher Conclave",
          "description": "A collective of the most powerful mages forms to study the fundamental nature of reality and the Luminaries.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": -500,
          "title": "The Luminescent Age",
          "description": "A period of unprecedented growth and prosperity as the Luminaries actively guide civilization.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": -100,
          "title": "The Immortality Project",
          "description": "The Cipher Conclave begins experiments to achieve immortality by tapping into the essence of the Luminaries.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        }
      ]
    },
    {
      "name": "The Shattering",
      "start_year": 0,
      "end_year": 1,
      "description": "The catastrophic event that tore reality apart, splitting the world into five overlapping planes and scattering the Luminaries.",
      "events": [
        {
          "year": 0,
          "title": "The Fatal Experiment",
          "description": "The Cipher Conclave's attempt to harness immortality goes catastrophically wrong, tearing the fabric of reality.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 0,
          "title": "The Fracturing of the Planes",
          "description": "The unified world splits into five distinct planes: Verdant, Crystalline, Ashen, Tempest, and Nexus.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 0,
          "title": "The Scattering of the Luminaries",
          "description": "The cosmic entities that maintained balance are shattered, their essences fragmented across all planes.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 1,
          "title": "The First Resonance",
          "description": "The initial overlap between planes occurs, causing confusion and fear among survivors.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        }
      ]
    },
    {
      "name": "The Age of Isolation",
      "start_year": 1,
      "end_year": 1000,
      "description": "A millennium when surviving populations adapted to their new isolated realities while experiencing the first Resonance Events.",
      "events": [
        {
          "year": 50,
          "title": "The Emergence of the Five Speakers",
          "description": "Five individuals across different planes develop the ability to hear the \"voices\" of the fragmented Luminaries.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 127,
          "title": "The First Planar Adaptation",
          "description": "Isolated populations begin developing distinct traits based on their planar environment.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 345,
          "title": "The Founding of Harmonia",
          "description": "The first stable settlement is established on the Nexus plane, later becoming the capital of the Concordant Cities.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 512,
          "title": "The Resonance Calendar",
          "description": "Early attempts to predict and catalogue Resonance Events lead to the creation of a new calendar system.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 827,
          "title": "The First Planar Bleed Zone",
          "description": "An area where two planes permanently merged is discovered, leading to new theories about the nature of reality.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        }
      ]
    },
    {
      "name": "The Age of Discovery",
      "start_year": 1000,
      "end_year": 2000,
      "description": "A period when civilizations developed ways to predict and utilize Resonance Events, leading to the first intentional cross-plane settlements.",
      "events": [
        {
          "year": 1024,
          "title": "The Formation of the Harmonic Order",
          "description": "Scholars from across the Nexus plane unite to study and catalogue plane interactions.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 1156,
          "title": "The First Controlled Crossing",
          "description": "The Harmonic Order successfully predicts and utilizes a Resonance Event to deliberately travel between planes.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 1378,
          "title": "The Verdant Collective",
          "description": "The formation of the first society to deliberately incorporate elements of the Verdant plane into their culture.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 1591,
          "title": "The Crystalline Breakthrough",
          "description": "Facet Magic is developed, allowing for precise magical control through geometric crystal structures.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 1842,
          "title": "The Ghost Markets",
          "description": "The mysterious trading network that appears only during specific Resonance Events is established by entities known as \"The Between.\"",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        }
      ]
    },
    {
      "name": "The Modern Age",
      "start_year": 2000,
      "end_year": 2500,
      "description": "The current era where sophisticated societies have emerged that incorporate elements from multiple planes while facing new challenges.",
      "events": [
        {
          "year": 2025,
          "title": "The Concordant Charter",
          "description": "The seven city-states of the Nexus plane form a unified government known as the Concordant Cities.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 2142,
          "title": "The Emergence of the Dissonant Path",
          "description": "A faction forms that believes The Shattering was necessary evolution and actively opposes reunification efforts.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 2287,
          "title": "The Luminary Chess Game",
          "description": "The Five Speakers begin a complex metaphysical game that corresponds to real-world events and Resonance patterns.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 2398,
          "title": "The Resonance Crisis Begins",
          "description": "Resonance Events become more frequent and unpredictable, causing concern among scholars and leaders.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        },
        {
          "year": 2489,
          "title": "The Shifting Library",
          "description": "The discovery of a repository of knowledge that exists simultaneously in all planes, containing potential records from before The Shattering.",
          "significance": "",
          "affected_locations": [],
          "affected_cultures": []
        }
      ]
    }
  ]
}
```

### File: main.py

```python
#!/usr/bin/env python3
"""
Main entry point for the RPG game.
This script handles initialization and startup of the game in GUI mode.
"""

import sys
import argparse
import logging
from dotenv import load_dotenv # Import load_dotenv

# Import module initializer
from core.base.init_modules import init_modules
# Use centralized logging config
from core.utils.logging_config import setup_logging as core_setup_logging

# Application version
VERSION = "0.1.0"

def setup_logging():
    """Set up logging using the centralized project configuration."""
    core_setup_logging()

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="RPG Game")
    parser.add_argument("--version", action="version", version=f"RPG Game v{VERSION}")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    
    return parser.parse_args()

def main():
    """Main entry point for the game."""
    load_dotenv() # Load environment variables from .env file
    # Parse command line arguments
    args = parse_arguments()
    
    # Set up logging
    setup_logging()
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Log startup information
    logging.info(f"Starting RPG Game v{VERSION}")
    
    # Initialize all game modules
    init_modules()
    
    # GUI mode
    logging.info("Running in GUI mode")
    try:
        # Import the GUI runner
        from run_gui import run_gui
        run_gui()
    except ImportError as e:
        logging.error(f"Failed to import GUI components: {e}")
        print("Error: Could not start GUI mode. See log for details.")
        sys.exit(1)
    except Exception as e:
        logging.exception(f"Error starting GUI: {e}")
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
```

### File: world_configurator\main.py

```python
#!/usr/bin/env python
"""
World Configurator Tool for the RPG Project.

This tool allows creating and editing world configuration for the RPG game.
"""

import os
import sys
import logging

# Add the project root to the Python path so we can use absolute imports
project_root = os.path.dirname(os.path.abspath(__file__))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from PySide6.QtWidgets import QApplication

from ui.main_window import MainWindow
from utils.logging_setup import setup_logging

def main():
    """
    Main entry point for the World Configurator Tool.
    """
    # Setup logging
    setup_logging()
    logger = logging.getLogger("world_configurator")
    logger.info("Starting World Configurator Tool")
    
    # Create application
    app = QApplication(sys.argv)
    app.setApplicationName("World Configurator")
    app.setApplicationVersion("1.0.0")
    
    # Create main window
    window = MainWindow()
    window.show()
    
    # Run application
    sys.exit(app.exec())

if __name__ == "__main__":
    main()

```

### File: config\world\scenarios\origins.json

```json
{
  "origins": {
    "harmonia_initiate": {
      "id": "harmonia_initiate",
      "name": "Harmonia Initiate",
      "description": "You've recently completed your Attunement ceremony and are now officially a citizen of Harmonia. As a new initiate into adult society, you're eager to prove yourself and find your place within the Concordant Cities.",
      "starting_location_id": "harmonia",
      "starting_items": [
        "simple_clothing",
        "harmonian_tattoo_kit",
        "resonance_amulet",
        "bread",
        "water_flask"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Elf",
        "Halfling"
      ],
      "suitable_classes": [
        "Wanderer",
        "Mage",
        "Rogue",
        "Cleric"
      ],
      "introduction_text": "The vibrant city of Harmonia stretches before you, its seven concentric rings shifting subtly as distant Resonance energies flow through the metropolis. You touch the still-tender Attunement tattoos on your forearms, their ink seeming to shimmer as you pass through a pocket of concentrated planar energy. After years of preparation, you've finally been recognized as a full citizen, ready to contribute to the great Concordant society.\n\nThe Attunement Master has granted you your first day of freedom to explore opportunities throughout the city. Your future is unwritten – perhaps you'll join the Harmonic Order to study Resonance phenomena, sign up with local merchants as a guard or guide, or even apply for a coveted position with the ambassadorial corps. Whatever path you choose, one thing is certain: life in Harmonia is never predictable, especially with recent reports of increased Resonance Event frequency.\n\nYou adjust your new resonance amulet, a gift from your family to commemorate your initiation, and step forward into your new life.",
      "skill_proficiencies": [
        "Diplomacy",
        "Planar Lore (Basic)",
        "Streetwise (Harmonia)"
      ],
      "origin_traits": [
        {
          "name": "Attuned Citizen",
          "description": "Your Attunement tattoos offer minor resistance (+1 save) to psychological effects during moderate Resonance Events."
        },
        {
          "name": "Concordant Native",
          "description": "You are familiar with the basic customs and layout of Harmonia."
        }
      ],
      "starting_culture_id": "concordant"
    },
    "embassy_assignment": {
      "id": "embassy_assignment",
      "name": "The Embassy Assignment",
      "description": "You've been assigned to the Verdant Embassy as part of a cultural exchange program. Your mission is to learn about the Verdant Collective while representing your own people or interests.",
      "starting_location_id": "verdant_embassy",
      "starting_items": [
        "diplomatic_papers",
        "formal_attire",
        "journal",
        "small_pouch_of_seeds",
        "water_flask"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Elf",
        "Halfling",
        "Dwarf"
      ],
      "suitable_classes": [
        "Wanderer",
        "Cleric",
        "Ranger",
        "Mage"
      ],
      "introduction_text": "The living walls of the Verdant Embassy pulse with quiet energy around you as you settle into your new quarters. Branches intertwine above to form your ceiling, occasionally shifting to allow beams of sunlight to filter through the leafy canopy. It's been less than a day since you arrived at this outpost, a representative selected to participate in the cultural exchange program between your people and the enigmatic Verdant Collective.\n\nYour diplomatic papers were accepted readily enough by the Green Speakers stationed here, though you noticed they communicated among themselves using their mysterious plant-based language – subtle movements of leaves and the release of spores that somehow convey complex thoughts. You've been told that part of your role will be to learn their customs and potentially even the basics of their communication methods.\n\nAs you unpack your belongings, a small seedpod drops from the ceiling onto your desk, splitting open to reveal a message written on a thin leaf inside. It appears to be an invitation to meet with the Verdant Ambassador at your earliest convenience. Your time at the Embassy has officially begun.",
      "skill_proficiencies": [
        "Diplomacy",
        "Nature",
        "Insight"
      ],
      "origin_traits": [
        {
          "name": "Cultural Envoy",
          "description": "You have official standing within the Verdant Embassy, granting easier access to certain areas and individuals."
        },
        {
          "name": "Observant Outsider",
          "description": "Your unfamiliarity allows you to notice details Verdant natives might overlook."
        }
      ],
      "starting_culture_id": "verdant"
    },
    "crystal_study_apprentice": {
      "id": "crystal_study_apprentice",
      "name": "Crystal Study Apprentice",
      "description": "You've been accepted as an apprentice in the Crystalline Enclave, a prestigious position. You'll study the mathematical principles of Facet Magic under the tutelage of Consortium representatives.",
      "starting_location_id": "crystalline_enclave",
      "starting_items": [
        "apprentice_robes",
        "calculation_crystals",
        "precision_tools",
        "faceted_focusing_lens",
        "notebook"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Elf",
        "Prismal",
        "Dwarf"
      ],
      "suitable_classes": [
        "Mage",
        "Cleric",
        "Wanderer"
      ],
      "introduction_text": "The precise angles of the Crystalline Enclave's architecture catch the morning light, sending mathematically perfect rainbows across the polished surfaces of the Calculation Chamber. It's your first day as an official apprentice to the Crystalline Consortium, a position few outsiders ever achieve. Your acceptance came after months of rigorous testing of your logical reasoning and mathematical aptitude.\n\nYour new quarters are spartan but functional – every surface and object positioned according to precise geometric principles that the Consortium claims enhance cognitive function. On your desk sits a set of calculation crystals and precision tools, along with a faceted focusing lens that you're expected to learn to attune to your specific thought patterns.\n\nThe schedule delivered to you this morning is exacting: your first lesson in the fundamental principles of Facet Magic begins in exactly forty-three minutes, followed by two hours of observational study in the Precision Market, then meditation on crystalline harmonic progressions. There will be little room for error or inefficiency – exactly as your Consortium mentors prefer it.",
      "skill_proficiencies": [
        "Arcana",
        "Investigation",
        "Mathematics (Basic)"
      ],
      "origin_traits": [
        {
          "name": "Consortium Apprentice",
          "description": "You have access to basic Crystalline Consortium facilities and learning resources."
        },
        {
          "name": "Logical Mind",
          "description": "You gain a minor bonus (+1 save) against effects that cause confusion or illogical thinking."
        }
      ],
      "starting_culture_id": "crystalline"
    },
    "echo_woods_explorer": {
      "id": "echo_woods_explorer",
      "name": "Echo Woods Explorer",
      "description": "You've been drawn to the mysterious Echo Woods, either to study its planar phenomena, collect valuable resources, or perhaps because you're following the whispers of a specific echo that holds personal significance.",
      "starting_location_id": "echo_woods",
      "starting_items": [
        "explorer_clothing",
        "survival_kit",
        "small_tent",
        "recording_crystal",
        "hunting_knife"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Elf",
        "Halfling",
        "Mycora"
      ],
      "suitable_classes": [
        "Ranger",
        "Wanderer",
        "Rogue",
        "Mage"
      ],
      "introduction_text": "Mist curls between the ancient trees of the Echo Woods as you make your way deeper into this strange forest. The boundary between the Nexus and Verdant planes feels particularly thin here – occasionally you glimpse plants that couldn't possibly exist in either realm alone, hybrid creations thriving in the planar overlap. More unsettling are the whispers that seem to follow you: fragments of conversations held long ago, preserved somehow in the very fabric of this place.\n\nYou've come prepared for an extended stay, carrying essential survival gear and a recording crystal to document your findings. Whether you're here as a researcher, a resource gatherer, or because you're following a particular echo that caught your attention during a previous visit, the woods offer endless mysteries to unravel.\n\nAs you set up your small camp near what appears to be a suitable clearing, you notice that the whispers have grown more distinct. Some seem to be repeating your own movements, describing the very actions you're taking as you secure your tent. Others speak of events from centuries past – or perhaps yet to come. The Echo Woods reveal their secrets only to the patient and observant, and you intend to be both.",
      "skill_proficiencies": [
        "Survival",
        "Nature",
        "Perception"
      ],
      "origin_traits": [
        {
          "name": "Echo Sensitive",
          "description": "You are more susceptible to hearing the whispers of the Echo Woods, potentially gaining insights or facing distractions."
        },
        {
          "name": "Wilderness Acclimated",
          "description": "You have advantage on saving throws against natural environmental hazards within forests."
        }
      ]
    },
    "ashen_covenant_recruit": {
      "id": "ashen_covenant_recruit",
      "name": "Ashen Covenant Recruit",
      "description": "You've recently joined the nomadic Ashen Covenant, embracing their philosophy of impermanence. You seek to learn their unique spiritual practices, including the mysterious art of Ash Walking.",
      "starting_location_id": "ashen_camp",
      "starting_items": [
        "ash-treated_clothing",
        "covenant_pendant",
        "fire_striker",
        "ritual_dagger",
        "small_pouch_of_ancestral_ash",
        "test_apple"
      ],
      "initial_quests": [
        "551cdb35-a4bb-4b23-b6c1-4d2772947efb",
        "TEST_Q01",
        "TEST_Q02",
        "TEST_Q03",
        "TEST_Q04",
        "TEST_Q05",
        "TEST_Q06",
        "TEST_Q07",
        "TEST_Q08",
        "TEST_Q09",
        "TEST_Q10",
        "TEST_Q11",
        "TEST_Q12",
        "TEST_Q13",
        "TEST_Q14",
        "TEST_Q15",
        "TEST_Q16",
        "TEST_Q17",
        "TEST_Q18",
        "TEST_Q19",
        "TEST_Q20",
        "TEST_Q21",
        "TEST_Q22",
        "TEST_Q23",
        "TEST_Q24",
        "TEST_Q25"
      ],
      "suitable_races": [
        "Cinderspawn",
        "Human",
        "Orc"
      ],
      "suitable_classes": [
        "Cleric",
        "Mage",
        "Wanderer",
        "Warrior"
      ],
      "introduction_text": "The Eternal Flame at the center of the Ashen Camp dances hypnotically, casting long shadows from the temporary structures that surround it. You've arrived just days ago, but already the Covenant has accepted you as one of their own – an unusually quick integration into their normally closed society. Perhaps they saw something in you that suggested an affinity for their ways, or perhaps the ancestors spoke your name during a ritual.\n\nYour tent, like all others in the camp, is designed for quick assembly and disassembly. The nomadic Ashen Covenant never stays in one place long, following ancient migration patterns known only to their elders. All possessions are considered temporary – including the ritual dagger you were gifted this morning, which you're expected to surrender during the next Possession Exchange ceremony.\n\nAn elder approaches you now, their skin bearing the distinctive gray markings that indicate frequent Ash Walking – the mysterious practice of projecting consciousness through the ashes of the dead to commune with ancestors or travel spiritually to the Ashen plane. They've promised to begin your initial training today, starting with the fundamental philosophy that nothing – not possessions, not places, not even lives – is permanent. All returns to ash eventually, and in understanding this, the Covenant finds freedom.",
      "skill_proficiencies": [
        "History (Oral)",
        "Religion",
        "Survival"
      ],
      "origin_traits": [
        {
          "name": "Covenant Initiate",
          "description": "You are recognized by the Ashen Covenant and can participate in basic community rituals like the Possession Exchange."
        },
        {
          "name": "Embracing Impermanence",
          "description": "You have a minor bonus (+1 save) against effects causing fear of loss or attachment."
        }
      ],
      "starting_culture_id": "ashen"
    },
    "tempest_harbor_arrival": {
      "id": "tempest_harbor_arrival",
      "name": "Tempest Harbor Arrival",
      "description": "You've arrived at Tempest Harbor during a rare celestial alignment, either as a trader, an adventurer seeking opportunity, or perhaps as someone who has unfinished business with the enigmatic Tempest Flotilla.",
      "starting_location_id": "tempest_harbor",
      "starting_items": [
        "weather-resistant_clothing",
        "small_trading_goods",
        "probability_dice",
        "storm_compass",
        "sealed_message"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Halfling",
        "Maelstri",
        "Elf",
        "Dwarf"
      ],
      "suitable_classes": [
        "Rogue",
        "Wanderer",
        "Mage",
        "Warrior"
      ],
      "introduction_text": "The chaotic energy of Tempest Harbor surrounds you as you make your way along the swaying walkways. The entire harbor appeared less than two days ago when the celestial alignment permitted the Tempest Flotilla to dock at the Nexus plane, and it will vanish just as quickly once the alignment ends. All around you, traders from across the planes haggle furiously, well aware that time is limited.\n\nThe air crackles with small surges of storm energy, captured and contained by the Flotilla's distinctive vessels. Probability merchants call out their wares – dice that may influence chance itself, pendants that predict local weather patterns, contracts with favorable statistical outcomes. The Flux Market ahead changes leadership hourly, causing prices and available goods to fluctuate in patterns only the most seasoned traders can predict.\n\nYou clutch the storm compass in your pocket – a gift, or perhaps a burden, that led you here at this precise moment. The sealed message you carry remains unopened, its recipient somewhere among the hundreds of temporary visitors and Flotilla members. Whether you've come to trade, to find someone, or to start anew where your past cannot follow, the Tempest Harbor offers possibilities as changeable as the storms the Flotilla navigates.",
      "skill_proficiencies": [
        "Acrobatics",
        "Deception",
        "Insight (Risk Assessment)"
      ],
      "origin_traits": [
        {
          "name": "Harbor Savvy",
          "description": "You understand the basic flow and dangers of the temporary Tempest Harbor."
        },
        {
          "name": "Embracer of Chaos",
          "description": "You react slightly faster (+1 Initiative) in unpredictable or rapidly changing situations."
        }
      ],
      "starting_culture_id": "tempest"
    },
    "library_assistant": {
      "id": "library_assistant",
      "name": "The Library's New Assistant",
      "description": "You've been granted the rare privilege of assisting at the Shifting Library. Knowledge from across all planes is collected and preserved by the enigmatic Lexicants.",
      "starting_location_id": "shifting_library",
      "starting_items": [
        "assistant_robes",
        "library_authorization",
        "cataloging_tools",
        "enchanted_quill",
        "blank_journal"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Elf",
        "Prismal",
        "Dwarf"
      ],
      "suitable_classes": [
        "Mage",
        "Cleric",
        "Wanderer"
      ],
      "introduction_text": "The impossible architecture of the Shifting Library stretches around you, corridors extending far beyond what the exterior of the building should allow. You've been here for just under a week, still adjusting to the disorienting sensation of walking through sections of the library that exist simultaneously in different planes. The modest stone exterior belies the near-infinite collection contained within.\n\nYour quarters are small but comfortable, positioned near the Reading Nexus where researchers from across the planes come to study rare texts. Your position as an assistant came unexpectedly – some say the Library itself chooses its caretakers, somehow recognizing those with the necessary qualities long before they themselves are aware of their destiny.\n\nThe Head Lexicant assigned you simple cataloging duties to start, but hinted that you would soon begin training to access the deeper archives, where knowledge from before The Shattering is preserved in fragmentary form. Your enchanted quill allows you to take notes that will remain readable regardless of which plane currently dominates the section you're working in – a necessary tool for any Library employee.\n\nAs you prepare for your morning duties, you notice your blank journal glowing faintly. Opening it reveals a message in flowing script: 'Report to the Lexicant Hall. Your real work begins today.'",
      "skill_proficiencies": [
        "Investigation",
        "History",
        "Arcana (Basic)"
      ],
      "origin_traits": [
        {
          "name": "Library Access",
          "description": "You possess basic authorization to navigate the common areas of the Shifting Library."
        },
        {
          "name": "Planar Acclimation (Minor)",
          "description": "You have minor resistance (+1 save) against disorientation caused by shifting planar environments within the Library."
        }
      ]
    },
    "planar_researcher": {
      "id": "planar_researcher",
      "name": "Planar Bleed Researcher",
      "description": "You've volunteered for a research expedition to The Convergence, a dangerous Planar Bleed Zone. Multiple planes have permanently merged, creating unique phenomena worth studying despite the risks.",
      "starting_location_id": "planar_bleed_zone",
      "starting_items": [
        "researcher_equipment",
        "planar_protection_suit",
        "specimen_containers",
        "reality_anchor",
        "emergency_beacon"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Prismal",
        "Elf",
        "Mycora"
      ],
      "suitable_classes": [
        "Mage",
        "Cleric",
        "Wanderer",
        "Ranger"
      ],
      "introduction_text": "The laws of reality bend and fracture around you as you record observations at your designated research post in The Convergence. Here, at least three planes have merged permanently, creating impossible landscapes where forests of crystalline trees grow alongside pools of ash that somehow support aquatic life. The hybrid flora and fauna that have evolved in this zone exist nowhere else in any plane – making them invaluable subjects for study despite the considerable dangers.\n\nYour planar protection suit hums softly as it generates a field of stable reality around you, preventing the worst effects of planar exposure. Without it, prolonged presence here would lead to physical and mental alterations – some fascinating, most deadly. Even with protection, you must regularly calibrate your reality anchor to prevent being drawn into pocket dimensions that spontaneously form and collapse.\n\nYou volunteered for this three-month research rotation knowing the risks, driven by scientific curiosity or perhaps by the substantial hazard pay offered by the Harmonic Order. Your small team occupies the fortified Harvester Camp nearby, venturing out daily to collect data and specimens before retreating to relative safety each night.\n\nAs you finish documenting a particularly interesting reality fault, your instruments begin detecting unusual energy patterns. Something is happening in the Bleed Zone – something not recorded in any of your briefing materials.",
      "skill_proficiencies": [
        "Investigation",
        "Survival",
        "Planar Lore"
      ],
      "origin_traits": [
        {
          "name": "Field Researcher",
          "description": "You are trained in basic planar sample collection and data recording techniques."
        },
        {
          "name": "Reality Anchor Familiarity",
          "description": "You know how to operate and perform basic maintenance on personal reality anchors."
        }
      ]
    },
    "ghost_market_escapee": {
      "id": "ghost_market_escapee",
      "name": "Ghost Market Escapee",
      "description": "You recently found yourself trapped in the mysterious Ghost Market during a Resonance Event. After making a questionable deal with one of The Between to secure your freedom, you now navigate the consequences of that bargain.",
      "starting_location_id": "harmonia",
      "starting_items": [
        "strange_contract",
        "between_token",
        "partially_empty_memory_vial",
        "planar_map",
        "market_trinket"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Halfling",
        "Elf",
        "Dwarf",
        "Orc"
      ],
      "suitable_classes": [
        "Rogue",
        "Wanderer",
        "Mage",
        "Warrior"
      ],
      "introduction_text": "The streets of Harmonia offer welcome stability after your harrowing experience in the Ghost Market. Three days have passed since you escaped that ethereal bazaar, though 'escaped' might not be the right word when you consider the contract currently burning a hole in your pocket. The Between – those enigmatic entities who run the market – rarely let anyone leave without some form of payment or promise.\n\nYou still don't fully remember how you came to be trapped there when the Resonance Event struck. One moment you were going about your business, the next you were surrounded by ethereal tents and the haunting bell music that announces the Ghost Market's appearance. What you do remember clearly is the panic that set in when you realized the market was beginning to dematerialize, preparing to shift to another location, with you still inside it.\n\nThe strange contract you signed with one of The Between secured your release back to the Nexus plane, but the cost remains ambiguous – something about 'services to be rendered at a time of the signatory's choosing.' The Between Token you were given supposedly allows them to contact you when they decide to collect on your debt.\n\nMost disturbing is the partially empty memory vial hanging around your neck. You're certain it contains some of your own memories, extracted as a 'deposit' on your contract. You don't know what you've forgotten, but the sense of loss haunts you.",
      "skill_proficiencies": [
        "Deception",
        "Stealth",
        "Insight"
      ],
      "origin_traits": [
        {
          "name": "Between's Bargain",
          "description": "You carry a binding contract with an entity from the Ghost Market, which may have unforeseen consequences."
        },
        {
          "name": "Fragmented Memory",
          "description": "You have gaps in your recent memory due to your Ghost Market encounter."
        }
      ],
      "starting_culture_id": "concordant"
    },
    "nobles_fall": {
      "id": "nobles_fall",
      "name": "Noble's Fall from Grace",
      "description": "Once a privileged noble in Harmonia, you've recently fallen from grace due to a political misstep, family scandal, or being on the wrong side of a Resonance Event prediction. Now you must rebuild your life with few resources but valuable connections and knowledge.",
      "starting_location_id": "harmonia",
      "starting_items": [
        "fine_clothes_(worn)",
        "family_signet_ring",
        "small_purse_of_coins",
        "sealed_letter_of_introduction",
        "ornate_dagger"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Elf"
      ],
      "suitable_classes": [
        "Wanderer",
        "Rogue",
        "Warrior",
        "Mage"
      ],
      "introduction_text": "The lower rings of Harmonia look different from this perspective – as a resident rather than a visitor. Your family's estate in the third ring, with its clear view of the Harmonic Spire, now seems impossibly distant. Your current lodgings, a modest room above a resonance equipment repair shop, serve as a stark reminder of how quickly fortunes can change in the Concordant Cities.\n\nIt's been just two weeks since the Council's decree stripped your family of position and most of your wealth. Perhaps it was your father's opposition to the new Resonance monitoring protocols, your sister's ill-advised romance with a Tempest diplomat, or simply being caught on the wrong side of a factional realignment. Whatever the cause, the result is the same – you now find yourself starting over with little more than your education, your connections, and whatever personal possessions you could discreetly secure before the seizures began.\n\nThe signet ring you wear now feels heavy – a reminder of your heritage that might open doors or close them, depending on who you encounter. The sealed letter of introduction from a family ally might offer a path forward, though you haven't yet decided whether to use it. Pride suggests making your own way; pragmatism argues for using every advantage available.\n\nAs you look out over the unfamiliar neighborhood, you consider your options. Your knowledge of high society and planar politics remains valuable. The question is how to leverage it without becoming entangled in the same web that ensnared your family.",
      "skill_proficiencies": [
        "Persuasion",
        "History",
        "Insight"
      ],
      "origin_traits": [
        {
          "name": "Fallen Noble",
          "description": "You retain knowledge of noble etiquette and politics, but lack the resources and official standing you once had."
        },
        {
          "name": "Lingering Connections",
          "description": "Some individuals may still recognize your family name, for better or worse."
        }
      ],
      "starting_culture_id": "concordant"
    },
    "commoners_call": {
      "id": "commoners_call",
      "name": "Commoner's Call to Adventure",
      "description": "After years of ordinary life in Harmonia's lower rings, a chance encounter with a mysterious traveler has given you a glimpse of the wider world across the planes, along with an offer you can't refuse.",
      "starting_location_id": "harmonia",
      "starting_items": [
        "sturdy_work_clothes",
        "family_heirloom",
        "simple_tool",
        "lunch_bundle",
        "old_map"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Halfling",
        "Dwarf",
        "Orc"
      ],
      "suitable_classes": [
        "Warrior",
        "Rogue",
        "Ranger",
        "Wanderer"
      ],
      "introduction_text": "The familiar streets of your neighborhood in Harmonia's sixth ring buzz with the usual morning activity – merchants setting up stalls, children running errands, workers heading to their duties in the inner rings. For two decades, this has been your entire world, your days filled with honest work and simple pleasures, never venturing beyond the boundaries set by circumstance and station.\n\nBut everything changed three nights ago when a traveler with strange, swirling tattoos and eyes that seemed to reflect multiple planes took shelter in your family's modest home during an unexpected Resonance tremor. The stories they shared of crystalline cities, floating harbors, and libraries that exist in all planes simultaneously awakened something within you that had lain dormant for too long.\n\nBefore leaving at dawn, they pressed an old map into your hands, marked with locations you'd never heard of, and whispered that you were 'meant for more than this life.' Whether driven by restlessness, curiosity, or the strange certainty in the traveler's voice, you've made your decision. Today, you leave the familiarity of your neighborhood behind, your few possessions packed and your family's blessing reluctantly given.\n\nThe weight of your family heirloom in your pocket reminds you of where you came from, while the map in your hand points to where you might be going. What awaits beyond the boundaries of everything you've ever known? It's time to find out.",
      "skill_proficiencies": [
        "Athletics",
        "Endurance",
        "Crafting (Basic)"
      ],
      "origin_traits": [
        {
          "name": "Common Sense",
          "description": "You possess practical knowledge and resilience gained from ordinary life."
        },
        {
          "name": "Mysterious Map",
          "description": "You carry an old map marked with unknown locations, hinting at a potential destiny."
        }
      ],
      "starting_culture_id": "concordant"
    },
    "scholarly_expedition": {
      "id": "scholarly_expedition",
      "name": "Scholarly Expedition",
      "description": "As a historian or researcher from the prestigious Resonance Academy in Harmonia, you've been sent on an expedition to document and study a recently discovered site of pre-Shattering significance.",
      "starting_location_id": "echo_woods",
      "starting_items": [
        "academic_robes",
        "research_notes",
        "precision_measuring_tools",
        "portable_writing_desk",
        "resonance_detector"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Elf",
        "Prismal",
        "Dwarf"
      ],
      "suitable_classes": [
        "Mage",
        "Cleric",
        "Wanderer"
      ],
      "introduction_text": "The mist-shrouded trees of the Echo Woods loom around you as you consult your notes once more. According to the fragmentary references discovered in the Academy archives, somewhere in this region lies a structure that predates The Shattering – a find of potentially immeasurable historical importance. As a scholar who has dedicated years to studying the sparse records of that lost era, the opportunity to document such a site firsthand could define your entire academic career.\n\nYour small expedition team has already set up a base camp half a day's journey behind you. As the team's lead historian, you've pressed ahead with just the essentials, eager to make the initial assessment before bringing in the other specialists. The portable resonance detector at your belt occasionally pulses with a soft blue light, confirming you're moving in the right direction.\n\nThe Academy's funding for this expedition was hard-won, with many senior faculty dismissing the ancient texts you uncovered as mere fantasy or allegory. Proving them wrong would be satisfying, but your true motivation runs deeper – to understand the world that existed before The Shattering, to piece together how one reality became five distinct planes, might help humanity comprehend its own fragmented existence.\n\nAs you push aside a curtain of hanging vines, your resonance detector suddenly flares with brilliant light. There, partially reclaimed by the forest but unmistakably artificial, stands a structure unlike any you've seen in modern architectural records. Your heart races as you approach, research notes at the ready. This is what you came for – the past, waiting to be rediscovered.",
      "skill_proficiencies": [
        "History",
        "Investigation",
        "Planar Lore"
      ],
      "origin_traits": [
        {
          "name": "Academic Authority",
          "description": "You possess credentials from the Resonance Academy, which may grant access to certain sites or information."
        },
        {
          "name": "Analytical Mind",
          "description": "You gain advantage on checks made to analyze historical artifacts or decipher ancient texts."
        }
      ],
      "starting_culture_id": "concordant"
    },
    "soldiers_mission": {
      "id": "soldiers_mission",
      "name": "Soldier's New Mission",
      "description": "After years of service in the Harmonic Guard, you've been selected for a special assignment. Investigate reports of unusual planar activity that may pose a threat to the stability of the Concordant Cities.",
      "starting_location_id": "planar_bleed_zone",
      "starting_items": [
        "guard_uniform",
        "standard_issue_weapon",
        "planar_protection_amulet",
        "rations_pack",
        "sealed_orders"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Dwarf",
        "Orc"
      ],
      "suitable_classes": [
        "Warrior",
        "Ranger",
        "Cleric"
      ],
      "introduction_text": "The ever-shifting landscape of The Convergence stretches before you, a vivid reminder of why the Harmonic Guard maintains constant vigilance against planar threats. For eight years, you've served with distinction, patrolling the orderly streets of Harmonia and occasionally venturing to outlying settlements to maintain security and order. But this assignment is different – more dangerous, more secretive, and potentially more significant than anything in your service record.\n\nTwo weeks ago, monitoring stations detected unusual ripples in the planar boundaries – not the typical fluctuations that precede Resonance Events, but something more deliberate, almost structured. Your commander's briefing was uncharacteristically grave as he handed you sealed orders and the special protection amulet now hanging around your neck. 'We need someone who can think independently,' he said, 'someone who understands what's at stake.'\n\nYour small squad consists of just three other hand-picked guards, each with specialized skills. You've been granted unusual autonomy for this mission – no regular check-ins, no standard protocols, just a directive to investigate and report on whatever is causing these anomalies, and if necessary, neutralize any threat they might pose.\n\nAs you adjust your uniform, designed to blend in rather than stand out in this chaotic environment, you feel the weight of responsibility. The safety of Harmonia may depend on what you discover here in this unstable region where reality itself cannot be trusted. It's time to break the seal on those orders and begin your mission properly.",
      "skill_proficiencies": [
        "Athletics",
        "Perception",
        "Intimidation"
      ],
      "origin_traits": [
        {
          "name": "Harmonic Guard Veteran",
          "description": "You possess military discipline and are recognized by Concordant City officials."
        },
        {
          "name": "Planar Hazard Training",
          "description": "You have basic training in identifying and mitigating common planar dangers."
        }
      ],
      "starting_culture_id": "concordant"
    },
    "outlaw_on_run": {
      "id": "outlaw_on_run",
      "name": "Outlaw on the Run",
      "description": "You're a fugitive from Harmonian justice, whether rightfully accused or wrongfully framed. You've fled to the edges of controlled territory, seeking to either clear your name or disappear into the chaotic regions beyond the Concordant Cities' influence.",
      "starting_location_id": "echo_woods",
      "starting_items": [
        "worn_disguise",
        "stolen_supplies",
        "forged_documents",
        "concealed_weapon",
        "wanted_poster"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Halfling",
        "Elf",
        "Orc"
      ],
      "suitable_classes": [
        "Rogue",
        "Ranger",
        "Warrior",
        "Wanderer"
      ],
      "introduction_text": "The dense foliage of the Echo Woods provides welcome cover as you pause to catch your breath. It's been three days since you slipped past the outer checkpoints of Harmonia, evading the guards who would happily collect the bounty now on your head. The wanted poster you took from the last outpost confirms your fears – your description has been circulated widely, though thankfully without an accurate likeness.\n\nYour crime – whether it was truly yours or one you were framed for – has made returning to any life you knew impossible. The stolen supplies in your pack might last another week if you're careful, but after that, you'll need to find a way to survive on the fringes of civilization. The forged documents might get you into one of the trading outposts where questions are fewer and coin speaks louder than official seals.\n\nOccasionally, the strange whispers of the Echo Woods seem to mock your situation, replaying fragments of the events that led to your downfall. Your fingers instinctively check the concealed weapon at your side – out here, justice and law are distant concepts, but danger is ever-present.\n\nAhead lies uncertainty, but behind lies certain capture. The whispers around you suddenly shift, no longer echoing the past but seemingly offering hints of possible futures. One path leads deeper into the unknown territories beyond the Concordant Cities' control. Another suggests a route to evidence that might clear your name. The choice, like the burden of your fugitive status, is yours alone to bear.",
      "skill_proficiencies": [
        "Stealth",
        "Deception",
        "Survival"
      ],
      "origin_traits": [
        {
          "name": "Fugitive",
          "description": "You are wanted by Harmonian authorities and must avoid identification in controlled territories."
        },
        {
          "name": "Resourceful Survivor",
          "description": "You gain advantage on checks made to find basic food, water, or shelter in the wilderness."
        }
      ],
      "starting_culture_id": "concordant"
    },
    "elven_emissary": {
      "id": "elven_emissary",
      "name": "Elven Emissary",
      "description": "As an Elf with exceptional magical sensitivity, you've been sent from your secluded community. Investigate the increasing frequency of Resonance Events and determine whether they pose a threat to your people.",
      "starting_location_id": "harmonia",
      "starting_items": [
        "elven_crafted_robes",
        "ancestral_focus_crystal",
        "diplomatic_insignia",
        "resonance_journal",
        "preserved_provisions"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Elf"
      ],
      "suitable_classes": [
        "Mage",
        "Ranger",
        "Wanderer",
        "Cleric"
      ],
      "introduction_text": "The overwhelming sensory cacophony of Harmonia assaults your elven senses as you stand at the edge of the Seven-Ring Market. After decades of seclusion in your community's hidden enclave, the noise, smells, and most of all, the chaotic resonance patterns of this planar hub are almost too much to bear. You instinctively touch the ancestral focus crystal hanging at your neck, allowing its familiar energy to center you.\n\nFor centuries, your people have maintained their distance from the Concordant Cities, preferring to nurture their innate connection to magic in isolation. But the recent surge in Resonance Events has become impossible to ignore. Disturbances have reached even your secluded forests, disrupting ancient wards and causing unpredictable magical phenomena. When the Elders' Council needed an emissary, your exceptional sensitivity to planar energies made you the natural choice.\n\nYour mission is clear: gather information on these Resonance shifts, establish diplomatic relations where necessary, and determine whether this growing instability threatens elven lands. The diplomatic insignia hidden within your robes should grant you access to various authorities, though elves are still met with curious looks in these cities.\n\nAs you take your first steps into the crowded market, you feel the swirling currents of multiple planes intersecting around you. Your elven senses perceive what others cannot—a growing disharmony in the very fabric of reality. Something is unbalancing the planes, and your people need to know what, why, and how to protect themselves from whatever comes next.",
      "skill_proficiencies": [
        "Arcana",
        "Perception",
        "Planar Lore"
      ],
      "origin_traits": [
        {
          "name": "Elven Sensitivity",
          "description": "You have advantage on checks to perceive subtle magical or planar phenomena."
        },
        {
          "name": "Emissary Status",
          "description": "You carry diplomatic credentials representing your secluded elven community."
        }
      ]
    },
    "dwarven_craftmaster": {
      "id": "dwarven_craftmaster",
      "name": "Dwarven Craftmaster",
      "description": "As a master of traditional dwarven crafting techniques, you've traveled to the Crystalline Enclave. Study their precision technology and possibly establish a trade agreement that would benefit your distant mountain hold.",
      "starting_location_id": "crystalline_enclave",
      "starting_items": [
        "dwarven_forge_hammer",
        "master_crafting_tools",
        "clan_trade_contract",
        "metal_samples",
        "ceremonial_flask"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Dwarf"
      ],
      "suitable_classes": [
        "Warrior",
        "Cleric",
        "Wanderer"
      ],
      "introduction_text": "The geometrically perfect architecture of the Crystalline Enclave surrounds you, its mathematical precision both impressive and somehow lifeless to your dwarven sensibilities. Where dwarven crafting embraces the natural variations in stone and metal, celebrating the materials' inherent character, the Crystalline Consortium creates structures of such uniform exactness that they seem almost unnatural.\n\nNevertheless, you cannot deny their technological achievements. After three centuries of mastering traditional dwarven metallurgy and stonecraft at your mountain hold, you've been sent to study the Consortium's precision techniques and determine what might be adapted to enhance your clan's legendary craftsmanship. Your secondary mission—to establish a trade agreement for the unique metals and gems found only in your ancestral mines—would bring much-needed resources to your people.\n\nThe forge hammer at your belt, passed down through seven generations of master crafters, feels heavy with responsibility. Your clan has not sent an emissary to the outer planes in nearly two centuries, preferring self-sufficiency to outside entanglements. Yet resources grow scarcer in the mountains, and the hold's council finally acknowledged that controlled trade might be necessary for survival.\n\nYou take a deep breath, savoring the familiar scent of metal from the samples in your pack—a reminder of home and purpose. The Prismals of the Consortium are already studying you with their faceted eyes, likely cataloging every aspect of your dwarven appearance. Their analytical nature might seem cold, but you understand examination before commitment. After all, no master crafter would forge an alliance without first testing the materials thoroughly.",
      "skill_proficiencies": [
        "Crafting (Metallurgy)",
        "History (Dwarven)",
        "Appraisal"
      ],
      "origin_traits": [
        {
          "name": "Master Crafter's Eye",
          "description": "You gain advantage on checks made to assess the quality of metalwork or stonework."
        },
        {
          "name": "Clan Representative",
          "description": "You carry the authority to negotiate trade agreements on behalf of your dwarven clan."
        }
      ]
    },
    "mycora_envoy": {
      "id": "mycora_envoy",
      "name": "Mycora Envoy",
      "description": "As a Mycora from the Verdant plane, you've been sent to the Nexus world. Study how different planar environments affect growth patterns and share your people's symbiotic knowledge with other cultures.",
      "starting_location_id": "verdant_embassy",
      "starting_items": [
        "living_garments",
        "spore_collection_kit",
        "symbiotic_communication_pod",
        "seed_vault",
        "environmental_adaptation_tonic"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Mycora"
      ],
      "suitable_classes": [
        "Cleric",
        "Ranger",
        "Wanderer",
        "Mage"
      ],
      "introduction_text": "The carefully cultivated environment of the Verdant Embassy provides welcome familiarity after your transition from the Verdant plane, though you can sense its slight artificiality. The living walls here are distant cousins to the vast mycelial networks of your home, maintained through careful tending rather than existing in their natural state of constant evolution and adaptation.\n\nAs a chosen envoy of the Mycora collective consciousness, you carry with you the wisdom of thousands of growth cycles, the communal knowledge of your fungal species shared through spore-based memory transfer. Your mission has two symbiotic aspects: to collect and study growth patterns from different planar environments, and to share beneficial Mycoran techniques with other cultures.\n\nThrough the symbiotic communication pod at your side, you maintain a tenuous connection to your home collective, though the messages across planes arrive delayed and sometimes fragmented. The seed vault you carry contains carefully selected specimens that might thrive in new environments, potentially creating beneficial adaptations that could be reintegrated into the collective.\n\nYour living garments shift slightly, adjusting to the embassy's humidity levels—a practical demonstration of the Mycoran principle that all life should continually adapt rather than impose rigid order. This philosophy often puts your people at odds with the Crystalline Consortium's precise equations and the Concordant Cities' careful management of planar boundaries.\n\nAs you prepare to venture beyond the embassy's familiar environment, you take a small sip of adaptation tonic, feeling its effects spread through your system. Like all Mycora, you excel at finding balance in new ecosystems. The question is whether the beings of this plane will be receptive to the symbiotic wisdom you offer, or if they will see only an unusual fungal entity too different from themselves to trust.",
      "skill_proficiencies": [
        "Nature",
        "Medicine",
        "Survival"
      ],
      "origin_traits": [
        {
          "name": "Collective Connection",
          "description": "You maintain a tenuous link to the Mycora collective, potentially receiving guidance or sharing information."
        },
        {
          "name": "Symbiotic Knowledge",
          "description": "You possess unique insights into plant life, fungi, and ecological balance."
        }
      ],
      "starting_culture_id": "verdant"
    },
    "prismal_researcher": {
      "id": "prismal_researcher",
      "name": "Prismal Researcher",
      "description": "As a Prismal mathematician specializing in planar geometry, you've been authorized by the Crystalline Consortium. Conduct field research at the Shifting Library, seeking patterns in the way knowledge exists across multiple planes simultaneously.",
      "starting_location_id": "shifting_library",
      "starting_items": [
        "crystalline_implants",
        "geometric_calculation_device",
        "consortium_authorization",
        "multidimensional_mapping_tools",
        "faceted_light_source"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Prismal"
      ],
      "suitable_classes": [
        "Mage",
        "Cleric",
        "Wanderer"
      ],
      "introduction_text": "The extraordinary spatial anomalies of the Shifting Library surround you, their mathematical complexity both fascinating and challenging even to your Prismal perceptions. Your crystalline body refracts the ambient light as you stand motionless, allowing your geometric implants to process and analyze the impossible architecture that allows the Library to exist simultaneously across multiple planes.\n\nThe Crystalline Consortium rarely approves extended external research missions, preferring controlled experiments within their precisely ordered environments. However, your theoretical work on planar intersection matrices proved sufficiently compelling for the High Calculation Chamber to make an exception. If your hypothesis about predictable patterns in cross-planar knowledge storage is correct, it would represent a significant advancement in the Consortium's understanding of reality's fundamental structure.\n\nYour geometric calculation device emits a soft hum as it continues mapping the Library's dimensional shifts, recording data that would overwhelm even the most brilliant non-Prismal mind. The faceted light source at your belt occasionally pulses in response to particularly complex spatial distortions, alerting you to areas worthy of detailed analysis.\n\nThe Lexicants have been surprisingly accommodating, granting you access to sections typically restricted to their own kind. Perhaps they recognize in your crystalline form a kindred appreciation for precision and order, though their organic methods of knowledge preservation seem needlessly inefficient compared to the perfect data storage of Prismal crystal matrices.\n\nAs your implants complete their initial calibration to the Library's unique resonance pattern, you mentally review your research parameters. The Consortium expects quantifiable results, precise measurements, and logical conclusions. What they do not expect—what you have not shared with them—is your personal hypothesis that the Library may contain mathematical proofs that could fundamentally alter the Consortium's understanding of reality itself.",
      "skill_proficiencies": [
        "Arcana",
        "Investigation",
        "Mathematics (Advanced)"
      ],
      "origin_traits": [
        {
          "name": "Planar Geometer",
          "description": "You possess advanced knowledge of the mathematical principles governing planar interactions."
        },
        {
          "name": "Consortium Authorization",
          "description": "Your research is sanctioned by the Crystalline Consortium, granting you specific privileges and access."
        }
      ],
      "starting_culture_id": "crystalline"
    },
    "cinderspawn_pilgrim": {
      "id": "cinderspawn_pilgrim",
      "name": "Cinderspawn Pilgrim",
      "description": "As a Cinderspawn seeking deeper spiritual connection with your ancestors, you've left the Ashen plane. Undertake a pilgrimage to various ceremonial fire sites across the Nexus world, beginning with the Eternal Flame at the Ashen Camp.",
      "starting_location_id": "ashen_camp",
      "starting_items": [
        "ancestral_ash_container",
        "ember_renewal_tonic",
        "pilgrimage_map",
        "flame-resistant_wrappings",
        "ritual_igniter"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Cinderspawn"
      ],
      "suitable_classes": [
        "Warrior",
        "Mage",
        "Cleric"
      ],
      "introduction_text": "The Eternal Flame at the center of the Ashen Camp flickers in response to your presence, its heat calling to the embers that constantly regenerate your Cinderspawn form. Fine ash trails behind you as you approach the sacred fire—not the lifeless dust of mundane ash, but living particles infused with ancestral memory and power. The Covenant members give you respectful distance, recognizing a fellow devotee of impermanence despite your origin from the Ashen plane itself.\n\nYour pilgrimage has just begun. The container of ancestral ash secured within your flame-resistant wrappings holds the remains of your progenitor—the one whose final immolation created the spark from which your consciousness formed. Through the sacred ritual of Ash Walking, you've communed with fragments of their memory, but full understanding remains elusive, like embers glimpsed through smoke.\n\nThe pilgrimage map, marked with locations of significant fires across the Nexus plane, will guide your journey. Each site offers an opportunity to perform the rituals that might strengthen your connection to the ancestral knowledge embedded in your very being. The Eternal Flame of the Ashen Camp marks only the first step.\n\nAs you kneel before the fire, you uncork the ember renewal tonic, consuming half and offering the remainder to the flames. Your body's internal heat intensifies, the ember at your core flaring brightly enough that the glow shows through your skin. The sensation is both painful and exhilarating—a reminder that in the philosophy of both the Ashen Covenant and your own people, transformation requires consumption, and rebirth demands destruction.\n\nTomorrow, you will continue your pilgrimage, following the map to the next sacred flame. But tonight, as sparks rise into the darkening sky, you prepare for the ritual that will temporarily separate your consciousness from your body, allowing your awareness to merge with the Eternal Flame and perhaps glimpse the wisdom of all who have surrendered themselves to its purifying heat.",
      "skill_proficiencies": [
        "Religion",
        "Endurance",
        "History (Oral)"
      ],
      "origin_traits": [
        {
          "name": "Pilgrim's Purpose",
          "description": "Your journey has a sacred goal, granting you inner resilience (+1 WIS save) against despair."
        },
        {
          "name": "Ashen Affinity",
          "description": "You have a natural connection to the Ashen plane and its associated magic (Ash Walking)."
        }
      ],
      "starting_culture_id": "ashen"
    },
    "maelstri_navigator": {
      "id": "maelstri_navigator",
      "name": "Maelstri Navigator",
      "description": "As a Maelstri, you've arrived at Tempest Harbor to serve as a navigator for trading vessels. Use your innate connection to storms to predict and navigate the chaotic weather patterns near the Tempest plane.",
      "starting_location_id": "tempest_harbor",
      "starting_items": [
        "storm_tattoo_kit",
        "weather_prediction_dice",
        "captain's_contract",
        "bottled_lightning",
        "temporal_compass"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Maelstri"
      ],
      "suitable_classes": [
        "Rogue",
        "Mage",
        "Wanderer"
      ],
      "introduction_text": "The swaying docks of Tempest Harbor shift beneath your feet in a rhythm that feels like home—chaotic yet somehow predictable to your Maelstri senses. The internal tempest that swirls within your partially translucent body resonates with the storm energies captured in the Flotilla's vessels, creating a harmony of chaotic potentials that other species could never perceive.\n\nYou've arrived during a rare celestial alignment, when the barriers between the Tempest plane and the Nexus are at their thinnest, allowing for easier passage and more reliable predictions. Your services as a navigator are in high demand; captains know that a Maelstri's intuitive understanding of probability and storm patterns can mean the difference between profitable voyages and disaster.\n\nThe captain's contract tucked into your belt represents your first commission in this harbor—a trading vessel seeking to venture dangerously close to the edges of the Tempest plane to collect rare storm essences. The payment offered is substantial, reflecting the risk involved and the value of your abilities.\n\nAs you wait for your meeting with the captain, you idly spin your weather prediction dice, their faces constantly shifting to display different meteorological patterns. With each tumble, you can sense the minute probability shifts they represent—not just predictions, but subtle manipulations of chance itself, a skill unique to your people.\n\nThe bottled lightning at your side occasionally illuminates your translucent skin from within as it resonates with the tempest inside you. Outsiders find it disconcerting how the storm patterns within your body never repeat, never settle into predictable forms. But then, that is the essence of being Maelstri—embracing the beauty of chaos and the certainty of change, guiding others through patterns they cannot comprehend.",
      "skill_proficiencies": [
        "Navigation",
        "Acrobatics",
        "Insight (Probability)"
      ],
      "origin_traits": [
        {
          "name": "Storm Sense",
          "description": "You can intuitively sense impending weather changes and planar disturbances related to the Tempest plane."
        },
        {
          "name": "Fluid Motion",
          "description": "You gain advantage on checks made to maintain balance in unstable or chaotic environments."
        }
      ],
      "starting_culture_id": "tempest"
    },
    "halfling_trader": {
      "id": "halfling_trader",
      "name": "Halfling Trader",
      "description": "As a halfling with a knack for finding valuable goods and spotting good deals, you've arrived at the bustling Tempest Harbor. You hope to make your fortune trading exotic goods from across the planes during a rare celestial alignment.",
      "starting_location_id": "tempest_harbor",
      "starting_items": [
        "trading_ledger",
        "sample_case_of_goods",
        "lucky_coin",
        "haggler's_pendant",
        "hidden_coin_purse"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Halfling"
      ],
      "suitable_classes": [
        "Rogue",
        "Wanderer"
      ],
      "introduction_text": "The vibrant chaos of Tempest Harbor surrounds you, a halfling barely noticed among the taller traders and sailors rushing to conduct business before the celestial alignment ends and the harbor disappears. This suits you perfectly—being underestimated has always been your greatest advantage in the trading business.\n\nThe sample case of goods strapped across your back contains carefully selected items from three different planes, each small enough to carry easily but valuable enough to fund your next, larger venture. Your trading ledger, filled with contacts in ports across the Nexus plane, represents years of building trust and reputation despite the prejudice larger folk often hold against halfling merchants.\n\nYou absently finger the lucky coin in your pocket—not actually magical, despite what you tell potential business partners, but a reminder of your first successful trade. The haggler's pendant around your neck, however, genuinely helps focus your natural halfling luck during crucial negotiations, giving you an edge when deals come down to chance.\n\nThe hidden coin purse, sewn into the lining of your vest where nimble-fingered thieves wouldn't think to look, contains just enough capital to secure the exotic goods you've heard rumors about—crystalline computational devices from the Consortium, rare spores from the Verdant Collective, or perhaps emotional residue captured in ash by Covenant mystics.\n\nAs you weave through the crowd, your keen eyes notice pricing patterns and inventory shifts that others miss. The Tempest Flotilla's merchants follow no predictable system, their leadership changing hourly, but that apparent disorder holds opportunities for those observant enough to spot them. Being smaller than most traders means you hear conversations not meant for your ears and see deals happening under tables or behind curtains.\n\nYou adjust your sample case and head toward the Flux Market. With the right timing, a smallish halfling might just walk away with the biggest profit of the day.",
      "skill_proficiencies": [
        "Persuasion",
        "Appraisal",
        "Stealth"
      ],
      "origin_traits": [
        {
          "name": "Opportunistic Trader",
          "description": "You have a knack for spotting valuable goods and potential deals where others might not."
        },
        {
          "name": "Unassuming Presence",
          "description": "Your small stature allows you to blend into crowds easily, gaining advantage on checks to eavesdrop or remain unnoticed."
        }
      ],
      "starting_culture_id": "tempest"
    },
    "orc_mercenary": {
      "id": "orc_mercenary",
      "name": "Orc Mercenary",
      "description": "As an orc with a reputation for battlefield prowess, you've been hired to protect a research team. Your strength and combat experience will be crucial for survival in the dangerous Planar Bleed Zone.",
      "starting_location_id": "planar_bleed_zone",
      "starting_items": [
        "mercenary_contract",
        "heavy_weapon",
        "partial_armor_set",
        "protection_talisman",
        "battlefield_trophy"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Orc"
      ],
      "suitable_classes": [
        "Warrior",
        "Ranger"
      ],
      "introduction_text": "The impossible landscape of The Convergence stretches before you, a chaotic blend of elements from multiple planes that would disorient most guards. But you've seen stranger battlefields during your years as a mercenary, and your orcish senses are already cataloging potential threats and defensive positions around the researchers' camp.\n\nThe mercenary contract that brought you to this dangerous assignment promised triple the usual rate—compensation for the planar exposure risks that even the researchers' protective equipment can't fully mitigate. Your own protection comes in the form of a talisman given to you by the team leader, its magic constantly humming against your skin, supposedly stabilizing your personal reality against the zone's unpredictable effects.\n\nYour heavy weapon rests easily across your shoulders, its weight a familiar comfort in this unfamiliar environment. The partial armor set you wear offers protection while maintaining mobility—crucial in a place where the very ground might suddenly behave according to another plane's physical laws. The battlefield trophy hanging from your belt—a crystalline shard from your first campaign against rogue Consortium elements—serves as both lucky charm and reminder of past victories against seemingly impossible odds.\n\nThe research team eyes you with the usual mixture of wariness and relief that greets orcish mercenaries—fear of your species' legendary battle rage tempered by gratitude for having that same ferocity as protection. You've grown accustomed to these reactions, learning to use the intimidation factor to your advantage. It's usually better for morale if the clients believe nothing can frighten you, even if the truth is more complex.\n\nAs one of the researchers approaches with a map of planned exploration routes, you grin, revealing characteristic tusks. Time to earn your pay by keeping these scholars alive in a place where reality itself can't be trusted—just another day's work for an orc mercenary with a reputation to maintain.",
      "skill_proficiencies": [
        "Athletics",
        "Intimidation",
        "Survival"
      ],
      "origin_traits": [
        {
          "name": "Battle Hardened",
          "description": "You gain advantage on saving throws against fear effects."
        },
        {
          "name": "Mercenary Reputation",
          "description": "Your reputation precedes you, potentially influencing interactions with employers and other mercenaries."
        }
      ]
    },
    "fortune_seeker": {
      "id": "fortune_seeker",
      "name": "Fortune Seeker",
      "description": "Having heard rumors of a mysterious ghost market appearing during Resonance Events, offering items and opportunities not available anywhere else in the planes. You've positioned yourself in Harmonia to intercept its next manifestation.",
      "starting_location_id": "harmonia",
      "starting_items": [
        "resonance_detector",
        "trading_goods",
        "market_rumors_collection",
        "multi-planar_currency",
        "protective_charm"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human",
        "Halfling",
        "Elf",
        "Dwarf"
      ],
      "suitable_classes": [
        "Rogue",
        "Wanderer",
        "Mage"
      ],
      "introduction_text": "The streets of Harmonia hum with the usual energy of planar convergence, but your attention focuses on the subtle resonance fluctuations that your detector keeps registering near the eastern quarter. According to the rumor collection you've meticulously gathered over the past year, these are exactly the kind of pre-manifestation signals that precede the appearance of the legendary Ghost Market.\n\nMany dismiss the Ghost Market as mere myth—a fantastical bazaar run by entities known only as 'The Between,' appearing randomly during Resonance Events and offering impossible goods from all planes. But you've spoken with too many reliable sources, seen too many inexplicable items supposedly purchased there, to believe it's just a story. The pattern of manifestations you've mapped suggests the market is due to appear in Harmonia within days.\n\nThe protective charm hangs heavy around your neck, a necessary precaution according to those who claim to have visited the market successfully. 'The Between drive hard bargains,' one former merchant warned you, 'and sometimes the price isn't obvious until it's already been paid.' The multi-planar currency you've gathered—coins from across all five planes, each carrying its own unique resonance—should help you secure whatever opportunities arise.\n\nYour trading goods, carefully selected for their cross-planar rarity, represent most of your worldly wealth. It's a risk to invest so heavily in what might be a fruitless chase, but the potential rewards... rare artifacts, unique knowledge, perhaps even services unavailable anywhere else in any plane. Fortune favors the bold, after all, and you've never been accused of excessive caution.\n\nAs your resonance detector gives a particularly strong pulse, you adjust your course through the crowded street. The readings are getting stronger, more regular. If the pattern holds, you'll be perfectly positioned when the Ghost Market materializes. Then you'll discover firsthand if the opportunities it offers are worth the mysterious prices it demands.",
      "skill_proficiencies": [
        "Investigation",
        "Appraisal",
        "Planar Lore (Rumors)"
      ],
      "origin_traits": [
        {
          "name": "Market Chaser",
          "description": "You possess knowledge of rumored Ghost Market appearances and potential locations."
        },
        {
          "name": "Risk Taker",
          "description": "You are more willing to take chances for potential high rewards, for better or worse."
        }
      ],
      "starting_culture_id": "concordant"
    },
    "human_diplomat": {
      "id": "human_diplomat",
      "name": "Human Diplomat",
      "description": "As a human diplomat representing Harmonia's interests, you've been assigned to the Verdant Embassy. Negotiate new trade agreements and cultural exchanges, leveraging your species' natural adaptability and diplomatic skills.",
      "starting_location_id": "verdant_embassy",
      "starting_items": [
        "diplomatic_credentials",
        "formal_negotiation_attire",
        "gift_package_for_ambassadors",
        "treaty_drafts",
        "translator's_guidebook"
      ],
      "initial_quests": [],
      "suitable_races": [
        "Human"
      ],
      "suitable_classes": [
        "Wanderer",
        "Mage",
        "Cleric"
      ],
      "introduction_text": "The living architecture of the Verdant Embassy surrounds you with an alien beauty that still manages to inspire rather than intimidate—exactly the kind of cross-cultural appreciation your diplomatic training emphasized. As Harmonia's newly appointed envoy to the Verdant Collective, you represent humanity's greatest strength: the ability to adapt to and find common ground with even the most different cultures across the planes.\n\nYour diplomatic credentials, bearing the seal of the Harmonic Council, opened doors easily enough, but you know that true rapport with the Verdant representatives will require more nuanced skills. The translator's guidebook you've studied for months has given you a basic understanding of their plant-based communication methods, though fluency in such an alien language remains elusive even for the most talented human linguists.\n\nThe treaty drafts in your attaché case represent months of preparation—proposals for expanded trade in medicinal compounds, research cooperation on adaptive agriculture, and cultural exchange programs that might benefit both societies. The formal negotiation attire you wear, designed to incorporate elements reminiscent of growth and renewal, was specifically commissioned to show respect for Verdant aesthetic values.\n\nThe gift package prepared for the ambassadors contains carefully selected offerings: seeds from rare Harmonian flowering plants, crystal prisms that refract light in patterns similar to Verdant spore displays, and small vials of pure water from the confluence springs near the Harmonic Spire. Such gifts, symbolic rather than extravagant, often speak louder than words in inter-planar diplomacy.\n\nAs you prepare for your first formal meeting with the Green Speakers, you mentally review what you know of their customs and hierarchies. Humans have long served as bridges between the more extreme differences of the planar races—lacking the specialized evolutionary adaptations of the Mycora or Prismals, but compensating with versatility and cultural flexibility. Today, those human diplomatic talents will be put to the test as you seek agreements beneficial to all within the complex web of inter-planar politics.",
      "skill_proficiencies": [
        "Diplomacy",
        "Persuasion",
        "Insight"
      ],
      "origin_traits": [
        {
          "name": "Harmonian Envoy",
          "description": "You represent the Concordant Cities and carry their diplomatic authority."
        },
        {
          "name": "Adaptive Negotiator",
          "description": "You gain advantage on checks made to understand and adapt to unfamiliar cultural norms during negotiations."
        }
      ],
      "starting_culture_id": "concordant"
    },
    "quest_testbed": {
      "id": "quest_testbed",
      "name": "Quest Testbed",
      "description": "A developer-focused starting origin in a special test hub designed to quickly generate and verify all quest proofs (items, kills, visits, flags).",
      "starting_location_id": "test_hub",
      "starting_items": [
        "test_apple"
      ],
      "initial_quests": [
        "TEST_Q01",
        "TEST_Q02",
        "TEST_Q03",
        "TEST_Q04",
        "TEST_Q05",
        "TEST_Q06",
        "TEST_Q07",
        "TEST_Q08",
        "TEST_Q09",
        "TEST_Q10",
        "TEST_Q11",
        "TEST_Q12",
        "TEST_Q13",
        "TEST_Q14",
        "TEST_Q15",
        "TEST_Q16",
        "TEST_Q17",
        "TEST_Q18",
        "TEST_Q19",
        "TEST_Q20",
        "TEST_Q21",
        "TEST_Q22",
        "TEST_Q23",
        "TEST_Q24",
        "TEST_Q25"
      ],
      "suitable_races": [
        "Human"
      ],
      "suitable_classes": [
        "Wanderer"
      ],
      "introduction_text": "This is a dedicated test scenario. You begin in the Quest Test Hub, with tools to validate quest objective detection and event logging.",
      "skill_proficiencies": [],
      "origin_traits": [],
      "starting_culture_id": "concordant"
    }
  },
  "metadata": {
    "version": "1.0.1",
    "description": "Starting origin definitions for the RPG game world"
  }
}
```

### File: config\world\scenarios\quests.json

```json
{
  "quests": {
    "luminary_fragment_hunt": {
      "id": "luminary_fragment_hunt",
      "title": "Echoes of the Luminaries",
      "description": "Reports indicate a Luminary fragment has manifested in the Echo Woods. Various factions are racing to obtain it, and the Harmonic Order has tasked you with retrieving it before it falls into dangerous hands.",
      "giver_id": "resonance_sage",
      "level": 3,
      "objectives": [
        {
          "id": "locate_fragment",
          "description": "Find the location of the Luminary fragment in Echo Woods",
          "type": "explore",
          "target_id": "whispering_grove",
          "location_id": "echo_woods",
          "completion_criteria": "Discover the Whispering Grove location where the fragment is hidden",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "defeat_cipher",
          "description": "Defeat the Cipher Remnant agents attempting to claim the fragment",
          "type": "kill",
          "target_id": "cipher_agents",
          "location_id": "whispering_grove",
          "completion_criteria": "Defeat all Cipher Remnant agents in the area",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "secure_fragment",
          "description": "Retrieve the Luminary fragment",
          "type": "fetch",
          "target_id": "luminary_fragment",
          "location_id": "whispering_grove",
          "completion_criteria": "Collect the Luminary fragment",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "return_fragment",
          "description": "Return the fragment to the Resonance Sage in Harmonia",
          "type": "deliver",
          "target_id": "resonance_sage",
          "location_id": "harmonia",
          "completion_criteria": "Deliver the Luminary fragment to the Resonance Sage",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 800,
        "gold": 250,
        "items": [
          "resonance_charm"
        ]
      },
      "prerequisites": []
    },
    "resonance_crisis": {
      "id": "resonance_crisis",
      "title": "Dangerous Frequencies",
      "description": "A small frontier settlement is experiencing unusually violent Resonance Events. The Harmonic Order needs someone to investigate the cause and protect the community during these unpredictable phenomena.",
      "giver_id": "council_speaker",
      "level": 5,
      "objectives": [
        {
          "id": "reach_settlement",
          "description": "Travel to the affected settlement near Echo Woods",
          "type": "explore",
          "target_id": "woodhaven_settlement",
          "location_id": "echo_woods",
          "completion_criteria": "Arrive at Woodhaven Settlement",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "investigate_anomalies",
          "description": "Investigate the unusual Resonance patterns in three locations around the settlement",
          "type": "explore",
          "target_id": "anomaly_sites",
          "location_id": "woodhaven_settlement",
          "completion_criteria": "Investigate all three anomaly sites",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "identify_disruptor",
          "description": "Identify the source of the Resonance disruption",
          "type": "fetch",
          "target_id": "dissonant_device",
          "location_id": "woodhaven_settlement",
          "completion_criteria": "Find the Dissonant Path device causing the disruptions",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "confront_dissonant",
          "description": "Confront the Dissonant Path member responsible for the disruption",
          "type": "kill",
          "target_id": "dissonant_disruptor",
          "location_id": "woodhaven_settlement",
          "completion_criteria": "Defeat the Dissonant Path member",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "stabilize_resonance",
          "description": "Use Planar Anchoring techniques to stabilize the area during the next Resonance Event",
          "type": "interact",
          "target_id": "resonance_node",
          "location_id": "woodhaven_settlement",
          "completion_criteria": "Complete the anchoring ritual at the village center",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 1200,
        "gold": 400,
        "items": [
          "planar_anchor_stone"
        ]
      },
      "prerequisites": []
    },
    "planar_expedition": {
      "id": "planar_expedition",
      "title": "Beyond the Veil",
      "description": "A research team from the Harmonic Order is mounting an expedition to explore a newly discovered Planar Bleed Zone. They need additional security and assistance to catalog the unique resources and phenomena within the zone.",
      "giver_id": "harmonic_researcher",
      "level": 4,
      "objectives": [
        {
          "id": "meet_expedition",
          "description": "Meet with the research team at their camp near The Convergence",
          "type": "explore",
          "target_id": "research_camp",
          "location_id": "planar_bleed_zone",
          "completion_criteria": "Find and speak with the research team at their camp",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "escort_researchers",
          "description": "Escort the research team safely into the Planar Bleed Zone",
          "type": "escort",
          "target_id": "research_team",
          "location_id": "planar_bleed_zone",
          "completion_criteria": "Protect all researchers during travel to the convergence perimeter",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "collect_samples",
          "description": "Collect samples from three different areas within the zone",
          "type": "fetch",
          "target_id": "planar_samples",
          "location_id": "planar_bleed_zone",
          "completion_criteria": "Collect all required samples",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "defend_camp",
          "description": "Defend the research camp from planar hybrid creatures",
          "type": "kill",
          "target_id": "planar_hybrids",
          "location_id": "research_camp",
          "completion_criteria": "Defeat all attacking creatures",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "document_anomaly",
          "description": "Help researchers document a major planar anomaly at the center of the zone",
          "type": "interact",
          "target_id": "reality_fault",
          "location_id": "planar_bleed_zone",
          "completion_criteria": "Complete documentation of the planar anomaly",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 1000,
        "gold": 350,
        "items": [
          "planar_sample_kit",
          "hybrid_seedling"
        ]
      },
      "prerequisites": []
    },
    "lost_knowledge": {
      "id": "lost_knowledge",
      "title": "Pages Through Time",
      "description": "The Shifting Library contains crucial information about stabilizing Resonance Events, but the needed texts only become accessible during a specific planar alignment. You need to obtain the required authorization and retrieve the knowledge before time runs out.",
      "giver_id": "head_lexicant",
      "level": 6,
      "objectives": [
        {
          "id": "obtain_authorization",
          "description": "Obtain authorization to access the Shifting Library from the Council of Resonance",
          "type": "interact",
          "target_id": "council_speaker",
          "location_id": "harmonia",
          "completion_criteria": "Convince the Council to grant library access",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "retrieve_focusing_crystal",
          "description": "Retrieve a focusing crystal from the Crystalline Enclave to help locate the texts",
          "type": "fetch",
          "target_id": "planar_focusing_crystal",
          "location_id": "crystalline_enclave",
          "completion_criteria": "Obtain the focusing crystal",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "access_library",
          "description": "Travel to the Shifting Library during the planar alignment",
          "type": "explore",
          "target_id": "shifting_library",
          "location_id": "shifting_library",
          "completion_criteria": "Reach the library during the alignment event",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "navigate_shifting_stacks",
          "description": "Navigate the constantly changing layout of the library to find the Pre-Shattering Archive",
          "type": "interact",
          "target_id": "shifting_stacks",
          "location_id": "shifting_library",
          "completion_criteria": "Solve the navigation puzzle of the shifting stacks",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "locate_texts",
          "description": "Find the texts about Resonance stabilization in the Pre-Shattering Archive",
          "type": "fetch",
          "target_id": "resonance_codex",
          "location_id": "pre_shattering_archive",
          "completion_criteria": "Locate and retrieve the Resonance Codex",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "escape_collapse",
          "description": "Escape the library as the planar alignment ends and sections begin disappearing",
          "type": "explore",
          "target_id": "library_entrance",
          "location_id": "shifting_library",
          "completion_criteria": "Reach the library entrance with the codex before time runs out",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 1500,
        "gold": 300,
        "items": [
          "lexicant_cipher",
          "plane_reader"
        ]
      },
      "prerequisites": []
    },
    "merchant_protection": {
      "id": "merchant_protection",
      "title": "Valuable Cargo",
      "description": "The Mercantile Chord is transporting a shipment of rare Resonant Materials between trading hubs and needs protection from bandits and natural hazards.",
      "giver_id": "mercantile_factor",
      "level": 3,
      "objectives": [
        {
          "id": "meet_caravan",
          "description": "Meet with the merchant caravan in Harmonia",
          "type": "interact",
          "target_id": "caravan_master",
          "location_id": "harmonia",
          "completion_criteria": "Meet and speak with the caravan master",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "escort_to_crystalline",
          "description": "Escort the caravan to the Crystalline Enclave",
          "type": "escort",
          "target_id": "merchant_caravan",
          "location_id": "crystalline_enclave",
          "completion_criteria": "Safely escort the caravan to its destination",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "fend_off_bandits",
          "description": "Protect the caravan from bandit attacks along the route",
          "type": "kill",
          "target_id": "resonance_bandits",
          "location_id": "",
          "completion_criteria": "Defeat all bandit groups that attack the caravan",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "navigate_flux_zone",
          "description": "Help the caravan safely navigate through a minor Resonance flux zone",
          "type": "interact",
          "target_id": "flux_zone",
          "location_id": "",
          "completion_criteria": "Successfully guide the caravan through the flux zone",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "delivery_complete",
          "description": "Ensure the cargo is safely delivered to the Crystalline Enclave",
          "type": "interact",
          "target_id": "consortium_representative",
          "location_id": "crystalline_enclave",
          "completion_criteria": "Complete delivery to the Consortium representative",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 750,
        "gold": 500,
        "items": [
          "resonant_trinket"
        ]
      },
      "prerequisites": []
    },
    "resonance_touched": {
      "id": "resonance_touched",
      "title": "Fragmented Self",
      "description": "A citizen of Harmonia has returned from a Resonance Event changed, possibly merged with an alternate version of themselves. They're experiencing 'Resonance sickness' and need help integrating their fragmented identity.",
      "giver_id": "attunement_master",
      "level": 2,
      "objectives": [
        {
          "id": "meet_patient",
          "description": "Meet with the Resonance-touched patient in the Attunement Hall",
          "type": "interact",
          "target_id": "resonance_touched_citizen",
          "location_id": "attunement_hall",
          "completion_criteria": "Meet and speak with the affected citizen",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "collect_erdium",
          "description": "Collect Erdium crystals to help with the reattunement ritual",
          "type": "fetch",
          "target_id": "erdium_crystal",
          "location_id": "echo_woods",
          "completion_criteria": "Gather the required erdium crystals",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "find_memories",
          "description": "Help the patient recover memories from before the Resonance Event",
          "type": "explore",
          "target_id": "memory_locations",
          "location_id": "harmonia",
          "completion_criteria": "Find all three memory locations in Harmonia",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "perform_ritual",
          "description": "Assist the Attunement Master in performing a reattunement ritual",
          "type": "interact",
          "target_id": "attunement_hall",
          "location_id": "harmonia",
          "completion_criteria": "Successfully complete the reattunement ritual",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "follow_up",
          "description": "Check on the patient after a few days to ensure the treatment worked",
          "type": "interact",
          "target_id": "resonance_touched_citizen",
          "location_id": "harmonia",
          "completion_criteria": "Follow up with the citizen to confirm recovery",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 500,
        "gold": 150,
        "items": [
          "identity_charm"
        ]
      },
      "prerequisites": []
    },
    "551cdb35-a4bb-4b23-b6c1-4d2772947efb": {
      "id": "551cdb35-a4bb-4b23-b6c1-4d2772947efb",
      "title": "Whispers of the Ash Plane (Ashen Covenant Recruit)",
      "description": "The Ashen Elder has tasked you with your first practical Ash Walking ritual. The Covenant needs to find a new, safe migration path, and the Elder believes a long-dead ancestor holds the key within the Ash Plane. You must project your consciousness, seek the ancestral spirit, and glean crucial information to guide your people.",
      "giver_id": "ashen_elder",
      "level": 1,
      "objectives": [
        {
          "id": "gather_ritual_ashes",
          "description": "Gather specific ritual ashes from the designated area near the Ashen Camp.",
          "type": "fetch",
          "target_id": "ritual_ashes",
          "location_id": "ashen_camp",
          "completion_criteria": "Collect the required ritual ashes for the Ash Walking ceremony.",
          "rewards": {},
          "mandatory": false
        },
        {
          "id": "perform_ash_walking_ritual",
          "description": "Perform the guided Ash Walking ritual at the sacred altar within the Ashen Camp.",
          "type": "interact",
          "target_id": "ash_walking_altar",
          "location_id": "ashen_camp",
          "completion_criteria": "Successfully initiate the Ash Walking ritual and project your consciousness.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "seek_ancestral_guidance",
          "description": "Within the Ash Plane, seek out the ancestral spirit and glean information about a safe migration path.",
          "type": "explore",
          "target_id": "ancestral_spirit_echo",
          "location_id": "ashen_camp",
          "completion_criteria": "Obtain the cryptic message or vision from the ancestral spirit.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "interpret_ancestral_message",
          "description": "Return to your body and consult with the Ashen Elder to interpret the ancestral message.",
          "type": "deliver",
          "target_id": "ashen_elder",
          "location_id": "ashen_camp",
          "completion_criteria": "Discuss the ancestral message with the Ashen Elder to understand its meaning.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "scout_new_migration_path",
          "description": "Based on the interpreted ancestral guidance, scout the new migration path in Echo Woods.",
          "type": "explore",
          "target_id": "migration_path_entrance",
          "location_id": "echo_woods",
          "completion_criteria": "Locate and assess the viability of the new migration path as indicated by the ancestor.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "gold": 50,
        "items": [
          "ash_walker_talisman"
        ],
        "xp": 200
      },
      "prerequisites": []
    },
    "the-first-exchange": {
      "id": "the-first-exchange",
      "title": "The First Exchange",
      "description": "A local merchant in Harmonia needs a small, important package delivered to a contact in the Verdant Embassy. This simple task will serve as your first foray into the world's commerce.",
      "giver_id": "merchant_guild_representative",
      "level": 1,
      "objectives": [
        {
          "id": "collect_package",
          "description": "Collect the delivery package from the Merchant Guild Representative in Harmonia.",
          "type": "fetch",
          "target_id": "delivery_package_harmonia",
          "location_id": "harmonia",
          "completion_criteria": "Obtain the delivery package from the representative.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "deliver_to_embassy",
          "description": "Deliver the package to the designated contact at the Verdant Embassy.",
          "type": "deliver",
          "target_id": "verdant_embassy_contact",
          "location_id": "verdant_embassy",
          "completion_criteria": "Successfully deliver the package to the contact.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "gold": 50,
        "items": [],
        "xp": 100
      },
      "prerequisites": []
    },
    "TEST_Q01": {
      "id": "TEST_Q01",
      "title": "Q01 – Fetch an Apple",
      "description": "Obtain a test apple.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Obtain 1 test_apple.",
          "type": "fetch",
          "target_id": "test_apple",
          "location_id": "",
          "completion_criteria": "Have at least 1 test_apple in inventory.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q02": {
      "id": "TEST_Q02",
      "title": "Q02 – Defeat the Test Wolf",
      "description": "Defeat the wolf",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Defeat a wolf (test).",
          "type": "kill",
          "target_id": "wolf",
          "location_id": "harmonia",
          "completion_criteria": "Eliminate the wolf",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": "[]"
      },
      "prerequisites": []
    },
    "TEST_Q03": {
      "id": "TEST_Q03",
      "title": "Q03 – Visit the Test Ruins",
      "description": "Visit test_ancient_ruins.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Visit test_ancient_ruins.",
          "type": "explore",
          "target_id": "test_ancient_ruins",
          "location_id": "test_ancient_ruins",
          "completion_criteria": "Enter the test_ancient_ruins location.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q04": {
      "id": "TEST_Q04",
      "title": "Q04 – Speak to the Test Elder",
      "description": "Ensure flag test_spoke_to_elder is true.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Speak with the test_elder.",
          "type": "interact",
          "target_id": "test_elder",
          "location_id": "test_area",
          "completion_criteria": "Conversation with test_elder completed.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q05": {
      "id": "TEST_Q05",
      "title": "Q05 – Beat the Clock (Before 5m)",
      "description": "Complete before time < 300.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Finish the timed task before 300s.",
          "type": "interact",
          "target_id": "test_timer_gate",
          "location_id": "test_area",
          "completion_criteria": "Objective completed in under 300 seconds.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q06": {
      "id": "TEST_Q06",
      "title": "Q06 – After Time Gate (After 10m)",
      "description": "Complete only after time > 600.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Finish the timed task after 600s.",
          "type": "interact",
          "target_id": "test_timer_gate",
          "location_id": "test_area",
          "completion_criteria": "Objective completed after 600 seconds have elapsed.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q07": {
      "id": "TEST_Q07",
      "title": "Q07 – All Composite",
      "description": "Have test_key and defeat test_guardian.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Have test_key and defeat test_guardian.",
          "type": "interact",
          "target_id": "test_guardian_gate",
          "location_id": "test_area",
          "completion_criteria": "Gate opened with test_key and guardian defeated.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q08": {
      "id": "TEST_Q08",
      "title": "Q08 – Any Composite",
      "description": "Visit either test_dock or test_harbor.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Visit test_dock OR test_harbor.",
          "type": "explore",
          "target_id": "test_dock_or_harbor",
          "location_id": "test_coast",
          "completion_criteria": "Arrive at either test_dock or test_harbor.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q09": {
      "id": "TEST_Q09",
      "title": "Q09 – None Composite",
      "description": "Alarm must NOT be triggered.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Ensure alarm remains silent.",
          "type": "interact",
          "target_id": "test_alarm_system",
          "location_id": "test_area",
          "completion_criteria": "Objective completed with no alarm raised.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q10": {
      "id": "TEST_Q10",
      "title": "Q10 – Mandatory + Optional",
      "description": "Mandatory item; optional visit.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Obtain test_badge.",
          "type": "fetch",
          "target_id": "test_badge",
          "location_id": "",
          "completion_criteria": "Acquire the test_badge.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "O2",
          "description": "Optionally visit test_outpost.",
          "type": "explore",
          "target_id": "test_outpost",
          "location_id": "test_outpost",
          "completion_criteria": "Enter the test_outpost (optional).",
          "rewards": {},
          "mandatory": false
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q11": {
      "id": "TEST_Q11",
      "title": "Q11 – Two Mandatory Objectives",
      "description": "Complete both mandatory objectives.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Defeat test_bandit_captain.",
          "type": "kill",
          "target_id": "test_bandit_captain",
          "location_id": "test_road",
          "completion_criteria": "Defeat the test_bandit_captain.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "O2",
          "description": "Collect 3 test_gem.",
          "type": "fetch",
          "target_id": "test_gem",
          "location_id": "",
          "completion_criteria": "Possess 3 test_gem.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q12": {
      "id": "TEST_Q12",
      "title": "Q12 – Semantic Only (No DSL)",
      "description": "Objective completion via semantic inference.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Convince the test_mayor to help.",
          "type": "interact",
          "target_id": "test_mayor",
          "location_id": "test_town",
          "completion_criteria": "Mayor agrees to help.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q13": {
      "id": "TEST_Q13",
      "title": "Q13 – Semantic Mandatory + Optional DSL",
      "description": "Mandatory semantic objective and optional visit objective.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Broker peace between test_factions.",
          "type": "interact",
          "target_id": "test_faction_council",
          "location_id": "test_hall",
          "completion_criteria": "Agreement reached between factions.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "O2",
          "description": "Optionally visit test_neutral_ground.",
          "type": "explore",
          "target_id": "test_neutral_ground",
          "location_id": "test_neutral_ground",
          "completion_criteria": "Enter test_neutral_ground (optional).",
          "rewards": {},
          "mandatory": false
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q14": {
      "id": "TEST_Q14",
      "title": "Q14 – Flag Chain",
      "description": "Require both flags set (speak to guard and acquire pass).",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Speak to guard and acquire pass.",
          "type": "interact",
          "target_id": "test_gate_guard",
          "location_id": "test_gate",
          "completion_criteria": "Guard spoken to and pass acquired.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q15": {
      "id": "TEST_Q15",
      "title": "Q15 – Inventory Count",
      "description": "Collect 3 test_herb.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Collect 3 test_herb.",
          "type": "fetch",
          "target_id": "test_herb",
          "location_id": "",
          "completion_criteria": "Possess 3 test_herb.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q16": {
      "id": "TEST_Q16",
      "title": "Q16 – Any of Three Enemies",
      "description": "Defeat any one of three test bandits.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Defeat any bandit (1 of 3).",
          "type": "kill",
          "target_id": "test_bandit_group",
          "location_id": "test_road",
          "completion_criteria": "Defeat at least one of test_bandit_1/2/3.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q17": {
      "id": "TEST_Q17",
      "title": "Q17 – Visit Two Key Locations",
      "description": "Visit both test_gate and test_keep.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Visit test_gate and test_keep.",
          "type": "explore",
          "target_id": "test_gate_and_keep",
          "location_id": "test_realm",
          "completion_criteria": "Enter both test_gate and test_keep.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q18": {
      "id": "TEST_Q18",
      "title": "Q18 – Negative Flag (Not Banished)",
      "description": "Ensure not banished.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Ensure test_banished is false.",
          "type": "interact",
          "target_id": "test_citizenship_check",
          "location_id": "test_town",
          "completion_criteria": "Status confirms not banished.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q19": {
      "id": "TEST_Q19",
      "title": "Q19 – Mixed All/Any",
      "description": "Travel to dock or harbor and have a test_ticket.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Visit test_dock or test_harbor and show test_ticket.",
          "type": "interact",
          "target_id": "test_port_entry",
          "location_id": "test_coast",
          "completion_criteria": "Entry permitted with test_ticket at dock or harbor.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q20": {
      "id": "TEST_Q20",
      "title": "Q20 – Optional Does Not Block",
      "description": "Optional objective should not block completion.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Deliver test_letter.",
          "type": "deliver",
          "target_id": "test_recipient",
          "location_id": "test_town",
          "completion_criteria": "Deliver the test_letter to recipient.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "O2",
          "description": "Explore test_garden (optional).",
          "type": "explore",
          "target_id": "test_garden",
          "location_id": "test_garden",
          "completion_criteria": "Enter the test_garden.",
          "rewards": {},
          "mandatory": false
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q21": {
      "id": "TEST_Q21",
      "title": "Q21 – Narrative-Heavy Objective",
      "description": "Deliver an inspiring speech to the council.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Deliver an inspiring speech to the test_council about unity and cooperation.",
          "type": "interact",
          "target_id": "test_council",
          "location_id": "test_hall",
          "completion_criteria": "Speech delivered; council acknowledges.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q22": {
      "id": "TEST_Q22",
      "title": "Q22 – Three Mandatory Objectives",
      "description": "Complete three distinct tasks.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Defeat test_ogre.",
          "type": "kill",
          "target_id": "test_ogre",
          "location_id": "test_ogre_cave",
          "completion_criteria": "Ogre defeated.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "O2",
          "description": "Collect 2 test_ogre_tooth.",
          "type": "fetch",
          "target_id": "test_ogre_tooth",
          "location_id": "",
          "completion_criteria": "Possess 2 test_ogre_tooth.",
          "rewards": {},
          "mandatory": true
        },
        {
          "id": "O3",
          "description": "Visit test_ogre_cave.",
          "type": "explore",
          "target_id": "test_ogre_cave",
          "location_id": "test_ogre_cave",
          "completion_criteria": "Enter the ogre cave.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q23": {
      "id": "TEST_Q23",
      "title": "Q23 – Semantic Failure Gating",
      "description": "Objective completion depends on semantic inference only.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Convince test_skeptic to trust you.",
          "type": "interact",
          "target_id": "test_skeptic",
          "location_id": "test_village",
          "completion_criteria": "Skeptic indicates trust.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q24": {
      "id": "TEST_Q24",
      "title": "Q24 – Abandon/Fallback Scenario",
      "description": "Regular quest for abandon/failure flow testing.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Recover the test_relic.",
          "type": "fetch",
          "target_id": "test_relic",
          "location_id": "test_ruins",
          "completion_criteria": "Obtain the test_relic.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    },
    "TEST_Q25": {
      "id": "TEST_Q25",
      "title": "Q25 – Complex Mixed Conditions",
      "description": "Any of two routes, but no alarm and with resource gate.",
      "giver_id": "test_proctor",
      "level": 1,
      "objectives": [
        {
          "id": "O1",
          "description": "Route A (visit test_tower AND have test_rope) OR Route B (defeat test_spider_queen) with no alarm.",
          "type": "interact",
          "target_id": "test_tower_or_spider_queen",
          "location_id": "test_vale",
          "completion_criteria": "No alarm triggered; either tower+rope route or spider queen defeated.",
          "rewards": {},
          "mandatory": true
        }
      ],
      "rewards": {
        "xp": 0,
        "gold": 0,
        "items": []
      },
      "prerequisites": []
    }
  },
  "metadata": {
    "version": "1.0.0",
    "description": "Quest definitions for the RPG game world"
  }
}
```

### File: config\skills.json

```json
{
  "skills": {
    "acrobatics": {
      "name": "Acrobatics",
      "primary_stat": "DEXTERITY",
      "category": "PHYSICAL",
      "description": "Performing agile maneuvers, balancing, tumbling, and reducing fall damage."
    },
    "appraisal": {
      "name": "Appraisal",
      "primary_stat": "INTELLIGENCE",
      "category": "KNOWLEDGE",
      "description": "Determining the value, authenticity, and properties of items, artifacts, or goods."
    },
    "arcana": {
      "name": "Arcana",
      "primary_stat": "INTELLIGENCE",
      "category": "KNOWLEDGE",
      "description": "Knowledge about magic, magical traditions, spells, arcane symbols, and supernatural effects."
    },
    "athletics": {
      "name": "Athletics",
      "primary_stat": "STRENGTH",
      "category": "PHYSICAL",
      "description": "Performing physical activities like running, jumping, swimming, climbing, and feats of raw power."
    },
    "crafting_basic": {
      "name": "Crafting (Basic)",
      "primary_stat": "INTELLIGENCE",
      "category": "UTILITY",
      "description": "Basic ability to create, repair, or modify simple items and equipment."
    },
    "crafting_metallurgy": {
      "name": "Crafting (Metallurgy)",
      "primary_stat": "INTELLIGENCE",
      "category": "UTILITY",
      "description": "Specialized skill in working with metals, including forging, smithing, and understanding alloys."
    },
    "deception": {
      "name": "Deception",
      "primary_stat": "CHARISMA",
      "category": "SOCIAL",
      "description": "Misleading others through lies, trickery, disguises, and manipulation of truth."
    },
    "diplomacy": {
      "name": "Diplomacy",
      "primary_stat": "CHARISMA",
      "category": "SOCIAL",
      "description": "Influencing others through negotiation, tact, and understanding of social etiquette."
    },
    "dodge": {
      "name": "Dodge",
      "primary_stat": "DEXTERITY",
      "category": "COMBAT",
      "description": "Avoiding attacks and obstacles through quick movements."
    },
    "endurance": {
      "name": "Endurance",
      "primary_stat": "CONSTITUTION",
      "category": "PHYSICAL",
      "description": "Withstanding prolonged physical exertion, fatigue, hardship, and resisting exhaustion."
    },
    "history": {
      "name": "History",
      "primary_stat": "INTELLIGENCE",
      "category": "KNOWLEDGE",
      "description": "Knowledge of past events, civilizations, historical figures, and the study of recorded history."
    },
    "history_oral": {
      "name": "History (Oral)",
      "primary_stat": "INTELLIGENCE",
      "category": "KNOWLEDGE",
      "description": "Knowledge of past events, legends, and traditions passed down verbally, common in cultures without extensive written records."
    },
    "insight": {
      "name": "Insight",
      "primary_stat": "INSIGHT",
      "category": "MENTAL",
      "description": "Discerning true intentions, detecting lies, sensing emotions, and understanding underlying truths or motives."
    },
    "insight_probability": {
      "name": "Insight (Probability)",
      "primary_stat": "INSIGHT",
      "category": "MENTAL",
      "description": "Intuitive understanding of chance, luck, predicting random outcomes, and sensing probability currents."
    },
    "insight_risk_assessment": {
      "name": "Insight (Risk Assessment)",
      "primary_stat": "INSIGHT",
      "category": "MENTAL",
      "description": "Specifically assessing potential dangers, evaluating probabilities of failure/success, and calculating risks in various situations."
    },
    "intimidation": {
      "name": "Intimidation",
      "primary_stat": "CHARISMA",
      "category": "SOCIAL",
      "description": "Influencing others through threats, fear, force of presence, or hostile actions."
    },
    "investigation": {
      "name": "Investigation",
      "primary_stat": "INTELLIGENCE",
      "category": "KNOWLEDGE",
      "description": "Finding clues, deducing information, examining details, and solving mysteries or puzzles."
    },
    "mathematics_basic": {
      "name": "Mathematics (Basic)",
      "primary_stat": "INTELLIGENCE",
      "category": "KNOWLEDGE",
      "description": "Basic understanding and application of mathematical principles, logic, and calculations."
    },
    "medicine": {
      "name": "Medicine",
      "primary_stat": "WISDOM",
      "category": "UTILITY",
      "description": "Diagnosing illnesses, treating wounds, administering first aid, and knowledge of remedies."
    },
    "melee_attack": {
      "name": "Melee Attack",
      "primary_stat": "STRENGTH",
      "category": "COMBAT",
      "description": "Physical close-range combat attacks."
    },
    "nature": {
      "name": "Nature",
      "primary_stat": "WISDOM",
      "category": "EXPLORATION",
      "description": "Knowledge about flora, fauna, weather, natural terrain, and survival in natural environments."
    },
    "navigation": {
      "name": "Navigation",
      "primary_stat": "WISDOM",
      "category": "EXPLORATION",
      "description": "Finding one's way through various terrains, using maps, stars, or natural signs."
    },
    "perception": {
      "name": "Perception",
      "primary_stat": "WISDOM",
      "category": "EXPLORATION",
      "description": "Noticing details in your surroundings, detecting hidden objects, and general awareness of your environment."
    },
    "persuasion": {
      "name": "Persuasion",
      "primary_stat": "CHARISMA",
      "category": "SOCIAL",
      "description": "Convincing others through reasoning, charm, debate, or emotional appeals."
    },
    "planar_lore": {
      "name": "Planar Lore",
      "primary_stat": "INTELLIGENCE",
      "category": "KNOWLEDGE",
      "description": "General knowledge about the different planes of existence, their properties, inhabitants, and planar travel."
    },
    "planar_lore_basic": {
      "name": "Planar Lore (Basic)",
      "primary_stat": "INTELLIGENCE",
      "category": "KNOWLEDGE",
      "description": "Basic understanding of the different planes of existence, their interactions, and common phenomena."
    },
    "planar_lore_rumors": {
      "name": "Planar Lore (Rumors)",
      "primary_stat": "INTELLIGENCE",
      "category": "KNOWLEDGE",
      "description": "Knowledge of hearsay, gossip, unverified information, and local legends about the planes."
    },
    "ranged_attack": {
      "name": "Ranged Attack",
      "primary_stat": "DEXTERITY",
      "category": "COMBAT",
      "description": "Physical ranged combat attacks."
    },
    "religion": {
      "name": "Religion",
      "primary_stat": "WILLPOWER",
      "category": "KNOWLEDGE",
      "description": "Knowledge about deities, religious rites, holy symbols, mythology, and theological matters. Also represents strength of faith."
    },
    "spell_attack": {
      "name": "Spell Attack",
      "primary_stat": "INTELLIGENCE",
      "category": "COMBAT",
      "description": "Magical attacks using spells or arcane abilities."
    },
    "stealth": {
      "name": "Stealth",
      "primary_stat": "DEXTERITY",
      "category": "COVERT",
      "description": "Moving silently, avoiding detection, and hiding effectively."
    },
    "streetwise_harmonia": {
      "name": "Streetwise (Harmonia)",
      "primary_stat": "CHARISMA",
      "category": "SOCIAL",
      "description": "Knowledge of the streets, local customs, influential figures, and underworld of Harmonia."
    },
    "survival": {
      "name": "Survival",
      "primary_stat": "WISDOM",
      "category": "EXPLORATION",
      "description": "Thriving in the wild by tracking, foraging, finding shelter, and navigating harsh environments."
    },
    "unarmed_attack": {
      "name": "Unarmed Attack",
      "primary_stat": "STRENGTH",
      "category": "COMBAT",
      "description": "Combat attacks without weapons, such as punches and kicks."
    }
  }
}
```

### File: config\world\locations\locations.json

```json
{
  "locations": {
    "harmonia": {
      "id": "harmonia",
      "name": "Harmonia",
      "description": "The largest and most influential of the Concordant Cities, serving as the capital of their confederation. Built at the confluence of major Resonance nodes, its architecture is a mesmerizing blend of all five planes that shifts and reconfigures during Resonance Events. The city is arranged in seven concentric rings, each representing different aspects of planar influence.",
      "type": "city",
      "region": "Central Nexus",
      "culture_id": "concordant",
      "population": 80000,
      "culture_mix": {
        "concordant": 0.8,
        "verdant": 0.1,
        "crystalline": 0.05,
        "tempest": 0.05
      },
      "features": [
        {
          "name": "The Harmonic Spire",
          "description": "A towering structure at the city center that serves as both government seat and Resonance monitoring station. The spire changes color and sometimes shape depending on upcoming Resonance Events.",
          "interaction_type": "examine"
        },
        {
          "name": "The Attunement Hall",
          "description": "A sacred space where citizens receive their protective tattoos. The walls are lined with designs from across all five planes.",
          "interaction_type": "interact"
        },
        {
          "name": "The Resonance Academy",
          "description": "The premier institution for studying planar phenomena and predicting Resonance Events. Home to the Harmonic Order.",
          "interaction_type": "examine"
        },
        {
          "name": "The Five Voices Plaza",
          "description": "A pentagonal square where the Five Speakers occasionally gather to deliberate. Each corner features a statue representing a fragmented Luminary.",
          "interaction_type": "examine"
        }
      ],
      "connections": [
        {
          "target": "verdant_embassy",
          "description": "A well-maintained road leading to the diplomatic outpost of the Verdant Collective.",
          "travel_time": 240,
          "requirements": []
        },
        {
          "target": "crystalline_enclave",
          "description": "A geometric pathway of perfectly aligned stones leading to the Crystalline Consortium's trading post.",
          "travel_time": 180,
          "requirements": []
        },
        {
          "target": "echo_woods",
          "description": "A winding path through increasingly wild terrain that eventually reaches the Echo Woods.",
          "travel_time": 360,
          "requirements": []
        }
      ],
      "npcs": [
        "council_speaker",
        "resonance_sage",
        "attunement_master"
      ]
    },
    "verdant_embassy": {
      "id": "verdant_embassy",
      "name": "Verdant Embassy",
      "description": "An outpost of the Verdant Collective on the Nexus plane. The embassy is a living structure, grown rather than built, with walls of interwoven trees and flowering vines that change with the seasons. It serves as both a diplomatic mission and a trading post for the unique flora and fauna of the Verdant plane.",
      "type": "outpost",
      "region": "Western Nexus",
      "culture_id": "verdant",
      "population": 350,
      "culture_mix": {
        "verdant": 0.8,
        "concordant": 0.1,
        "crystalline": 0.05,
        "tempest": 0.05
      },
      "features": [
        {
          "name": "The Living Council Chamber",
          "description": "A circular room where tree branches have been coaxed into forming a natural amphitheater. The branches shift slightly to improve acoustics when someone speaks.",
          "interaction_type": "examine"
        },
        {
          "name": "The Green Speech Garden",
          "description": "A secluded garden where members of the Verdant Collective communicate through their unique plant-based language.",
          "interaction_type": "examine"
        },
        {
          "name": "Seasonal Quarters",
          "description": "Living quarters that transform with the seasons, offering different amenities depending on the time of year.",
          "interaction_type": "interact"
        }
      ],
      "connections": [
        {
          "target": "harmonia",
          "description": "A well-maintained road leading back to the capital city of Harmonia.",
          "travel_time": 240,
          "requirements": []
        },
        {
          "target": "deeproot_crossing",
          "description": "A temporary passage to the Verdant plane that becomes accessible during specific Resonance Events.",
          "travel_time": 120,
          "requirements": [
            "resonance_event_verdant"
          ]
        }
      ],
      "npcs": [
        "verdant_ambassador",
        "botanical_trader",
        "green_speaker"
      ]
    },
    "crystalline_enclave": {
      "id": "crystalline_enclave",
      "name": "Crystalline Enclave",
      "description": "A trading post and research facility established by the Crystalline Consortium on the Nexus plane. The entire structure is built from precisely angled crystalline materials that reflect light in complex mathematical patterns. Inside, scholars and merchants work to advance Facet Magic and trade in rare minerals.",
      "type": "outpost",
      "region": "Eastern Nexus",
      "culture_id": "crystalline",
      "population": 275,
      "culture_mix": {
        "crystalline": 0.8,
        "concordant": 0.1,
        "verdant": 0.05,
        "tempest": 0.05
      },
      "features": [
        {
          "name": "The Calculation Chamber",
          "description": "A hexagonal room where crystal matrices are used to solve complex mathematical and magical equations. The floor is inscribed with intricate geometric formulas.",
          "interaction_type": "examine"
        },
        {
          "name": "The Precision Market",
          "description": "A marketplace where crystalline components and precision instruments are traded under strict quality control standards.",
          "interaction_type": "interact"
        },
        {
          "name": "Faceting Workshop",
          "description": "A facility where young members of the Consortium receive their crystal implants, carefully aligned to enhance specific mental abilities.",
          "interaction_type": "examine"
        }
      ],
      "connections": [
        {
          "target": "harmonia",
          "description": "A geometric pathway of perfectly aligned stones leading back to Harmonia.",
          "travel_time": 180,
          "requirements": []
        },
        {
          "target": "lattice_point",
          "description": "A precisely calibrated portal to the Crystalline plane, accessible only during certain celestial alignments.",
          "travel_time": 90,
          "requirements": [
            "celestial_alignment"
          ]
        }
      ],
      "npcs": [
        "consortium_representative",
        "facet_mage",
        "crystal_merchant"
      ]
    },
    "echo_woods": {
      "id": "echo_woods",
      "name": "Echo Woods",
      "description": "A mysterious forest that exists partially in the Nexus plane and partially in the Verdant plane. The trees seem to whisper echoes of conversations held long ago, and visitors often report seeing shadowy figures moving between the trunks. It's known as a place where the boundaries between planes are naturally thin.",
      "type": "forest",
      "region": "Northwestern Nexus",
      "culture_id": "",
      "population": 0,
      "culture_mix": {
        "verdant": 0.6,
        "concordant": 0.2,
        "ashen": 0.2
      },
      "features": [
        {
          "name": "The Whispering Grove",
          "description": "A clearing where echoes of past conversations can be heard clearly, sometimes providing valuable historical information.",
          "interaction_type": "interact"
        },
        {
          "name": "The Blurred Stream",
          "description": "A waterway that occasionally shifts between planes, with water that can grant temporary visions of other planes when drunk.",
          "interaction_type": "use"
        },
        {
          "name": "The Ancient Hollow",
          "description": "An enormous hollow tree that predates The Shattering. Inside is a small, permanent Planar Bleed Zone.",
          "interaction_type": "examine"
        }
      ],
      "connections": [
        {
          "target": "harmonia",
          "description": "A winding path through increasingly civilized terrain that eventually reaches Harmonia.",
          "travel_time": 360,
          "requirements": []
        },
        {
          "target": "ashen_camp",
          "description": "A barely visible trail that leads to a temporary settlement of the Ashen Covenant.",
          "travel_time": 180,
          "requirements": [
            "tracking_skill"
          ]
        }
      ],
      "npcs": [
        "echo_collector",
        "plane_walker"
      ]
    },
    "ashen_camp": {
      "id": "ashen_camp",
      "name": "Ashen Camp",
      "description": "A temporary settlement of the Ashen Covenant, comprised of easily dismantled structures and tents made from ash-treated hides. The camp is relocated monthly according to Covenant traditions. At its center burns an eternal flame where ancestral ashes are kept and used in rituals.",
      "type": "settlement",
      "region": "Northern Nexus",
      "culture_id": "ashen",
      "population": 120,
      "culture_mix": {
        "ashen": 0.8,
        "concordant": 0.1,
        "verdant": 0.1
      },
      "features": [
        {
          "name": "The Ancestor Fire",
          "description": "A central fire pit where ashes of ancestors are preserved. Covenant members can sometimes communicate with the dead through rituals performed here.",
          "interaction_type": "interact"
        },
        {
          "name": "The Exchange Circle",
          "description": "An open area where the monthly Possession Exchange ceremony takes place, redistributing all material goods among the community.",
          "interaction_type": "examine"
        },
        {
          "name": "Ash Walker Tents",
          "description": "Special tents where practitioners of Ash Walking temporarily transfer their consciousness to the Ashen plane.",
          "interaction_type": "examine"
        }
      ],
      "connections": [
        {
          "target": "echo_woods",
          "description": "A barely visible trail leading back to the Echo Woods.",
          "travel_time": 180,
          "requirements": []
        },
        {
          "target": "gray_veil",
          "description": "A spiritual pathway to a location in the Ashen plane, only accessible to those trained in Ash Walking.",
          "travel_time": 60,
          "requirements": [
            "ash_walking_knowledge"
          ]
        }
      ],
      "npcs": [
        "covenant_elder",
        "ash_walker",
        "memory_keeper"
      ]
    },
    "tempest_harbor": {
      "id": "tempest_harbor",
      "name": "Tempest Harbor",
      "description": "A temporary docking location for the Tempest Flotilla on the Nexus plane, only present during specific celestial alignments. The harbor consists of rapidly constructed floating platforms and swaying walkways, all designed to be disassembled quickly. The atmosphere is chaotic and festive, with constant trading, gambling, and storytelling.",
      "type": "harbor",
      "region": "Southern Nexus",
      "culture_id": "tempest",
      "population": 800,
      "culture_mix": {
        "tempest": 0.8,
        "concordant": 0.1,
        "verdant": 0.1
      },
      "features": [
        {
          "name": "The Flux Market",
          "description": "A chaotic marketplace where leadership and prices change daily, offering rare goods from the Tempest plane.",
          "interaction_type": "interact"
        },
        {
          "name": "Storm Binder's Pavilion",
          "description": "A large tent where skilled artisans capture storm essences in elaborate tattoo designs.",
          "interaction_type": "interact"
        },
        {
          "name": "The Opportunity Board",
          "description": "A constantly updated notice board listing current jobs, adventures, and opportunities throughout the planes.",
          "interaction_type": "examine"
        }
      ],
      "connections": [
        {
          "target": "harmonia",
          "description": "A southern road leading to the capital city of Harmonia.",
          "travel_time": 300,
          "requirements": []
        },
        {
          "target": "maelstrom_edge",
          "description": "A dangerous passage to the edge of the Tempest plane, only navigable during specific celestial alignments.",
          "travel_time": 240,
          "requirements": [
            "celestial_alignment",
            "tempest_navigation"
          ]
        }
      ],
      "npcs": [
        "flotilla_captain",
        "storm_binder",
        "probability_merchant"
      ]
    },
    "shifting_library": {
      "id": "shifting_library",
      "name": "The Shifting Library",
      "description": "A mysterious repository of knowledge that exists simultaneously in all planes. Different sections become accessible depending on which plane is currently dominant. The exterior appears as a modest stone building, but the interior contains seemingly endless halls of books, artifacts, and recordings from across all planes and time periods.",
      "type": "library",
      "region": "Planar Overlap",
      "culture_id": "",
      "population": 20,
      "culture_mix": {},
      "features": [
        {
          "name": "The Lexicant Hall",
          "description": "The central chamber where the enigmatic Lexicants—beings who can exist in multiple planes simultaneously—catalog and preserve knowledge.",
          "interaction_type": "examine"
        },
        {
          "name": "The Shifting Stacks",
          "description": "Endless rows of bookshelves that rearrange themselves based on planar influences, sometimes revealing previously inaccessible tomes.",
          "interaction_type": "interact"
        },
        {
          "name": "Pre-Shattering Archive",
          "description": "A heavily secured section containing fragmentary records from before The Shattering, only accessible during rare planar alignments.",
          "interaction_type": "examine"
        },
        {
          "name": "The Reading Nexus",
          "description": "A circular chamber with desks that automatically provide reference materials related to the researcher's current study.",
          "interaction_type": "use"
        }
      ],
      "connections": [
        {
          "target": "harmonia",
          "description": "The library's location relative to Harmonia changes based on planar alignments, but it's typically a day's journey.",
          "travel_time": 480,
          "requirements": [
            "library_authorization"
          ]
        }
      ],
      "npcs": [
        "head_lexicant",
        "knowledge_seeker",
        "forgotten_scholar"
      ]
    },
    "planar_bleed_zone": {
      "id": "planar_bleed_zone",
      "name": "The Convergence",
      "description": "A large area where multiple planes have permanently merged, creating a surreal landscape with elements from all planes coexisting in impossible ways. Flora and fauna have hybridized, and the laws of physics seem to vary from one meter to the next. Despite the dangers, researchers and resource gatherers frequent the area for its unique properties.",
      "type": "anomaly",
      "region": "Planar Border",
      "culture_id": "",
      "population": 50,
      "culture_mix": {},
      "features": [
        {
          "name": "Reality Fault",
          "description": "A visible crack in space where raw planar energy seeps through, causing unpredictable magical effects in the vicinity.",
          "interaction_type": "examine"
        },
        {
          "name": "Hybridization Gardens",
          "description": "A research station where Harmonic Order scientists study the unique hybrid flora and fauna that have evolved in the zone.",
          "interaction_type": "interact"
        },
        {
          "name": "Echo Chamber",
          "description": "A cave where sounds seem to echo from other planes and times, occasionally revealing useful information.",
          "interaction_type": "interact"
        },
        {
          "name": "Harvester Camp",
          "description": "A fortified encampment for those who gather the valuable resources that can only be found in Planar Bleed Zones.",
          "interaction_type": "interact"
        }
      ],
      "connections": [
        {
          "target": "echo_woods",
          "description": "A hazardous path through shifting terrain that eventually reaches more stable ground near the Echo Woods.",
          "travel_time": 600,
          "requirements": [
            "planar_protection"
          ]
        }
      ],
      "npcs": [
        "harmonic_researcher",
        "resource_harvester",
        "planar_hybrid"
      ]
    },
    "ghost_market": {
      "id": "ghost_market",
      "name": "The Ghost Market",
      "description": "A mysterious marketplace that appears only during specific Resonance Events. Run by enigmatic entities known as 'The Between,' it offers goods, services, and information from across all planes. The market materializes in different locations each time but is recognizable by its ethereal tents and the faint bell music that accompanies its appearance.",
      "type": "market",
      "region": "Variable",
      "culture_id": "",
      "population": 0,
      "culture_mix": {},
      "features": [
        {
          "name": "The Contract Circle",
          "description": "A central area where deals and contracts are formalized. Agreements made here are magically binding across all planes.",
          "interaction_type": "interact"
        },
        {
          "name": "Memory Exchange",
          "description": "A tent where memories can be bought, sold, or traded – sometimes willingly, sometimes not.",
          "interaction_type": "interact"
        },
        {
          "name": "Between Emporium",
          "description": "The largest structure in the market, selling impossible items that shouldn't exist in any single plane.",
          "interaction_type": "interact"
        },
        {
          "name": "Information Well",
          "description": "A literal well where visitors can ask questions and receive answers – for a price.",
          "interaction_type": "use"
        }
      ],
      "connections": [],
      "npcs": [
        "the_proprietor",
        "memory_merchant",
        "contract_binder"
      ]
    },
    "test_hub": {
      "id": "test_hub",
      "name": "Quest Test Hub",
      "description": "A developer test area used to quickly validate quest proofs (items, kills, visits, flags) in a controlled environment.",
      "type": "outpost",
      "region": "Dev",
      "culture_id": "concordant",
      "population": 0,
      "culture_mix": {},
      "features": [],
      "connections": [],
      "npcs": []
    }
  },
  "metadata": {
    "version": "1.0.0",
    "description": "Location definitions for the RPG game world"
  }
}
```

### File: config\items\origin_items.json

```json
[
  {
    "id": "academic_robes",
    "name": "Academic Robes",
    "description": "Formal robes of a scholar from the Resonance Academy, adorned with symbols of knowledge.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 1.5,
    "value": 40,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 1,
        "display_name": "Armor"
      },
      {
        "name": "intelligence_bonus_research",
        "value": 1,
        "display_name": "Research Intelligence"
      }
    ],
    "durability": 60,
    "tags": [
      "clothing",
      "armor",
      "academic",
      "scholar"
    ],
    "is_consumable": false,
    "is_stackable": false,
    "is_quest_item": false,
    "dice_roll_effects": []
  },
  {
    "id": "ancestral_ash_container",
    "name": "Ancestral Ash Container",
    "description": "A specially crafted container made from obsidian and silver, designed to safely hold and preserve sacred ancestral ashes.",
    "item_type": "container",
    "rarity": "rare",
    "weight": 0.5,
    "value": 400,
    "custom_properties": {
      "spiritual_attunement": "high",
      "preservation_quality": "excellent"
    },
    "tags": [
      "container",
      "cinderspawn",
      "ash",
      "ritual",
      "ancestral"
    ]
  },
  {
    "id": "ancestral_focus_crystal",
    "name": "Ancestral Focus Crystal",
    "description": "A crystal passed down through generations, used by elves to channel and focus magical energies.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 0.2,
    "value": 600,
    "is_equippable": true,
    "equip_slots": [
      "off_hand",
      "neck"
    ],
    "stats": [
      {
        "name": "spell_power_bonus",
        "value": 1,
        "display_name": "Spell Power"
      }
    ],
    "tags": [
      "tool",
      "magic_focus",
      "elven",
      "crystal",
      "ancestral"
    ]
  },
  {
    "id": "apprentice_robes",
    "name": "Apprentice Robes",
    "description": "Simple, functional robes identifying you as an apprentice of the Crystalline Enclave.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 1.0,
    "value": 25,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 1,
        "display_name": "Armor"
      }
    ],
    "durability": 40,
    "tags": [
      "clothing",
      "armor",
      "crystalline_consortium",
      "apprentice"
    ]
  },
  {
    "id": "ash-treated_clothing",
    "name": "Ash-Treated Clothing",
    "description": "Simple, durable clothing treated with sacred ashes for resilience and a faint connection to ancestral spirits. Common among the Ashen Covenant.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 2.0,
    "value": 20,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 1,
        "display_name": "Armor"
      },
      {
        "name": "fire_resistance",
        "value": 5,
        "display_name": "Fire Resistance",
        "is_percentage": true
      }
    ],
    "durability": 80,
    "tags": [
      "clothing",
      "armor",
      "ashen_covenant",
      "treated"
    ]
  },
  {
    "id": "battlefield_trophy",
    "name": "Battlefield Trophy",
    "description": "A memento taken from a significant past battle – perhaps a tooth, a banner fragment, or a broken weapon piece.",
    "item_type": "miscellaneous",
    "rarity": "common",
    "weight": 0.3,
    "value": 10,
    "tags": [
      "trophy",
      "memento",
      "battle"
    ]
  },
  {
    "id": "between_token",
    "name": "Between Token",
    "description": "A smooth, dark stone that feels cold to the touch. It occasionally whispers in an unknown tongue. Given by an entity from The Between.",
    "item_type": "miscellaneous",
    "rarity": "rare",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "custom_properties": {
      "function": "communication_conduit_the_between"
    },
    "tags": [
      "token",
      "quest_item",
      "ghost_market",
      "ethereal"
    ]
  },
  {
    "id": "blank_journal",
    "name": "Blank Journal",
    "description": "A high-quality, empty journal ready to be filled with notes and discoveries.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 0.6,
    "value": 12,
    "tags": [
      "tool",
      "writing",
      "notes"
    ]
  },
  {
    "id": "bottled_lightning",
    "name": "Bottled Lightning",
    "description": "A vial containing a swirling spark of contained lightning. Can be used as a light source or a volatile component.",
    "item_type": "miscellaneous",
    "rarity": "uncommon",
    "weight": 0.3,
    "value": 150,
    "is_consumable": true,
    "is_stackable": true,
    "stack_limit": 5,
    "custom_properties": {
      "light_duration_minutes": 10,
      "discharge_damage": "1d8_lightning_if_broken"
    },
    "tags": [
      "lightning",
      "consumable",
      "light_source",
      "component",
      "maelstri"
    ]
  },
  {
    "id": "calculation_crystals",
    "name": "Calculation Crystals",
    "description": "A set of precisely cut crystals used in Crystalline Consortium mathematics and Facet Magic.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.3,
    "value": 200,
    "custom_properties": {
      "attunement_required": true
    },
    "tags": [
      "tool",
      "crystalline_consortium",
      "magic_component",
      "mathematics"
    ]
  },
  {
    "id": "captain's_contract",
    "name": "Captain's Contract",
    "description": "A signed contract securing your services as a navigator for a trading vessel in Tempest Harbor.",
    "item_type": "document",
    "rarity": "common",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "contract",
      "quest_item",
      "tempest_harbor",
      "navigation"
    ]
  },
  {
    "id": "cataloging_tools",
    "name": "Cataloging Tools",
    "description": "A set of specialized tools for handling, examining, and indexing delicate texts and artifacts.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 0.8,
    "value": 60,
    "stats": [
      {
        "name": "investigation_bonus_texts",
        "value": 1,
        "display_name": "Text Investigation Bonus"
      }
    ],
    "tags": [
      "tool",
      "shifting_library",
      "research",
      "cataloging"
    ]
  },
  {
    "id": "clan_trade_contract",
    "name": "Clan Trade Contract (Template)",
    "description": "A formal contract template outlining terms for trade agreements on behalf of your dwarven clan.",
    "item_type": "document",
    "rarity": "uncommon",
    "weight": 0.2,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "contract",
      "dwarven",
      "trade",
      "quest_item"
    ]
  },
  {
    "id": "market_rumors_collection",
    "name": "Collection of Market Rumors",
    "description": "A bundle of notes, overheard conversations, and cryptic clues related to the Ghost Market and other illicit trade.",
    "item_type": "document",
    "rarity": "common",
    "weight": 0.4,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "notes",
      "rumors",
      "ghost_market",
      "quest_item"
    ]
  },
  {
    "id": "concealed_weapon",
    "name": "Concealed Dagger",
    "description": "A small, easily hidden dagger. Favored by those who prefer to remain unassuming.",
    "item_type": "weapon",
    "rarity": "common",
    "weight": 0.3,
    "value": 40,
    "is_equippable": true,
    "equip_slots": [
      "main_hand",
      "off_hand"
    ],
    "dice_roll_effects": [
      {
        "effect_type": "piercing",
        "dice_notation": "1d4-1"
      }
    ],
    "durability": 50,
    "tags": [
      "weapon",
      "dagger",
      "concealed",
      "stealth"
    ]
  },
  {
    "id": "consortium_authorization",
    "name": "Consortium Research Authorization",
    "description": "A high-level authorization grant from the Crystalline Consortium, permitting access to restricted data and locations.",
    "item_type": "key",
    "rarity": "rare",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "key",
      "crystalline_consortium",
      "authorization",
      "research"
    ]
  },
  {
    "id": "covenant_pendant",
    "name": "Covenant Pendant",
    "description": "A small, carved bone pendant bearing the symbol of the Ashen Covenant. It's said to ward off minor malevolent spirits.",
    "item_type": "accessory",
    "rarity": "common",
    "weight": 0.1,
    "value": 15,
    "is_equippable": true,
    "equip_slots": [
      "neck"
    ],
    "stats": [
      {
        "name": "willpower",
        "value": 1,
        "display_name": "Willpower Save Bonus"
      }
    ],
    "tags": [
      "amulet",
      "ashen_covenant",
      "spiritual"
    ]
  },
  {
    "id": "crystalline_implants",
    "name": "Crystalline Implants (Interface)",
    "description": "Subtle crystalline implants that allow a Prismal to interface with Consortium technology and enhance cognitive processing.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 0.0,
    "value": 0,
    "is_equippable": true,
    "equip_slots": [
      "head"
    ],
    "stats": [
      {
        "name": "data_processing_speed",
        "value": 2,
        "display_name": "Data Processing"
      },
      {
        "name": "mathematical_aptitude",
        "value": 1,
        "display_name": "Mathematical Aptitude"
      }
    ],
    "tags": [
      "implant",
      "tool",
      "prismal",
      "crystalline_consortium",
      "interface"
    ]
  },
  {
    "id": "diplomatic_credentials",
    "name": "Diplomatic Credentials",
    "description": "Official credentials identifying you as a diplomat of Harmonia, granting certain privileges and access.",
    "item_type": "document",
    "rarity": "common",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "credentials",
      "diplomacy",
      "harmonia",
      "quest_item"
    ]
  },
  {
    "id": "diplomatic_insignia",
    "name": "Diplomatic Insignia",
    "description": "A broach or pin signifying your status as an emissary from your people.",
    "item_type": "accessory",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 0,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "diplomacy_bonus",
        "value": 1,
        "display_name": "Diplomacy Bonus"
      }
    ],
    "tags": [
      "accessory",
      "insignia",
      "diplomacy"
    ]
  },
  {
    "id": "diplomatic_papers",
    "name": "Diplomatic Papers",
    "description": "Official documents identifying you as an envoy and outlining your mission.",
    "item_type": "document",
    "rarity": "common",
    "weight": 0.2,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "official",
      "diplomacy"
    ]
  },
  {
    "id": "ceremonial_flask",
    "name": "Dwarven Ceremonial Flask",
    "description": "An ornate flask, often filled with strong dwarven ale for rituals or important occasions.",
    "item_type": "container",
    "rarity": "uncommon",
    "weight": 0.7,
    "value": 120,
    "custom_properties": {
      "capacity_ml": 500,
      "material": "silver_inlaid_steel"
    },
    "tags": [
      "container",
      "flask",
      "dwarven",
      "ceremonial"
    ]
  },
  {
    "id": "dwarven_forge_hammer",
    "name": "Dwarven Forge Hammer",
    "description": "A masterfully crafted hammer, perfectly balanced for smithing. It bears ancient dwarven runes.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 5.0,
    "value": 800,
    "is_equippable": true,
    "equip_slots": [
      "main_hand"
    ],
    "stats": [
      {
        "name": "crafting_smithing_bonus",
        "value": 2,
        "display_name": "Smithing Bonus"
      }
    ],
    "dice_roll_effects": [
      {
        "effect_type": "physical_blunt_damage",
        "dice_notation": "1d6"
      }
    ],
    "durability": 200,
    "tags": [
      "tool",
      "weapon",
      "hammer",
      "dwarven",
      "crafting",
      "smithing"
    ]
  },
  {
    "id": "elven_crafted_robes",
    "name": "Elven Crafted Robes",
    "description": "Elegant robes woven with subtle patterns that shimmer in the light, offering surprising resilience.",
    "item_type": "armor",
    "rarity": "uncommon",
    "weight": 1.0,
    "value": 250,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 2,
        "display_name": "Armor"
      },
      {
        "name": "magic_resistance_minor",
        "value": 5,
        "display_name": "Minor Magic Resist",
        "is_percentage": true
      }
    ],
    "durability": 70,
    "tags": [
      "clothing",
      "armor",
      "elven",
      "magic"
    ]
  },
  {
    "id": "ember_renewal_tonic",
    "name": "Ember Renewal Tonic",
    "description": "A potent tonic that revitalizes a Cinderspawn's inner ember, hastening regeneration and enhancing flame-based abilities.",
    "item_type": "consumable",
    "rarity": "uncommon",
    "weight": 0.2,
    "value": 200,
    "is_consumable": true,
    "is_stackable": true,
    "stack_limit": 3,
    "stats": [
      {
        "name": "regeneration_boost",
        "value": 50,
        "display_name": "Regeneration Boost",
        "is_percentage": true
      },
      {
        "name": "flame_power_increase",
        "value": 2,
        "display_name": "Flame Power"
      },
      {
        "name": "duration_minutes",
        "value": 10,
        "display_name": "Duration (Minutes)"
      }
    ],
    "tags": [
      "potion",
      "consumable",
      "cinderspawn",
      "buff",
      "fire"
    ]
  },
  {
    "id": "emergency_beacon",
    "name": "Emergency Beacon",
    "description": "A single-use beacon that, when activated, sends a distress signal detectable across short planar distances.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.3,
    "value": 150,
    "is_consumable": true,
    "is_stackable": true,
    "stack_limit": 3,
    "tags": [
      "tool",
      "emergency",
      "signal",
      "consumable"
    ]
  },
  {
    "id": "enchanted_quill",
    "name": "Enchanted Quill",
    "description": "A quill that writes with self-replenishing ink and whose script remains stable across planar shifts.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 220,
    "tags": [
      "tool",
      "writing",
      "magic",
      "shifting_library"
    ]
  },
  {
    "id": "environmental_adaptation_tonic",
    "name": "Environmental Adaptation Tonic",
    "description": "A Mycoran tonic that temporarily enhances the imbiber's ability to adapt to hostile environments.",
    "item_type": "consumable",
    "rarity": "uncommon",
    "weight": 0.2,
    "value": 180,
    "is_consumable": true,
    "is_stackable": true,
    "stack_limit": 3,
    "stats": [
      {
        "name": "environmental_resistance_boost",
        "value": 15,
        "display_name": "Environmental Resist Boost",
        "is_percentage": true
      },
      {
        "name": "duration_minutes",
        "value": 30,
        "display_name": "Duration (Minutes)"
      }
    ],
    "tags": [
      "potion",
      "consumable",
      "mycora",
      "adaptation",
      "buff"
    ]
  },
  {
    "id": "explorer_clothing",
    "name": "Explorer's Clothing",
    "description": "Durable, multi-layered clothing designed for protection against the elements and rough terrain.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 3.0,
    "value": 40,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 2,
        "display_name": "Armor"
      },
      {
        "name": "cold_resistance_minor",
        "value": 5,
        "display_name": "Minor Cold Resistance",
        "is_percentage": true
      }
    ],
    "durability": 100,
    "tags": [
      "clothing",
      "armor",
      "explorer",
      "survival"
    ]
  },
  {
    "id": "faceted_focusing_lens",
    "name": "Faceted Focusing Lens",
    "description": "A crystal lens with numerous facets, used to focus mental energies or manipulate light for Crystalline magic.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.2,
    "value": 180,
    "is_equippable": true,
    "equip_slots": [
      "off_hand"
    ],
    "stats": [
      {
        "name": "magic_attack",
        "value": 1,
        "display_name": "Spell Focus"
      }
    ],
    "tags": [
      "tool",
      "magic_focus",
      "crystalline_consortium",
      "lens"
    ]
  },
  {
    "id": "faceted_light_source",
    "name": "Faceted Light Source",
    "description": "A Prismal light source that emits focused beams of coherent light, useful for analysis or as a weak cutting tool.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.4,
    "value": 300,
    "custom_properties": {
      "light_intensity_lumens": 500,
      "focus_modes": [
        "wide_beam",
        "narrow_beam",
        "pulse"
      ]
    },
    "tags": [
      "tool",
      "prismal",
      "light_source",
      "analysis"
    ]
  },
  {
    "id": "family_heirloom",
    "name": "Family Heirloom",
    "description": "A small, worn trinket passed down through your family. Its true value might be sentimental, or perhaps something more.",
    "item_type": "miscellaneous",
    "rarity": "common",
    "weight": 0.1,
    "value": 5,
    "is_quest_item": true,
    "tags": [
      "trinket",
      "heirloom",
      "sentimental",
      "quest_item"
    ]
  },
  {
    "id": "family_signet_ring",
    "name": "Family Signet Ring",
    "description": "A ring bearing the crest of a fallen noble family. It might still carry some influence, or attract unwanted attention.",
    "item_type": "accessory",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 120,
    "is_equippable": true,
    "equip_slots": [
      "finger_1",
      "finger_2",
      "finger_3",
      "finger_4",
      "finger_5",
      "finger_6",
      "finger_7",
      "finger_8",
      "finger_9",
      "finger_10"
    ],
    "stats": [
      {
        "name": "social_influence_minor",
        "value": 1,
        "display_name": "Minor Social Influence"
      }
    ],
    "tags": [
      "ring",
      "accessory",
      "noble",
      "signet"
    ]
  },
  {
    "id": "fine_clothes_(worn)",
    "name": "Fine Clothes (Worn)",
    "description": "Once elegant attire, now showing signs of wear and travel. Still better than common rags.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 1.8,
    "value": 35,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 1,
        "display_name": "Armor"
      }
    ],
    "durability": 40,
    "current_durability": 25,
    "tags": [
      "clothing",
      "armor",
      "noble",
      "worn"
    ]
  },
  {
    "id": "fire_striker",
    "name": "Fire Striker",
    "description": "A reliable flint and steel for starting fires. Essential for survival and Covenant rituals.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 0.3,
    "value": 5,
    "is_equippable": false,
    "is_consumable": false,
    "is_stackable": false,
    "tags": [
      "tool",
      "fire",
      "survival"
    ]
  },
  {
    "id": "flame-resistant_wrappings",
    "name": "Flame-Resistant Wrappings",
    "description": "Thick, specially treated cloth wrappings that offer significant protection against fire and extreme heat.",
    "item_type": "armor",
    "rarity": "uncommon",
    "weight": 0.8,
    "value": 120,
    "is_equippable": true,
    "equip_slots": [
      "wrists",
      "legs",
      "chest"
    ],
    "stats": [
      {
        "name": "fire_resistance",
        "value": 25,
        "display_name": "Fire Resistance",
        "is_percentage": true
      }
    ],
    "durability": 90,
    "tags": [
      "clothing",
      "armor",
      "cinderspawn",
      "fire_protection"
    ]
  },
  {
    "id": "forged_documents",
    "name": "Forged Documents",
    "description": "Passably crafted travel papers and identification that might fool a cursory inspection.",
    "item_type": "document",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 150,
    "custom_properties": {
      "forgery_quality": "average"
    },
    "tags": [
      "document",
      "forgery",
      "deception"
    ]
  },
  {
    "id": "formal_attire",
    "name": "Formal Attire",
    "description": "Well-made clothing suitable for diplomatic functions and formal occasions.",
    "item_type": "armor",
    "rarity": "uncommon",
    "weight": 2.5,
    "value": 150,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "charisma_bonus_social",
        "value": 1,
        "display_name": "Social Charisma"
      }
    ],
    "durability": 50,
    "tags": [
      "clothing",
      "armor",
      "formal",
      "diplomacy"
    ]
  },
  {
    "id": "formal_negotiation_attire",
    "name": "Formal Negotiation Attire",
    "description": "Impeccably tailored attire designed to convey authority and respect during high-stakes negotiations.",
    "item_type": "armor",
    "rarity": "uncommon",
    "weight": 2.0,
    "value": 200,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "persuasion_bonus",
        "value": 1,
        "display_name": "Persuasion Bonus"
      },
      {
        "name": "social_standing_perception",
        "value": 2,
        "display_name": "Perceived Social Standing"
      }
    ],
    "durability": 60,
    "tags": [
      "clothing",
      "armor",
      "formal",
      "diplomacy",
      "negotiation"
    ]
  },
  {
    "id": "geometric_calculation_device",
    "name": "Geometric Calculation Device",
    "description": "A complex Prismal device used for advanced geometric and multidimensional calculations.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 0.8,
    "value": 900,
    "stats": [
      {
        "name": "calculation_accuracy_bonus",
        "value": 3,
        "display_name": "Calculation Accuracy"
      }
    ],
    "tags": [
      "tool",
      "prismal",
      "crystalline_consortium",
      "mathematics",
      "calculation"
    ]
  },
  {
    "id": "market_trinket",
    "name": "Ghost Market Trinket",
    "description": "A small, oddly shaped trinket of unknown material. It hums faintly when Resonance Events are near.",
    "item_type": "accessory",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 70,
    "is_equippable": true,
    "equip_slots": [
      "trinket_1",
      "trinket_2"
    ],
    "stats": [
      {
        "name": "resonance_detection",
        "value": 1,
        "display_name": "Resonance Detection"
      }
    ],
    "tags": [
      "trinket",
      "accessory",
      "ghost_market",
      "planar"
    ]
  },
  {
    "id": "gift_package_for_ambassadors",
    "name": "Gift Package for Ambassadors",
    "description": "A carefully selected assortment of gifts representing Harmonian culture, intended for presentation to foreign dignitaries.",
    "item_type": "miscellaneous",
    "rarity": "uncommon",
    "weight": 2.5,
    "value": 300,
    "is_stackable": false,
    "custom_properties": {
      "contents_description": "Rare seeds, crystal prism, pure water vial"
    },
    "tags": [
      "gift",
      "diplomacy",
      "harmonia",
      "trade_good"
    ]
  },
  {
    "id": "guard_uniform",
    "name": "Guard Uniform",
    "description": "Standard issue uniform of the Harmonic Guard, offering decent protection and clear identification.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 10.0,
    "value": 200,
    "is_equippable": true,
    "equip_slots": [
      "chest",
      "legs",
      "head"
    ],
    "stats": [
      {
        "name": "armor",
        "value": 6,
        "display_name": "Armor"
      }
    ],
    "durability": 130,
    "tags": [
      "armor",
      "uniform",
      "harmonic_guard"
    ]
  },
  {
    "id": "haggler's_pendant",
    "name": "Haggler's Pendant",
    "description": "A pendant that subtly influences negotiations in the wearer's favor. Or so the seller claimed.",
    "item_type": "accessory",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 200,
    "is_equippable": true,
    "equip_slots": [
      "neck"
    ],
    "stats": [
      {
        "name": "bargaining_bonus",
        "value": 1,
        "display_name": "Bargaining Bonus"
      }
    ],
    "tags": [
      "pendant",
      "accessory",
      "trade",
      "persuasion"
    ]
  },
  {
    "id": "harmonian_tattoo_kit",
    "name": "Harmonian Tattoo Kit",
    "description": "A set of fine needles, vibrant inks, and resonance-infused balms used for creating Attunement tattoos in Harmonia.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.5,
    "value": 150,
    "tags": [
      "tool",
      "harmonia",
      "attunement",
      "artisan"
    ]
  },
  {
    "id": "heavy_weapon",
    "name": "Heavy Orcish Cleaver",
    "description": "A large, brutally effective cleaver favored by Orcish warriors. Requires considerable strength to wield effectively.",
    "item_type": "weapon",
    "rarity": "uncommon",
    "weight": 7.0,
    "value": 450,
    "is_equippable": true,
    "equip_slots": [
      "two_hand"
    ],
    "stats": [
      {
        "name": "strength_requirement",
        "value": 15,
        "display_name": "Strength Req."
      }
    ],
    "dice_roll_effects": [
      {
        "effect_type": "slashing",
        "dice_notation": "1d12"
      }
    ],
    "durability": 160,
    "tags": [
      "weapon",
      "axe",
      "orcish",
      "heavy",
      "two-handed"
    ]
  },
  {
    "id": "hidden_coin_purse",
    "name": "Hidden Coin Purse",
    "description": "A small, discreet coin purse designed to be easily concealed within clothing.",
    "item_type": "container",
    "rarity": "common",
    "weight": 0.1,
    "value": 15,
    "custom_properties": {
      "capacity_coins": 100,
      "concealment_bonus": 2
    },
    "tags": [
      "container",
      "stealth",
      "currency"
    ]
  },
  {
    "id": "hunting_knife",
    "name": "Hunting Knife",
    "description": "A sturdy knife, useful for skinning game, preparing food, or as a last resort weapon.",
    "item_type": "weapon",
    "rarity": "common",
    "weight": 0.4,
    "value": 30,
    "is_equippable": true,
    "equip_slots": [
      "main_hand",
      "off_hand"
    ],
    "stats": [],
    "dice_roll_effects": [
      {
        "effect_type": "piercing",
        "dice_notation": "1d4-1"
      }
    ],
    "durability": 80,
    "tags": [
      "weapon",
      "knife",
      "tool",
      "survival"
    ]
  },
  {
    "id": "journal",
    "name": "Journal",
    "description": "A blank, sturdy journal and a charcoal pencil for recording observations and notes.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 0.5,
    "value": 10,
    "tags": [
      "tool",
      "writing",
      "notes"
    ]
  },
  {
    "id": "assistant_robes",
    "name": "Library Assistant Robes",
    "description": "Simple, yet well-made robes worn by assistants at the Shifting Library. They offer minor protection against ambient magical energies.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 1.2,
    "value": 30,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 1,
        "display_name": "Armor"
      },
      {
        "name": "magic_resistance_minor",
        "value": 2,
        "display_name": "Minor Magic Resist",
        "is_percentage": true
      }
    ],
    "durability": 50,
    "tags": [
      "clothing",
      "armor",
      "shifting_library",
      "assistant"
    ]
  },
  {
    "id": "library_authorization",
    "name": "Library Authorization",
    "description": "A crystalline token that grants access to common areas and basic resources within the Shifting Library.",
    "item_type": "key",
    "rarity": "common",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "key",
      "shifting_library",
      "authorization"
    ]
  },
  {
    "id": "living_garments",
    "name": "Living Garments",
    "description": "Clothing woven from living plant fibers that subtly adapt to the wearer and environment. A hallmark of Mycora design.",
    "item_type": "armor",
    "rarity": "uncommon",
    "weight": 0.5,
    "value": 300,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 2,
        "display_name": "Armor"
      },
      {
        "name": "environmental_adaptation",
        "value": 1,
        "display_name": "Environmental Adaptation"
      }
    ],
    "durability": 80,
    "tags": [
      "clothing",
      "armor",
      "mycora",
      "living",
      "adaptive"
    ]
  },
  {
    "id": "bread",
    "name": "Loaf of Bread",
    "template_id": "template_food_bread",
    "description": "A simple loaf of bread that provides sustenance.",
    "item_type": "consumable",
    "rarity": "common",
    "weight": 0.5,
    "value": 5,
    "is_consumable": true,
    "is_stackable": true,
    "stack_limit": 5,
    "stats": [
      {
        "name": "hunger_restore",
        "value": 15
      },
      {
        "name": "healing",
        "value": 5
      }
    ],
    "tags": [
      "food",
      "consumable"
    ]
  },
  {
    "id": "lucky_coin",
    "name": "Lucky Coin",
    "description": "A mundane coin that its owner believes brings good fortune. Its true power is likely psychological.",
    "item_type": "miscellaneous",
    "rarity": "common",
    "weight": 0.01,
    "value": 1,
    "stats": [
      {
        "name": "luck_subtle",
        "value": 0.1,
        "display_name": "Subtle Luck (Placebo)"
      }
    ],
    "tags": [
      "coin",
      "trinket",
      "luck",
      "sentimental"
    ]
  },
  {
    "id": "lunch_bundle",
    "name": "Lunch Bundle",
    "description": "A piece of fruit, some dried meat, and a small waterskin wrapped in cloth.",
    "item_type": "consumable",
    "rarity": "common",
    "weight": 0.7,
    "value": 10,
    "is_consumable": true,
    "is_stackable": false,
    "custom_properties": {
      "contains": "fruit, dried_meat, waterskin_1_charge"
    },
    "stats": [
      {
        "name": "hunger_restore",
        "value": 20
      },
      {
        "name": "healing",
        "value": 8
      }
    ],
    "tags": [
      "food",
      "consumable",
      "bundle"
    ]
  },
  {
    "id": "master_crafting_tools",
    "name": "Master Crafting Tools",
    "description": "A comprehensive set of high-quality tools for various crafts, kept in a sturdy leather roll.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 3.0,
    "value": 650,
    "stats": [
      {
        "name": "crafting_general_bonus",
        "value": 1,
        "display_name": "General Crafting Bonus"
      }
    ],
    "tags": [
      "tool",
      "crafting",
      "masterwork"
    ]
  },
  {
    "id": "mercenary_contract",
    "name": "Mercenary Contract",
    "description": "A binding contract detailing the terms of your employment, payment, and objectives for the current assignment.",
    "item_type": "document",
    "rarity": "common",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "contract",
      "quest_item",
      "mercenary"
    ]
  },
  {
    "id": "metal_samples",
    "name": "Metal Samples",
    "description": "Small ingots and pieces of various rare metals and alloys from your clan's mines.",
    "item_type": "material",
    "rarity": "uncommon",
    "weight": 2.0,
    "value": 400,
    "is_stackable": true,
    "stack_limit": 10,
    "tags": [
      "material",
      "metal",
      "dwarven",
      "trade_good",
      "crafting"
    ]
  },
  {
    "id": "multi-planar_currency",
    "name": "Multi-Planar Currency Pouch",
    "description": "A pouch containing a mix of currencies from various planes, useful for interplanar trade.",
    "item_type": "treasure",
    "rarity": "uncommon",
    "weight": 0.5,
    "value": 1000,
    "custom_properties": {
      "contents_description": "Mixed coins from Nexus, Verdant, Ashen, Crystalline, Tempest planes"
    },
    "tags": [
      "currency",
      "treasure",
      "planar",
      "trade_good"
    ]
  },
  {
    "id": "multidimensional_mapping_tools",
    "name": "Multidimensional Mapping Tools",
    "description": "A set of specialized tools for charting and navigating spaces with non-Euclidean or shifting geometries.",
    "item_type": "tool",
    "rarity": "epic",
    "weight": 1.5,
    "value": 1200,
    "tags": [
      "tool",
      "prismal",
      "mapping",
      "planar",
      "dimensional"
    ]
  },
  {
    "id": "notebook",
    "name": "Notebook",
    "description": "A well-made notebook for recording thoughts, observations, or calculations.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 0.4,
    "value": 8,
    "tags": [
      "tool",
      "writing",
      "notes"
    ]
  },
  {
    "id": "old_map",
    "name": "Old Map",
    "description": "A hand-drawn map given to you by a mysterious traveler, showing unfamiliar lands and cryptic symbols.",
    "item_type": "document",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "map",
      "quest_item",
      "adventure"
    ]
  },
  {
    "id": "ornate_dagger",
    "name": "Ornate Dagger",
    "description": "A finely crafted dagger, more decorative than practical, but still sharp. A reminder of a wealthier past.",
    "item_type": "weapon",
    "rarity": "uncommon",
    "weight": 0.6,
    "value": 100,
    "is_equippable": true,
    "equip_slots": [
      "main_hand",
      "off_hand"
    ],
    "stats": [],
    "dice_roll_effects": [
      {
        "effect_type": "piercing",
        "dice_notation": "1d4"
      }
    ],
    "durability": 60,
    "tags": [
      "weapon",
      "dagger",
      "ornate",
      "noble"
    ]
  },
  {
    "id": "partial_armor_set",
    "name": "Partial Plate Armor",
    "description": "A mismatched set of plate armor pieces, offering good protection for vital areas. Likely scavenged or repaired.",
    "item_type": "armor",
    "rarity": "uncommon",
    "weight": 18.0,
    "value": 300,
    "is_equippable": true,
    "equip_slots": [
      "chest",
      "shoulders"
    ],
    "stats": [
      {
        "name": "armor",
        "value": 10,
        "display_name": "Armor"
      }
    ],
    "durability": 140,
    "tags": [
      "armor",
      "plate",
      "heavy",
      "mismatched"
    ]
  },
  {
    "id": "partially_empty_memory_vial",
    "name": "Partially Empty Memory Vial",
    "description": "A crystal vial, cool to the touch, containing a swirling, faintly luminous mist. It feels like a part of you is missing when you hold it.",
    "item_type": "miscellaneous",
    "rarity": "rare",
    "weight": 0.2,
    "value": 0,
    "is_quest_item": true,
    "custom_properties": {
      "content": "fragmented_player_memories"
    },
    "tags": [
      "vial",
      "quest_item",
      "memory",
      "ghost_market",
      "ethereal"
    ]
  },
  {
    "id": "pilgrimage_map",
    "name": "Pilgrimage Map",
    "description": "A map charted on fire-resistant hide, marking known sacred flame sites across various planes.",
    "item_type": "document",
    "rarity": "uncommon",
    "weight": 0.2,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "map",
      "cinderspawn",
      "pilgrimage",
      "quest_item"
    ]
  },
  {
    "id": "planar_map",
    "name": "Planar Map Fragment",
    "description": "A piece of an old map showing routes between Nexus and other, stranger planes. Some markings are unfamiliar.",
    "item_type": "document",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 50,
    "tags": [
      "document",
      "map",
      "planar",
      "navigation"
    ]
  },
  {
    "id": "planar_protection_amulet",
    "name": "Planar Protection Amulet",
    "description": "An amulet issued to those venturing into unstable planar regions, offering some resistance to harmful energies.",
    "item_type": "accessory",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 280,
    "is_equippable": true,
    "equip_slots": [
      "neck"
    ],
    "stats": [
      {
        "name": "planar_hazard_resistance",
        "value": 10,
        "display_name": "Planar Hazard Resist",
        "is_percentage": true
      }
    ],
    "tags": [
      "amulet",
      "accessory",
      "protection",
      "planar"
    ]
  },
  {
    "id": "planar_protection_suit",
    "name": "Planar Protection Suit",
    "description": "A specialized suit designed to offer protection against moderate levels of hazardous planar energies and environmental effects.",
    "item_type": "armor",
    "rarity": "uncommon",
    "weight": 5.0,
    "value": 400,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 3,
        "display_name": "Armor"
      },
      {
        "name": "planar_damage_resistance",
        "value": 10,
        "display_name": "Planar Damage Resist",
        "is_percentage": true
      }
    ],
    "durability": 120,
    "tags": [
      "armor",
      "protection",
      "planar",
      "research"
    ]
  },
  {
    "id": "portable_writing_desk",
    "name": "Portable Writing Desk",
    "description": "A small, foldable desk with compartments for ink, quills, and paper.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 3.0,
    "value": 90,
    "tags": [
      "tool",
      "writing",
      "academic",
      "portable"
    ]
  },
  {
    "id": "precision_measuring_tools",
    "name": "Precision Measuring Tools",
    "description": "A set of fine calipers, rulers, and levels for accurate measurement in research.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 1.0,
    "value": 55,
    "tags": [
      "tool",
      "research",
      "measurement"
    ]
  },
  {
    "id": "precision_tools",
    "name": "Precision Tools",
    "description": "A kit of fine tools for delicate work, often used by Consortium artisans and researchers.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 0.7,
    "value": 75,
    "stats": [
      {
        "name": "crafting_fine_bonus",
        "value": 1,
        "display_name": "Fine Crafting Bonus"
      }
    ],
    "tags": [
      "tool",
      "crafting",
      "research",
      "crystalline_consortium"
    ]
  },
  {
    "id": "preserved_provisions",
    "name": "Preserved Elven Provisions",
    "description": "Lightweight, nutrient-rich food prepared using elven preservation techniques. Lasts for a long time.",
    "item_type": "consumable",
    "rarity": "uncommon",
    "weight": 1.0,
    "value": 50,
    "is_consumable": true,
    "is_stackable": true,
    "stack_limit": 3,
    "custom_properties": {
      "days_of_sustenance_efficient": 5
    },
    "stats": [
      {
        "name": "hunger_restore_efficient",
        "value": 25
      }
    ],
    "tags": [
      "food",
      "consumable",
      "elven",
      "survival",
      "preserved"
    ]
  },
  {
    "id": "probability_dice",
    "name": "Probability Dice",
    "description": "A set of strangely weighted dice that seem to favor certain outcomes. Used by Tempest Flotilla gamblers.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 300,
    "custom_properties": {
      "luck_influence": "minor_positive_bias"
    },
    "tags": [
      "tool",
      "gambling",
      "tempest_flotilla",
      "chance"
    ]
  },
  {
    "id": "protection_talisman",
    "name": "Protection Talisman (Mercenary)",
    "description": "A rugged talisman, often carried by mercenaries, said to ward off ill luck and minor curses.",
    "item_type": "accessory",
    "rarity": "common",
    "weight": 0.2,
    "value": 80,
    "is_equippable": true,
    "equip_slots": [
      "neck"
    ],
    "stats": [
      {
        "name": "save_bonus_minor_curses",
        "value": 1,
        "display_name": "Curse Resist (Minor)"
      }
    ],
    "tags": [
      "talisman",
      "accessory",
      "protection",
      "luck"
    ]
  },
  {
    "id": "protective_charm",
    "name": "Protective Charm (Anti-Ethereal)",
    "description": "A small charm said to offer minor protection against ethereal entities and influences from The Between.",
    "item_type": "accessory",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 220,
    "is_equippable": true,
    "equip_slots": [
      "trinket_1",
      "trinket_2"
    ],
    "stats": [
      {
        "name": "ethereal_resistance",
        "value": 5,
        "display_name": "Ethereal Resistance",
        "is_percentage": true
      }
    ],
    "tags": [
      "charm",
      "accessory",
      "protection",
      "ethereal",
      "ghost_market"
    ]
  },
  {
    "id": "rations_pack",
    "name": "Rations Pack (3 Days)",
    "description": "A pack containing enough preserved food and water for three days of travel.",
    "item_type": "consumable",
    "rarity": "common",
    "weight": 2.0,
    "value": 25,
    "is_consumable": true,
    "is_stackable": false,
    "custom_properties": {
      "days_of_sustenance": 3
    },
    "stats": [
      {
        "name": "hunger_restore_full_day",
        "value": 3
      }
    ],
    "tags": [
      "food",
      "consumable",
      "survival",
      "rations"
    ]
  },
  {
    "id": "reality_anchor",
    "name": "Reality Anchor (Personal)",
    "description": "A device that creates a small field of stabilized reality, offering protection against minor spatial distortions.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 1.2,
    "value": 700,
    "custom_properties": {
      "field_radius_meters": 1,
      "stability_rating": 3
    },
    "tags": [
      "tool",
      "planar",
      "protection",
      "research"
    ]
  },
  {
    "id": "recording_crystal",
    "name": "Recording Crystal",
    "description": "A crystal that passively records ambient sounds and subtle planar energies. Glows faintly when active.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.3,
    "value": 250,
    "custom_properties": {
      "storage_capacity_hours": 24,
      "sensitivity": "medium"
    },
    "tags": [
      "tool",
      "research",
      "planar",
      "crystal",
      "recording"
    ]
  },
  {
    "id": "research_notes",
    "name": "Research Notes",
    "description": "A collection of notes, theories, and references related to your current field of study.",
    "item_type": "document",
    "rarity": "common",
    "weight": 0.8,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "notes",
      "research",
      "academic"
    ]
  },
  {
    "id": "researcher_equipment",
    "name": "Researcher's Field Kit",
    "description": "A collection of tools for field research: sample bags, measuring devices, a multi-tool, and basic first aid.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 2.5,
    "value": 80,
    "custom_properties": {
      "contents_summary": "sample_bags, measuring_tape, multi_tool, first_aid_basics"
    },
    "tags": [
      "tool",
      "research",
      "kit",
      "field_work"
    ]
  },
  {
    "id": "resonance_amulet",
    "name": "Resonance Amulet",
    "description": "An amulet that hums faintly, designed to help stabilize its wearer during minor Resonance Events.",
    "item_type": "accessory",
    "rarity": "common",
    "weight": 0.1,
    "value": 100,
    "is_equippable": true,
    "equip_slots": [
      "neck"
    ],
    "stats": [
      {
        "name": "resonance_stability",
        "value": 5,
        "display_name": "Resonance Stability"
      }
    ],
    "tags": [
      "amulet",
      "harmonia",
      "planar",
      "protection"
    ]
  },
  {
    "id": "resonance_detector",
    "name": "Resonance Detector",
    "description": "A device that hums and glows in the presence of planar resonance or magical energies.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.7,
    "value": 350,
    "stats": [
      {
        "name": "perception_magic",
        "value": 2,
        "display_name": "Magic Perception"
      }
    ],
    "tags": [
      "tool",
      "magic_detection",
      "planar",
      "research"
    ]
  },
  {
    "id": "resonance_journal",
    "name": "Resonance Journal",
    "description": "A journal specifically designed to record observations of planar resonance and magical phenomena.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.6,
    "value": 80,
    "tags": [
      "tool",
      "writing",
      "research",
      "planar",
      "magic"
    ]
  },
  {
    "id": "ritual_dagger",
    "name": "Ritual Dagger",
    "description": "A ceremonial dagger, sharp and well-balanced, used by the Ashen Covenant in their rites. It feels strangely warm to the touch.",
    "item_type": "weapon",
    "rarity": "uncommon",
    "weight": 0.5,
    "value": 75,
    "is_equippable": true,
    "equip_slots": [
      "main_hand",
      "off_hand"
    ],
    "stats": [
      {
        "name": "melee_attack",
        "value": 1,
        "display_name": "Attack Bonus"
      }
    ],
    "dice_roll_effects": [
      {
        "effect_type": "piercing",
        "dice_notation": "1d6",
        "description": "Base weapon damage"
      }
    ],
    "durability": 70,
    "tags": [
      "weapon",
      "dagger",
      "ritual",
      "ashen_covenant"
    ]
  },
  {
    "id": "ritual_igniter",
    "name": "Ritual Igniter",
    "description": "A Cinderspawn tool that can create a spark of intense, spiritually attuned flame, used to light sacred fires.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 0.3,
    "value": 350,
    "custom_properties": {
      "uses_per_day": 3,
      "flame_purity": "high"
    },
    "tags": [
      "tool",
      "cinderspawn",
      "fire",
      "ritual"
    ]
  },
  {
    "id": "sample_case_of_goods",
    "name": "Sample Case of Goods",
    "description": "A sturdy case containing a curated selection of exotic goods for showcasing to potential buyers.",
    "item_type": "container",
    "rarity": "common",
    "weight": 3.0,
    "value": 50,
    "custom_properties": {
      "max_item_showcase": 10,
      "security_level": "basic"
    },
    "tags": [
      "container",
      "trade",
      "sample_case"
    ]
  },
  {
    "id": "sealed_letter_of_introduction",
    "name": "Sealed Letter of Introduction",
    "description": "A letter addressed to an influential figure, sealed with an unbroken noble crest.",
    "item_type": "document",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "letter",
      "quest_item",
      "introduction"
    ]
  },
  {
    "id": "sealed_message",
    "name": "Sealed Message",
    "description": "A message scroll sealed with an unfamiliar sigil. Its contents are unknown.",
    "item_type": "document",
    "rarity": "common",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "message",
      "quest_item",
      "sealed"
    ]
  },
  {
    "id": "sealed_orders",
    "name": "Sealed Orders",
    "description": "Official military orders, sealed with the mark of a high-ranking Harmonic Guard officer.",
    "item_type": "document",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "orders",
      "quest_item",
      "military"
    ]
  },
  {
    "id": "seed_vault",
    "name": "Seed Vault",
    "description": "A specially prepared container holding a diverse collection of rare and adaptable seeds from the Verdant plane.",
    "item_type": "container",
    "rarity": "rare",
    "weight": 1.0,
    "value": 500,
    "custom_properties": {
      "preservation_field_active": true,
      "seed_variety_count": 50
    },
    "tags": [
      "container",
      "seeds",
      "mycora",
      "verdant_plane",
      "preservation"
    ]
  },
  {
    "id": "simple_clothing",
    "name": "Simple Clothing",
    "description": "Basic, practical clothing suitable for everyday wear in Harmonia.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 1.5,
    "value": 10,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 1,
        "display_name": "Armor"
      }
    ],
    "durability": 60,
    "tags": [
      "clothing",
      "armor",
      "commoner"
    ]
  },
  {
    "id": "simple_tool",
    "name": "Simple Tool",
    "description": "A basic tool related to your former trade (e.g., a hammer, a lute, a farming hoe).",
    "item_type": "tool",
    "rarity": "common",
    "weight": 1.0,
    "value": 8,
    "custom_properties": {
      "tool_type": "generic_trade_tool"
    },
    "tags": [
      "tool",
      "commoner",
      "trade_tool"
    ]
  },
  {
    "id": "small_pouch_of_ancestral_ash",
    "name": "Small Pouch of Ancestral Ash",
    "description": "A leather pouch containing a mixture of sacred ashes from revered ancestors of the Ashen Covenant. Used in rituals and for guidance.",
    "item_type": "miscellaneous",
    "rarity": "uncommon",
    "weight": 0.2,
    "value": 50,
    "is_equippable": false,
    "is_consumable": false,
    "is_stackable": false,
    "is_quest_item": true,
    "tags": [
      "ritual_component",
      "ashen_covenant",
      "spiritual",
      "ash"
    ]
  },
  {
    "id": "small_pouch_of_seeds",
    "name": "Small Pouch of Seeds",
    "description": "A collection of various seeds from your homeland, perhaps for trade or study.",
    "item_type": "miscellaneous",
    "rarity": "common",
    "weight": 0.2,
    "value": 20,
    "is_stackable": true,
    "stack_limit": 50,
    "tags": [
      "seeds",
      "nature",
      "trade_good"
    ]
  },
  {
    "id": "small_purse_of_coins",
    "name": "Small Purse of Coins",
    "description": "A leather purse containing a modest amount of mixed currency.",
    "item_type": "treasure",
    "rarity": "common",
    "weight": 0.3,
    "value": 500,
    "is_stackable": false,
    "custom_properties": {
      "contains_copper": 500
    },
    "tags": [
      "currency",
      "container",
      "treasure"
    ]
  },
  {
    "id": "small_tent",
    "name": "Small Tent",
    "description": "A one-person tent, lightweight and easy to set up, providing shelter from the elements.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 2.5,
    "value": 60,
    "custom_properties": {
      "capacity": 1,
      "shelter_rating": 5
    },
    "tags": [
      "tool",
      "shelter",
      "camping",
      "survival"
    ]
  },
  {
    "id": "small_trading_goods",
    "name": "Small Trading Goods",
    "description": "A small bundle of assorted goods suitable for minor trades, like spices, trinkets, or common tools.",
    "item_type": "treasure",
    "rarity": "common",
    "weight": 1.0,
    "value": 100,
    "is_stackable": false,
    "tags": [
      "trade_good",
      "bundle",
      "miscellaneous"
    ]
  },
  {
    "id": "specimen_containers",
    "name": "Specimen Containers",
    "description": "A set of reinforced, sealable containers for collecting and preserving biological or energetic samples.",
    "item_type": "container",
    "rarity": "common",
    "weight": 1.0,
    "value": 30,
    "custom_properties": {
      "capacity_units": 10,
      "preservation_level": "medium"
    },
    "tags": [
      "container",
      "research",
      "sample_collection"
    ]
  },
  {
    "id": "spore_collection_kit",
    "name": "Spore Collection Kit",
    "description": "Tools for safely collecting, identifying, and preserving various types of fungal spores.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 0.6,
    "value": 90,
    "tags": [
      "tool",
      "mycora",
      "research",
      "spores",
      "collection"
    ]
  },
  {
    "id": "standard_issue_weapon",
    "name": "Standard Issue Guard Sword",
    "description": "A durable, well-maintained sword, the standard armament for Harmonic Guard soldiers.",
    "item_type": "weapon",
    "rarity": "common",
    "weight": 3.0,
    "value": 180,
    "is_equippable": true,
    "equip_slots": [
      "main_hand"
    ],
    "dice_roll_effects": [
      {
        "effect_type": "slashing",
        "dice_notation": "1d6"
      }
    ],
    "durability": 110,
    "tags": [
      "weapon",
      "sword",
      "harmonic_guard",
      "standard_issue"
    ]
  },
  {
    "id": "stolen_supplies",
    "name": "Stolen Supplies",
    "description": "A small sack containing pilfered food, water, and a few useful tools. Clearly not acquired legitimately.",
    "item_type": "container",
    "rarity": "common",
    "weight": 3.0,
    "value": -50,
    "custom_properties": {
      "contents": "food_1day, water_1day, lockpicks_basic"
    },
    "tags": [
      "container",
      "stolen",
      "survival"
    ]
  },
  {
    "id": "storm_compass",
    "name": "Storm Compass",
    "description": "A compass that points towards the strongest nearby atmospheric or planar disturbance, rather than magnetic north.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 0.4,
    "value": 500,
    "tags": [
      "tool",
      "navigation",
      "tempest_flotilla",
      "planar"
    ]
  },
  {
    "id": "storm_tattoo_kit",
    "name": "Storm Tattoo Kit (Maelstri)",
    "description": "A Maelstri kit containing inks made from condensed storm essence and needles carved from lightning-struck wood. Used to create tattoos that channel tempestuous energies.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 0.4,
    "value": 600,
    "tags": [
      "tool",
      "maelstri",
      "tattoo",
      "storm_magic",
      "artisan"
    ]
  },
  {
    "id": "strange_contract",
    "name": "Strange Contract",
    "description": "A rolled parchment tied with an ethereal ribbon. The script within is unsettling and shifts when not directly observed. It details a bargain made with an entity from The Between.",
    "item_type": "document",
    "rarity": "rare",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "contract",
      "quest_item",
      "ghost_market",
      "ethereal"
    ]
  },
  {
    "id": "sturdy_work_clothes",
    "name": "Sturdy Work Clothes",
    "description": "Durable and practical clothes, patched in places but clean. Suited for manual labor or travel.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 2.0,
    "value": 15,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 1,
        "display_name": "Armor"
      }
    ],
    "durability": 70,
    "tags": [
      "clothing",
      "armor",
      "commoner",
      "workwear"
    ]
  },
  {
    "id": "survival_kit",
    "name": "Survival Kit",
    "description": "A compact kit containing essentials for survival in the wilderness: tinder, fishing line, a small knife, bandages.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 1.5,
    "value": 50,
    "custom_properties": {
      "contents_summary": "tinder, fishing_line, small_knife, bandages"
    },
    "tags": [
      "tool",
      "survival",
      "kit"
    ]
  },
  {
    "id": "symbiotic_communication_pod",
    "name": "Symbiotic Communication Pod",
    "description": "A living fungal pod that allows limited telepathic communication with the Mycora collective consciousness when attuned.",
    "item_type": "tool",
    "rarity": "rare",
    "weight": 0.3,
    "value": 700,
    "custom_properties": {
      "range_km": 10,
      "attunement_required": "Mycora_or_symbiote"
    },
    "tags": [
      "tool",
      "mycora",
      "communication",
      "telepathy",
      "symbiotic"
    ]
  },
  {
    "id": "temporal_compass",
    "name": "Temporal Compass (Maelstri)",
    "description": "A Maelstri compass that doesn't point north, but rather towards areas of significant temporal distortion or probability flux.",
    "item_type": "tool",
    "rarity": "epic",
    "weight": 0.5,
    "value": 1500,
    "tags": [
      "tool",
      "maelstri",
      "navigation",
      "temporal",
      "probability",
      "planar"
    ]
  },
  {
    "id": "test_apple",
    "name": "Test apple",
    "description": "A test apple.",
    "item_type": "miscellaneous",
    "rarity": "common",
    "weight": 0.1,
    "value": 1,
    "is_equippable": false,
    "is_consumable": true,
    "is_stackable": true,
    "stack_limit": 20,
    "tags": [
      "miscellaneous",
      "consumable",
      "food"
    ]
  },
  {
    "id": "trading_ledger",
    "name": "Trading Ledger",
    "description": "A well-used ledger filled with notes on prices, contacts, and trade routes across various planes.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 0.7,
    "value": 25,
    "tags": [
      "tool",
      "trade",
      "ledger",
      "notes"
    ]
  },
  {
    "id": "translator's_guidebook",
    "name": "Translator's Guidebook (Verdant)",
    "description": "A guidebook containing common phrases, customs, and notes on the plant-based communication of the Verdant Collective.",
    "item_type": "tool",
    "rarity": "common",
    "weight": 0.3,
    "value": 40,
    "stats": [
      {
        "name": "language_comprehension_verdant",
        "value": 1,
        "display_name": "Verdant Language Comprehension"
      }
    ],
    "tags": [
      "book",
      "tool",
      "language",
      "translation",
      "verdant_collective"
    ]
  },
  {
    "id": "treaty_drafts",
    "name": "Treaty Drafts",
    "description": "Drafts of proposed treaties and agreements, with various clauses and options for negotiation.",
    "item_type": "document",
    "rarity": "common",
    "weight": 0.5,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "treaty",
      "diplomacy",
      "negotiation",
      "quest_item"
    ]
  },
  {
    "id": "wanted_poster",
    "name": "Wanted Poster",
    "description": "A weathered wanted poster bearing a crude likeness of someone... perhaps you?",
    "item_type": "document",
    "rarity": "common",
    "weight": 0.1,
    "value": 0,
    "is_quest_item": true,
    "tags": [
      "document",
      "wanted",
      "quest_item"
    ]
  },
  {
    "id": "water_flask",
    "name": "Water Flask",
    "description": "A sturdy flask filled with fresh water.",
    "item_type": "consumable",
    "rarity": "common",
    "weight": 1.0,
    "value": 2,
    "is_consumable": true,
    "is_stackable": true,
    "stack_limit": 3,
    "stats": [
      {
        "name": "thirst_quench",
        "value": 20
      }
    ],
    "custom_properties": {
      "charges": 3,
      "refillable": true
    },
    "tags": [
      "drink",
      "consumable",
      "survival"
    ]
  },
  {
    "id": "weather_prediction_dice",
    "name": "Weather Prediction Dice (Maelstri)",
    "description": "A set of dice that, when thrown by a Maelstri, offer glimpses into short-term weather patterns and probability currents.",
    "item_type": "tool",
    "rarity": "uncommon",
    "weight": 0.1,
    "value": 450,
    "custom_properties": {
      "prediction_accuracy": "moderate",
      "range_hours": 6
    },
    "tags": [
      "tool",
      "maelstri",
      "divination",
      "weather",
      "probability"
    ]
  },
  {
    "id": "weather-resistant_clothing",
    "name": "Weather-Resistant Clothing",
    "description": "Clothing treated to repel water and wind, suitable for unpredictable weather.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 2.2,
    "value": 45,
    "is_equippable": true,
    "equip_slots": [
      "chest"
    ],
    "stats": [
      {
        "name": "defense",
        "value": 1,
        "display_name": "Armor"
      },
      {
        "name": "elemental_resistance_minor",
        "value": 3,
        "display_name": "Minor Elemental Resist",
        "is_percentage": true
      }
    ],
    "durability": 90,
    "tags": [
      "clothing",
      "armor",
      "protection",
      "weather"
    ]
  },
  {
    "id": "worn_disguise",
    "name": "Worn Disguise",
    "description": "A set of commoner's clothes, a hooded cloak, and some makeup, used to alter one's appearance.",
    "item_type": "armor",
    "rarity": "common",
    "weight": 1.5,
    "value": 20,
    "is_equippable": true,
    "equip_slots": [
      "chest",
      "head"
    ],
    "custom_properties": {
      "disguise_effectiveness": "moderate"
    },
    "stats": [
      {
        "name": "stealth_bonus_urban",
        "value": 2,
        "display_name": "Urban Stealth"
      }
    ],
    "durability": 40,
    "tags": [
      "clothing",
      "armor",
      "disguise",
      "stealth"
    ]
  }
]
```

### File: config\character\backgrounds.json

```json
{
    "backgrounds": {
      "Noble": {
        "id": "Noble",
        "name": "Noble",
        "description": "Born into privilege, you are accustomed to high society, politics, and perhaps a bit of intrigue.",
        "starting_skills": ["Persuasion", "History"],
        "starting_items": ["Fine Clothes", "Signet Ring", "50 Gold"],
        "stat_modifiers": {"CHA": 1}
      },
      "Commoner": {
        "id": "Commoner",
        "name": "Commoner",
        "description": "You grew up among the ordinary folk, learning a trade or working the land. You are resilient and practical.",
        "starting_skills": ["Endurance", "Crafting (Basic)"],
        "starting_items": ["Simple Clothes", "Basic Tool", "10 Gold"],
        "stat_modifiers": {"CON": 1}
      },
      "Scholar": {
        "id": "Scholar",
        "name": "Scholar",
        "description": "You spent years studying lore, history, or the arcane. Knowledge is your greatest asset.",
        "starting_skills": ["Lore", "Investigation"],
        "starting_items": ["Scholar's Robes", "Book", "Ink & Quill", "20 Gold"],
        "stat_modifiers": {"INT": 1}
      },
      "Soldier": {
        "id": "Soldier",
        "name": "Soldier",
        "description": "You have seen battle, whether in an army, militia, or mercenary company. You understand discipline and combat.",
        "starting_skills": ["Athletics", "Intimidation"],
        "starting_items": ["Worn Uniform/Armor", "Token of Service", "Simple Weapon", "15 Gold"],
        "stat_modifiers": {"STR": 1}
      },
      "Outlaw": {
        "id": "Outlaw",
        "name": "Outlaw",
        "description": "You have lived outside the law, relying on your wits, stealth, or force to survive.",
        "starting_skills": ["Stealth", "Deception"],
        "starting_items": ["Dark Cloak", "Lockpicks", "Dagger", "25 Gold"],
        "stat_modifiers": {"DEX": 1}
      }
    }
  }
  
```

### File: config\character\classes.json

```json
{
  "classes": {
    "Warrior": {
      "id": "Warrior",
      "name": "Warrior",
      "description": "Masters of martial combat, warriors excel in physical strength and durability.",
      "stat_modifiers": {
        "STR": 2,
        "DEX": 0,
        "CON": 2,
        "INT": -1,
        "WIS": 0,
        "CHA": 0,
        "WIL": 2,
        "INS": -1
      },
      "minimum_stats": {
        "STR": 11,
        "CON": 10
      },
      "recommended_stats": {
        "primary": [
          "STR",
          "CON",
          "WIL"
        ],
        "secondary": [
          "DEX"
        ],
        "tertiary": [
          "WIS",
          "CHA",
          "INT",
          "INS"
        ]
      },
      "archetypes": {
        "Balanced": {
          "name": "Balanced",
          "description": "A well-rounded warrior effective in most situations",
          "stat_distribution": {
            "STR": 14,
            "DEX": 12,
            "CON": 14,
            "INT": 8,
            "WIS": 10,
            "CHA": 10
          }
        },
        "Offensive": {
          "name": "Offensive",
          "description": "A warrior focused on dealing maximum damage",
          "stat_distribution": {
            "STR": 16,
            "DEX": 12,
            "CON": 12,
            "INT": 8,
            "WIS": 8,
            "CHA": 10
          }
        },
        "Defensive": {
          "name": "Defensive",
          "description": "A warrior specialized in taking hits and protecting allies",
          "stat_distribution": {
            "STR": 12,
            "DEX": 10,
            "CON": 16,
            "INT": 8,
            "WIS": 12,
            "CHA": 8
          }
        }
      },
      "weapon_proficiencies": [
        "swords",
        "axes",
        "maces",
        "polearms",
        "shields"
      ],
      "armor_proficiencies": [
        "light",
        "medium",
        "heavy",
        "shields"
      ]
    },
    "Mage": {
      "id": "Mage",
      "name": "Mage",
      "description": "Scholars of the arcane, mages command powerful spells and magical knowledge.",
      "stat_modifiers": {
        "STR": -1,
        "DEX": 0,
        "CON": -1,
        "INT": 3,
        "WIS": 1,
        "CHA": 1,
        "WIL": 1,
        "INS": 2
      },
      "minimum_stats": {
        "INT": 12
      },
      "recommended_stats": {
        "primary": [
          "INT",
          "INS"
        ],
        "secondary": [
          "WIS",
          "CON",
          "WIL"
        ],
        "tertiary": [
          "DEX",
          "CHA",
          "STR"
        ]
      },
      "archetypes": {
        "Elementalist": {
          "name": "Elementalist",
          "description": "A mage focused on elemental damage spells",
          "stat_distribution": {
            "STR": 8,
            "DEX": 10,
            "CON": 10,
            "INT": 16,
            "WIS": 12,
            "CHA": 10
          }
        },
        "Enchanter": {
          "name": "Enchanter",
          "description": "A mage specialized in controlling minds and enhancing items",
          "stat_distribution": {
            "STR": 8,
            "DEX": 10,
            "CON": 8,
            "INT": 14,
            "WIS": 12,
            "CHA": 14
          }
        },
        "Scholar": {
          "name": "Scholar",
          "description": "A mage with broad magical knowledge and versatile spellcasting",
          "stat_distribution": {
            "STR": 8,
            "DEX": 10,
            "CON": 10,
            "INT": 16,
            "WIS": 14,
            "CHA": 8
          }
        }
      },
      "weapon_proficiencies": [
        "daggers",
        "staves",
        "wands"
      ],
      "armor_proficiencies": [
        "none"
      ]
    },
    "Rogue": {
      "id": "Rogue",
      "name": "Rogue",
      "description": "Masters of stealth and trickery, rogues excel in dexterity and cunning.",
      "stat_modifiers": {
        "STR": 0,
        "DEX": 3,
        "CON": 0,
        "INT": 1,
        "WIS": 0,
        "CHA": 1,
        "WIL": 0,
        "INS": 2
      },
      "minimum_stats": {
        "DEX": 12
      },
      "recommended_stats": {
        "primary": [
          "DEX",
          "INS"
        ],
        "secondary": [
          "INT",
          "CHA"
        ],
        "tertiary": [
          "CON",
          "WIS",
          "STR",
          "WIL"
        ]
      },
      "archetypes": {
        "Thief": {
          "name": "Thief",
          "description": "A rogue specialized in stealing and evading detection",
          "stat_distribution": {
            "STR": 8,
            "DEX": 16,
            "CON": 10,
            "INT": 12,
            "WIS": 10,
            "CHA": 10
          }
        },
        "Assassin": {
          "name": "Assassin",
          "description": "A rogue focused on dealing high damage from stealth",
          "stat_distribution": {
            "STR": 10,
            "DEX": 16,
            "CON": 10,
            "INT": 12,
            "WIS": 12,
            "CHA": 8
          }
        },
        "Bard": {
          "name": "Bard",
          "description": "A charming rogue with persuasive abilities",
          "stat_distribution": {
            "STR": 8,
            "DEX": 14,
            "CON": 10,
            "INT": 10,
            "WIS": 8,
            "CHA": 16
          }
        }
      },
      "weapon_proficiencies": [
        "daggers",
        "short swords",
        "bows",
        "crossbows"
      ],
      "armor_proficiencies": [
        "light"
      ]
    },
    "Cleric": {
      "id": "Cleric",
      "name": "Cleric",
      "description": "Divine agents who channel the power of their deity to heal and protect.",
      "stat_modifiers": {
        "STR": 0,
        "DEX": 0,
        "CON": 1,
        "INT": 0,
        "WIS": 3,
        "CHA": 1,
        "WIL": 2,
        "INS": 1
      },
      "minimum_stats": {
        "WIS": 12
      },
      "recommended_stats": {
        "primary": [
          "WIS",
          "WIL"
        ],
        "secondary": [
          "CON",
          "CHA",
          "INS"
        ],
        "tertiary": [
          "STR",
          "DEX",
          "INT"
        ]
      },
      "archetypes": {
        "Healer": {
          "name": "Healer",
          "description": "A cleric focused on healing and restoration",
          "stat_distribution": {
            "STR": 8,
            "DEX": 10,
            "CON": 12,
            "INT": 8,
            "WIS": 16,
            "CHA": 12
          }
        },
        "Crusader": {
          "name": "Crusader",
          "description": "A battle cleric with combat and healing abilities",
          "stat_distribution": {
            "STR": 12,
            "DEX": 8,
            "CON": 12,
            "INT": 8,
            "WIS": 16,
            "CHA": 10
          }
        },
        "Oracle": {
          "name": "Oracle",
          "description": "A cleric with foresight and powerful divine magic",
          "stat_distribution": {
            "STR": 8,
            "DEX": 10,
            "CON": 10,
            "INT": 12,
            "WIS": 16,
            "CHA": 10
          }
        }
      },
      "weapon_proficiencies": [
        "maces",
        "hammers",
        "staves"
      ],
      "armor_proficiencies": [
        "light",
        "medium",
        "shields"
      ]
    },
    "Ranger": {
      "id": "Ranger",
      "name": "Ranger",
      "description": "Wilderness experts who combine combat prowess with natural knowledge.",
      "stat_modifiers": {
        "STR": 1,
        "DEX": 2,
        "CON": 1,
        "INT": 0,
        "WIS": 2,
        "CHA": -1,
        "WIL": 1,
        "INS": 2
      },
      "minimum_stats": {
        "DEX": 11,
        "WIS": 11
      },
      "recommended_stats": {
        "primary": [
          "DEX",
          "WIS",
          "INS"
        ],
        "secondary": [
          "STR",
          "CON",
          "WIL"
        ],
        "tertiary": [
          "INT",
          "CHA"
        ]
      },
      "archetypes": {
        "Hunter": {
          "name": "Hunter",
          "description": "A ranger specialized in tracking and hunting prey",
          "stat_distribution": {
            "STR": 10,
            "DEX": 16,
            "CON": 10,
            "INT": 8,
            "WIS": 14,
            "CHA": 8
          }
        },
        "Beastmaster": {
          "name": "Beastmaster",
          "description": "A ranger with a powerful animal companion",
          "stat_distribution": {
            "STR": 10,
            "DEX": 14,
            "CON": 12,
            "INT": 8,
            "WIS": 14,
            "CHA": 10
          }
        },
        "Scout": {
          "name": "Scout",
          "description": "A wilderness expert with stealth and survival skills",
          "stat_distribution": {
            "STR": 10,
            "DEX": 14,
            "CON": 10,
            "INT": 10,
            "WIS": 14,
            "CHA": 8
          }
        }
      },
      "weapon_proficiencies": [
        "bows",
        "spears",
        "swords",
        "daggers"
      ],
      "armor_proficiencies": [
        "light",
        "medium"
      ]
    },
    "Wanderer": {
      "id": "Wanderer",
      "name": "Wanderer",
      "description": "Masterless adventurers who adapt to various situations with versatile skills.",
      "stat_modifiers": {
        "STR": 0,
        "DEX": 1,
        "CON": 1,
        "INT": 1,
        "WIS": 1,
        "CHA": 1,
        "WIL": 1,
        "INS": 1
      },
      "minimum_stats": {},
      "recommended_stats": {
        "primary": [
          "DEX",
          "WIS",
          "WIL",
          "INS"
        ],
        "secondary": [
          "CON",
          "INT"
        ],
        "tertiary": [
          "STR",
          "CHA"
        ]
      },
      "archetypes": {
        "Jack-of-All-Trades": {
          "name": "Jack-of-All-Trades",
          "description": "A wanderer with balanced skills in many areas",
          "stat_distribution": {
            "STR": 10,
            "DEX": 12,
            "CON": 12,
            "INT": 12,
            "WIS": 12,
            "CHA": 10
          }
        },
        "Survivor": {
          "name": "Survivor",
          "description": "A wanderer focused on endurance and survival skills",
          "stat_distribution": {
            "STR": 10,
            "DEX": 12,
            "CON": 14,
            "INT": 10,
            "WIS": 14,
            "CHA": 8
          }
        },
        "Diplomat": {
          "name": "Diplomat",
          "description": "A wanderer specializing in social interaction and negotiation",
          "stat_distribution": {
            "STR": 8,
            "DEX": 12,
            "CON": 10,
            "INT": 12,
            "WIS": 10,
            "CHA": 14
          }
        }
      },
      "weapon_proficiencies": [
        "simple weapons"
      ],
      "armor_proficiencies": [
        "light"
      ]
    }
  }
}
```

### File: config\character\races.json

```json
{
  "races": {
    "Human": {
      "id": "Human",
      "name": "Human",
      "description": "Versatile and adaptable, humans are known for their diversity and ambition.",
      "stat_modifiers": {
        "STR": 1,
        "DEX": 1,
        "CON": 1,
        "INT": 1,
        "WIS": 1,
        "CHA": 1,
        "WIL": 1,
        "INS": 1
      },
      "traits": [
        {
          "name": "Adaptability",
          "description": "Humans can adapt to almost any situation. Gain +1 to all saving throws."
        },
        {
          "name": "Quick Learner",
          "description": "Humans gain 10% more experience from all sources."
        }
      ],
      "recommended_classes": [
        "Warrior",
        "Mage",
        "Rogue",
        "Cleric",
        "Ranger",
        "Wanderer"
      ]
    },
    "Elf": {
      "id": "Elf",
      "name": "Elf",
      "description": "Ancient and graceful, elves excel in magic and dexterity-based skills.",
      "stat_modifiers": {
        "STR": 0,
        "DEX": 2,
        "CON": -1,
        "INT": 2,
        "WIS": 1,
        "CHA": 1,
        "WIL": 1,
        "INS": 2
      },
      "traits": [
        {
          "name": "Keen Senses",
          "description": "Elves have heightened perception. Gain advantage on perception checks."
        },
        {
          "name": "Magic Affinity",
          "description": "Elves have a natural connection to magic. Spell costs are reduced by 10%."
        }
      ],
      "recommended_classes": [
        "Mage",
        "Ranger",
        "Wanderer"
      ]
    },
    "Dwarf": {
      "id": "Dwarf",
      "name": "Dwarf",
      "description": "Stout and hardy, dwarves are known for their resilience and craftsmanship.",
      "stat_modifiers": {
        "STR": 1,
        "DEX": -1,
        "CON": 3,
        "INT": 0,
        "WIS": 2,
        "CHA": -1,
        "WIL": 3,
        "INS": 0
      },
      "traits": [
        {
          "name": "Dwarven Resilience",
          "description": "Dwarves resist poison and have additional health regeneration."
        },
        {
          "name": "Stonecunning",
          "description": "Dwarves have expertise with stone and metalwork. Advantage on related checks."
        }
      ],
      "recommended_classes": [
        "Warrior",
        "Cleric"
      ]
    },
    "Orc": {
      "id": "Orc",
      "name": "Orc",
      "description": "Powerful and fierce, orcs excel in physical combat and intimidation.",
      "stat_modifiers": {
        "STR": 3,
        "DEX": 0,
        "CON": 2,
        "INT": -1,
        "WIS": -1,
        "CHA": -1,
        "WIL": 2,
        "INS": -1
      },
      "traits": [
        {
          "name": "Relentless Endurance",
          "description": "Orcs can push through grievous wounds. Once per day, drop to 1 HP instead of 0."
        },
        {
          "name": "Savage Attacks",
          "description": "Orcs deal additional damage on critical hits."
        }
      ],
      "recommended_classes": [
        "Warrior",
        "Ranger"
      ]
    },
    "Halfling": {
      "id": "Halfling",
      "name": "Halfling",
      "description": "Small but nimble, halflings are lucky and naturally stealthy.",
      "stat_modifiers": {
        "STR": -1,
        "DEX": 3,
        "CON": 1,
        "INT": 0,
        "WIS": 1,
        "CHA": 1,
        "WIL": 0,
        "INS": 2
      },
      "traits": [
        {
          "name": "Lucky",
          "description": "Halflings can reroll critical failures once per day."
        },
        {
          "name": "Naturally Stealthy",
          "description": "Halflings gain advantage on stealth checks."
        }
      ],
      "recommended_classes": [
        "Rogue",
        "Wanderer"
      ]
    },
    "Mycora": {
      "id": "Mycora",
      "name": "Mycora",
      "description": "Fungal humanoids from the Verdant plane, Mycora share a communal consciousness and can adapt their bodies to various environments.",
      "stat_modifiers": {
        "STR": 0,
        "DEX": 0,
        "CON": 2,
        "INT": 0,
        "WIS": 3,
        "CHA": -1,
        "WIL": 2,
        "INS": 1
      },
      "traits": [
        {
          "name": "Spore Symbiosis",
          "description": "Mycora can release healing spores to regenerate health for themselves and nearby allies once per day."
        },
        {
          "name": "Environmental Adaptation",
          "description": "Mycora can adapt to toxic environments and gain resistance to poison and disease."
        }
      ],
      "recommended_classes": [
        "Cleric",
        "Ranger",
        "Wanderer"
      ]
    },
    "Prismal": {
      "id": "Prismal",
      "name": "Prismal",
      "description": "Crystalline beings from the Crystalline plane with geometric bodies that refract magical energies through their crystalline forms.",
      "stat_modifiers": {
        "STR": 1,
        "DEX": -1,
        "CON": 1,
        "INT": 3,
        "WIS": 1,
        "CHA": -1,
        "WIL": 0,
        "INS": 3
      },
      "traits": [
        {
          "name": "Crystal Resonance",
          "description": "Prismals can focus magical energies, reducing mana costs of spells by 15%."
        },
        {
          "name": "Geometric Insight",
          "description": "Prismals gain advantage on checks involving mathematics, precision, and magical formulas."
        }
      ],
      "recommended_classes": [
        "Mage",
        "Cleric"
      ]
    },
    "Cinderspawn": {
      "id": "Cinderspawn",
      "name": "Cinderspawn",
      "description": "Ash-infused beings from the Ashen plane whose bodies constantly regenerate from inner embers, leaving trails of fine ash behind them.",
      "stat_modifiers": {
        "STR": 2,
        "DEX": 1,
        "CON": 1,
        "INT": -1,
        "WIS": 1,
        "CHA": -2,
        "WIL": 2,
        "INS": 0
      },
      "traits": [
        {
          "name": "Ember Renewal",
          "description": "Cinderspawn regenerate health when near fire and gain resistance to fire damage."
        },
        {
          "name": "Ash Walking",
          "description": "Cinderspawn can temporarily transfer their consciousness to ashes, allowing limited espionage and communication."
        }
      ],
      "recommended_classes": [
        "Warrior",
        "Mage",
        "Ranger"
      ]
    },
    "Maelstri": {
      "id": "Maelstri",
      "name": "Maelstri",
      "description": "Storm-touched beings from the Tempest plane with partially translucent bodies that contain swirling internal tempests.",
      "stat_modifiers": {
        "STR": 0,
        "DEX": 3,
        "CON": 0,
        "INT": 1,
        "WIS": -1,
        "CHA": 2,
        "WIL": 0,
        "INS": 2
      },
      "traits": [
        {
          "name": "Storm Binding",
          "description": "Maelstri can capture essence of storms in their bodies, granting unpredictable magical abilities once per day."
        },
        {
          "name": "Electric Reflexes",
          "description": "Maelstri have lightning-fast reactions, gaining advantage on initiative rolls and dexterity saving throws."
        }
      ],
      "recommended_classes": [
        "Rogue",
        "Mage",
        "Wanderer"
      ]
    }
  }
}
```

### File: config\character\stats_config.json

```json
{
  "version": "1.0",
  "name": "Character Stats Configuration",
  "description": "Configuration for character statistics and derived values",
  
  "default_stat_value": 10,
  
  "base_strength": 10,
  "base_dexterity": 10,
  "base_constitution": 10,
  "base_intelligence": 10,
  "base_wisdom": 10,
  "base_charisma": 10,
  
  "base_health": 10,
  "hp_per_level": 5,
  
  "base_mana": 5,
  "mana_per_level": 3,
  
  "base_stamina": 10,
  "stamina_per_level": 2,
  
  "base_defense": 10,
  "base_magic_defense": 10,
  "max_dex_mod_to_defense": 5,
  
  "base_carry_capacity": 50,
  "carry_capacity_multiplier": 5,
  
  "base_movement": 30,
  
  "stat_min_value": 3,
  "stat_max_value": 20,
  
  "modifier_thresholds": {
    "1": -5,
    "2": -4,
    "3": -4,
    "4": -3,
    "5": -3,
    "6": -2,
    "7": -2,
    "8": -1,
    "9": -1,
    "10": 0,
    "11": 0,
    "12": 1,
    "13": 1,
    "14": 2,
    "15": 2,
    "16": 3,
    "17": 3,
    "18": 4,
    "19": 4,
    "20": 5
  },
  
  "races": {
    "human": {
      "stat_bonuses": {
        "strength": 1,
        "dexterity": 1,
        "constitution": 1,
        "intelligence": 1,
        "wisdom": 1,
        "charisma": 1
      },
      "abilities": ["versatile", "adaptable"]
    },
    "elf": {
      "stat_bonuses": {
        "dexterity": 2,
        "intelligence": 1,
        "wisdom": 1
      },
      "abilities": ["darkvision", "keen_senses"]
    },
    "dwarf": {
      "stat_bonuses": {
        "constitution": 2,
        "strength": 1,
        "wisdom": 1
      },
      "abilities": ["darkvision", "stonecutting", "poison_resistance"]
    }
  },
  
  "classes": {
    "warrior": {
      "primary_stats": ["strength", "constitution"],
      "hp_bonus": 2,
      "stamina_bonus": 2
    },
    "mage": {
      "primary_stats": ["intelligence", "wisdom"],
      "mp_bonus": 3,
      "magic_attack_bonus": 1
    },
    "rogue": {
      "primary_stats": ["dexterity", "charisma"],
      "initiative_bonus": 2,
      "evasion_bonus": 1
    }
  },
  
  "level_up": {
    "points_per_level": 2,
    "max_points_per_stat": 1
  },
  
  "combat": {
    "critical_hit_threshold": 20,
    "fumble_threshold": 1,
    "base_hit_chance": 65,
    "base_flee_chance": 50
  }
}

```

### File: README.md

```markdown
# RPG Text Adventure Game

## Overview

This project is a text-based RPG adventure game framework that combines traditional role-playing elements with modern LLM (Large Language Model) technology. The goal is to create dynamic narratives, interactive characters, and an immersive game world generated and managed with the help of AI.

## Features

*   **Core RPG Gameplay:** Character creation, inventory management, combat system (under development), time system, save/load functionality.
*   **LLM Integration:** Dynamic story generation, NPC interactions, rule checking, and context evaluation powered by configurable LLM providers (OpenAI, Google, OpenRouter).
*   **Graphical User Interface (GUI):** A desktop application built with PySide6 providing a visual way to interact with the game.
*   **Command Line Interface (CLI):** A text-based interface for playing the game in a terminal.
*   **Web Interface:** A web-based frontend (using FastAPI and a simple HTML/JS client) to interact with the game engine remotely.
*   **World Configurator:** A separate tool (also using PySide6) for creating and editing game world data, items, locations, etc.
*   **Modular Design:** Separated components for core logic, UI, configuration, and LLM integration.

## Technology Stack

*   **Language:** Python 3.9+
*   **GUI:** PySide6
*   **Web Framework:** FastAPI
*   **Configuration:** JSON
*   **Core Libraries:** Standard Python libraries

## Project Structure

The project is organized into the following main directories:

*   `config/`: Contains JSON configuration files for game settings, LLM providers, items, locations, etc. ([config/README.md](./config/README.md))
*   `core/`: Houses the core game engine logic, including state management, command processing, LLM integration, character systems, inventory, and utilities. ([core/README.md](./core/README.md))
*   `gui/`: Components for the PySide6-based desktop graphical user interface. ([gui/README.md](./gui/README.md))
*   `web/`: Contains the FastAPI server and basic HTML/JS client for the web interface. ([web/README.md](./web/README.md))
*   `world_configurator/`: The standalone application for editing game world data. ([world_configurator/README.md](./world_configurator/README.md))
*   `tests/`: Unit and integration tests for the project components. ([tests/README.md](./tests/README.md))
*   `images/`: Static image assets used by the GUI and potentially the web interface.
*   `logs/`: Application log files.
*   `saves/`: Default directory for saved game files.
*   `sound/`: Sound effects and music files.

## Setup Instructions

1.  **Clone the Repository:**
    ```bash
    git clone <repository_url>
    cd <repository_directory>
    ```
2.  **Create a Virtual Environment (Recommended):**
    ```bash
    python -m venv venv
    # Activate the environment
    # Windows (cmd.exe):
    venv\Scripts\activate.bat
    # Windows (PowerShell):
    .\venv\Scripts\Activate.ps1
    # Linux/macOS:
    source venv/bin/activate
    ```
3.  **Install Dependencies:**
    The project uses `setup.py`. Install the project and its dependencies in editable mode:
    ```bash
    pip install -e .
    ```
    *Note: The web server component might have additional dependencies listed in `web/server/requirements.txt`. If you plan to run the web server, install those as well:*
    ```bash
    pip install -r web/server/requirements.txt
    ```

## Running the Application

### Main Game (GUI Mode)

This is the primary way to play the game with the graphical interface.

```bash
python run_gui.py
# or
python main.py
```

### Main Game (CLI Mode)

Run the game purely in your terminal.

```bash
python main.py --cli
```

### World Configurator

Run the tool to edit game world data.

```bash
python world_configurator/main.py
```

### Web Interface

Start the FastAPI web server. By default, it runs on `http://localhost:8000`.

```bash
# Ensure you are in the project root directory
uvicorn web.server.server:app --reload --port 8000
```
*Alternatively, you might be able to use `python start_server.py` if it's configured.*

### Running Tests

Navigate to the `tests` directory and use `pytest` (you might need to install it: `pip install pytest`).

```bash
cd tests
pytest
# Or from the root directory:
python -m pytest tests/
```
Refer to `tests/README.md` for more details on testing.

## Configuration

Game settings, LLM API keys, item definitions, and world data are managed through JSON files in the `config/` directory. The LLM settings can also be managed through the GUI or potentially the web interface.

## Development Status

See `checklist.md` for the current development status, planned features, and roadmap.

## License

This project is intended for personal use and learning purposes.

```

### File: gameworld_framework.md

```markdown
# SHATTERED RESONANCE
## Fantasy World Building Guide

## CORE CONCEPT
This world, called Aetheris, was once a single unified reality until "The Shattering" - a catastrophic magical event that fractured the world into overlapping planes of reality. These planes occasionally merge, causing "Resonance Events" where landscapes, creatures, and cultures temporarily blend before separating again. This has led to unique evolutionary paths, cultural adaptations, and magical systems.

## WORLD HISTORY

### The Age of Harmony (Ancient Era)
- Aetheris was once a singular reality where all races existed in harmony under the watchful eye of the Luminaries - cosmic entities who maintained balance.
- Magic was a natural force, accessible through song and ritualistic movements rather than formal spellcasting.
- Society was nomadic, following seasonal magical currents across the land.

### The Shattering (Defining Cataclysm)
- Approximately 2,500 years ago, an experiment by the Cipher Conclave, an ancient mage collective seeking immortality, tore reality apart.
- The world split into five overlapping planes: Verdant (nature), Crystalline (order), Ashen (decay), Tempest (chaos), and Nexus (the central plane where most inhabitants now dwell).
- The Luminaries were scattered across the planes, their essences fragmented.

### The Age of Isolation (1-1000 AS - After Shattering)
- Surviving populations adapted to their new isolated realities.
- First Resonance Events occurred, terrifying and disorienting as planes temporarily merged.
- The Five Speakers emerged - individuals who could hear the "voices" of the fragmented Luminaries.

### The Age of Discovery (1000-2000 AS)
- Civilizations developed ways to predict and utilize Resonance Events.
- The Harmonic Order formed to study and catalog plane interactions.
- First intentional cross-plane settlements established.

### The Modern Age (2000-2500 AS)
- Sophisticated societies have emerged that incorporate elements from multiple planes.
- Resonance Events are now celebrated cultural occurrences, though unpredictable ones can still be dangerous.
- Rumors of methods to permanently reunite the planes circulate, causing political and ideological tension.

## CULTURES & SOCIETIES

### The Concordant Cities
- **Capital**: Harmonia
- **Culture**: These seven interconnected city-states sit at major Resonance nodes on Nexus plane. Their architecture constantly shifts as it incorporates elements from other planes during Resonance Events.
- **Notable Feature**: Citizens undergo "Attunement" - ritual tattooing that helps them maintain their identity during plane shifts.
- **Governance**: Ruled by the Council of Resonance - representatives from each major race and class specialization.

### The Verdant Collective
- **Territory**: Primarily exists in the Verdant plane but maintains outposts on Nexus.
- **Culture**: Focused on symbiotic relationships with their environment. Societal roles are seasonal, with individuals changing their societal functions throughout the year.
- **Notable Feature**: "Green Speech" - a language composed of plant growth patterns and pheromones that non-members cannot decode.
- **Primary Races**: Elves, Halflings, and the unique Mycora (fungal humanoids).

### The Crystalline Consortium
- **Territory**: Most stable presence on the Crystalline plane, with trading enclaves on Nexus.
- **Culture**: Highly ordered society where personal worth is measured by one's contribution to mathematical and magical precision.
- **Notable Feature**: "Faceting" - a coming-of-age ritual where adolescents receive geometric crystal implants that enhance specific mental abilities.
- **Primary Races**: Dwarves, Humans, and the unique Prismals (crystalline beings).

### The Ashen Covenant
- **Territory**: Nomadic societies traveling the Ashen plane and temporary settlements on Nexus.
- **Culture**: Focuses on impermanence and rebirth. Nothing is permanently owned; all possessions rotate through the community.
- **Notable Feature**: "Dust Keeping" - the practice of preserving the ashes of ancestors and using them in rituals to communicate with the dead.
- **Primary Races**: Orcs, Humans, and the unique Cinderspawn (ash-infused beings).

### The Tempest Flotilla
- **Territory**: Constantly moving throughout the chaotic Tempest plane with harbors on Nexus during certain celestial alignments.
- **Culture**: Adapts rapidly to change with fluid social hierarchies that can transform daily.
- **Notable Feature**: "Storm Binding" - capturing the essence of Tempest plane storms in tattoos that grant unpredictable magical abilities.
- **Primary Races**: Humans, Halflings, and the unique Maelstri (storm-touched beings with partially translucent bodies).

## MAJOR FACTIONS & POWERS

### The Harmonic Order
- **Base**: Harmonia
- **Purpose**: Study and predict Resonance Events; maintain historical records.
- **Structure**: Academic hierarchy with Resonance Sages at the top.
- **Current Agenda**: Searching for a way to stabilize unpredictable Resonance Events that have been increasing in frequency.

### The Cipher Remnant
- **Base**: Hidden enclaves throughout all planes
- **Purpose**: Descendants of the Cipher Conclave who caused The Shattering, seeking redemption through reunification of the planes.
- **Structure**: Cell-based organization with individual "Threads" working independently.
- **Current Agenda**: Collecting fragments of Luminaries to potentially reverse The Shattering.

### The Dissonant Path
- **Base**: Primarily in the Ashen plane
- **Purpose**: Believes The Shattering was necessary evolution; opposes reunification.
- **Structure**: Loosely organized collectives led by "Disruptors" - individuals who can temporarily intensify plane separation.
- **Current Agenda**: Sabotaging reunification efforts; inducing controlled Resonance Events to strengthen the barriers between planes.

### The Mercantile Chord
- **Base**: Trading hubs at the edges of major settlements across all planes
- **Purpose**: Profit from cross-plane commerce and the unique resources each plane provides.
- **Structure**: Guild-based organization with specialized traders for each plane's goods.
- **Current Agenda**: Monopolizing "Resonant Materials" - items that retain properties from multiple planes.

### The Five Speakers
- **Base**: Individual territories throughout Nexus
- **Purpose**: Each communicates with a fragmented Luminary, interpreting their will.
- **Structure**: Quasi-religious leaders with devoted followers.
- **Current Agenda**: The Speakers disagree on whether the Luminaries want reunification, leading to growing conflict between their factions.

## CONFLICTS & TENSIONS

### The Resonance Crisis
- Resonance Events are becoming more frequent and unpredictable.
- Some believe this heralds an imminent collapse of the planar boundaries.
- Others see it as an opportunity for permanent reunification.
- The Harmonic Order works to contain dangerous Resonances while studying the phenomenon.

### The Luminary Fragments
- Pieces of the original Luminaries occasionally manifest as powerful artifacts.
- Major factions compete to collect these fragments for their own purposes.
- Each fragment contains knowledge and power from before The Shattering.
- Some fragments have developed sentience and their own agendas.

### Resource Imbalance
- Each plane produces unique resources necessary for advanced magic and technology.
- The Mercantile Chord's monopolistic practices have created resource inequalities.
- Border settlements face exploitation from multiple powers.
- Resource wars are becoming more common as certain materials become scarce.

### Identity Crisis
- Individuals caught in Resonance Events sometimes return changed or merged with alternate versions of themselves.
- "Resonance sickness" - a psychological condition where one's sense of self fragments.
- Religious and philosophical movements debate the nature of soul and self in a fractured reality.
- Treatment and integration of the "Resonance-touched" varies widely between cultures.

## UNIQUE MAGICAL SYSTEMS

### Song Weaving
- The most ancient form of magic, predating The Shattering.
- Practitioners create effects through specific melodies and harmonies.
- Different musical scales connect to different planes.
- Most powerful when performed as a group.

### Planar Anchoring
- The art of maintaining stability during Resonance Events.
- Practitioners can extend areas of stability or purposefully blur planar boundaries.
- Primarily used by the Harmonic Order to protect settlements.
- Requires physical components from multiple planes.

### Echo Binding
- Capturing "echoes" - residual effects from other planes that linger after Resonance Events.
- These echoes can be bound to objects or people to grant temporary planar properties.
- Black market for illegal echo harvesting is growing.
- Side effects can include "planar bleeding" - uncontrolled manifestations of other planes.

### Facet Magic
- Developed by the Crystalline Consortium.
- Uses precisely cut geometric crystals to channel and focus magical energies.
- Different shapes and angles produce different effects.
- Requires mathematical precision but extremely stable and reliable.

### Ash Walking
- Unique to the Ashen Covenant.
- Temporarily transferring consciousness into the Ashen plane.
- Used for communication, espionage, and retrieving lost knowledge.
- Extended use causes physical body to gradually turn to ash.

## UNIQUE ELEMENTS & HOOKS

### The Resonance Calendar
- Time is measured by predictable Resonance Events.
- Major celebrations and trade agreements coincide with specific Resonances.
- Calendar interpreters are essential advisors to leaders.
- Recent calendar disruptions are causing social and economic turmoil.

### Planar Bleed Zones
- Areas where planes have permanently merged.
- Contain unique hybrid flora, fauna, and magical properties.
- Highly valuable for research and resources.
- Often dangerous and unpredictable.

### The Ghost Markets
- Appear only during specific Resonance Events.
- Sell items, memories, and services from across all planes.
- Operated by mysterious entities called "The Between."
- Contracts made here are binding across all planes.

### The Shifting Library
- Repository of knowledge that exists simultaneously in all planes.
- Different sections accessible depending on which plane is currently dominant.
- Maintained by the enigmatic Lexicants - beings who can exist in multiple planes simultaneously.
- Contains records from before The Shattering that could potentially reveal how to reverse it.

### The Broken Song
- Fragments of an ancient melody believed to have power over the structure of reality itself.
- Possibly the trigger or solution to The Shattering.
- Those who hear pieces of it are forever changed.
- Various factions seek to either complete or permanently silence the song.

### The Luminary Chess Game
- A political/metaphysical game played between the Five Speakers.
- Moves in the game correspond to real-world events and Resonance patterns.
- The game board is a complex physical representation of the planar system.
- Some believe the outcome of the game will determine the fate of all planes.

## PLAYER INTEGRATION

### Character Origins
- Characters can originate from specific planes, mixed-plane settlements, or be "Resonance-touched."
- Class choices might reflect planar affinities (e.g., clerics might serve specific Luminaries).
- Background traits could include planar exposure effects or Resonance sensitivity.

### Adventure Hooks
- Tracking down Luminary fragments before they fall into dangerous hands.
- Investigating increasingly dangerous Resonance Events in frontier regions.
- Mediating conflicts between planar factions during temporary merges.
- Exploring newly discovered Planar Bleed Zones for valuable resources.
- Preventing or enabling plane reunification attempts.
- Unraveling the true history of The Shattering and those responsible.
- Protecting communities during unexpected Resonance Events.
- Recovering lost knowledge from the Shifting Library.

### Moral Questions
- Is reunifying the planes the right choice, or has separation created valuable diversity?
- How should those transformed by Resonance Events be treated?
- Should powerful planar technology be controlled or freely available?
- What responsibilities do the current generation have for fixing mistakes made in the past?
- Is maintain the status quo more important than progress if progress brings risk?

This world framework offers numerous opportunities for unique storytelling while maintaining familiar fantasy elements that players can relate to. The concept of shifting realities provides both mechanical opportunities for gameplay variety and rich narrative possibilities.
```

### File: core\llm\README.md

```markdown
# LLM Module

The `llm` module manages the integration with large language models (LLMs) for narrative generation and game content creation.

## Key Components

### llm_manager.py

The `LLMManager` class is the main interface for LLM interactions:

- Sends prompts to LLM providers
- Receives and processes LLM responses
- Manages context window size and token usage
- Handles rate limiting and retries
- Provides diagnostic functions

### provider_manager.py

The `ProviderManager` class manages different LLM providers:

- Initializes provider clients with appropriate API keys
- Selects the appropriate provider based on configuration
- Handles provider-specific parameters and features
- Manages fallback between providers
- Validates provider availability

### settings_manager.py

The `SettingsManager` class manages LLM settings:

- Loads settings from configuration files
- Provides access to LLM parameters (temperature, top_p, etc.)
- Validates and sanitizes settings
- Manages provider-specific settings

### settings_cli.py

Provides a command-line interface for managing LLM settings:

- Viewing current settings
- Modifying provider settings
- Testing provider connections
- Running diagnostics

## Current Functionality

1. Support for multiple LLM providers (OpenAI, Anthropic, Google)
2. Configuration management for LLM parameters
3. Fallback mechanisms when providers are unavailable
4. Diagnostic tools for testing and troubleshooting
5. Token usage tracking and optimization
6. Command-line utility for settings management

## Planned Features

1. More sophisticated context management
2. Dynamic prompt generation based on game state
3. Enhanced error handling and recovery
4. Support for additional LLM providers
5. Better token usage optimization

## Usage Example

```python
from core.llm.llm_manager import LLMManager
from core.llm.settings_manager import SettingsManager

# Create a settings manager
settings_manager = SettingsManager()
settings_manager.load_settings()

# Create an LLM manager
llm_manager = LLMManager(settings_manager)

# Get a completion
prompt = "Describe a dark forest at night."
response = llm_manager.get_completion(prompt)

# Display the response
print(response)
```

## LLM Toggle Command

The game includes a special command `/llm` that can be used to:

- Check the current LLM status
- Toggle LLM on/off during gameplay
- Switch between different LLM providers

This allows for fallback to a non-LLM gameplay mode when needed.

```

### File: core\inventory\README.md

```markdown
# Inventory Module

The `inventory` module manages all item-related functionality in the game, including items, equipment, and currency.

## Key Components

### Item System

- `item.py` - Defines the `Item` class and related data structures
- `item_enums.py` - Enumerations for item types, rarities, equipment slots, etc.
- `item_stat.py` - Item statistics and properties
- `item_modifier.py` - Modifiers that can be applied to items
- `item_factory.py` - Creates items from templates or specifications
- `item_template_loader.py` - Loads item templates from configuration files
- `item_variation_generator.py` - Generates variations of items with different properties
- `item_serialization.py` - Handles serialization/deserialization of items for saving/loading

### Inventory Management

- `inventory_manager.py` - Main inventory management class
- `inventory_base.py` - Base inventory functionality
- `inventory_item_operations.py` - Item operations like adding, removing, etc.
- `inventory_limits.py` - Weight and slot limits for inventory
- `equipment_manager.py` - Manages equipment slots and equipped items
- `currency_manager.py` - Manages in-game currency (copper, silver, gold)

### Narrative Item System

- `narrative_item_manager.py` - Main class for narrative-based item creation
- `narrative_item_creation.py` - Creates items from narrative descriptions
- `narrative_item_discovery.py` - Manages item discovery and property revelation
- `narrative_item_mappings.py` - Maps narrative descriptions to item properties

### Command Handlers

- `inventory_commands.py` - Command handlers for inventory-related commands
- `inventory_commands_2.py` - Additional command handlers
- `inventory_commands_3.py` - Additional command handlers

## Current Functionality

1. Item creation from templates and specifications
2. Item management (add, remove, equip, unequip)
3. Currency management
4. Equipment slot management with proper handling of two-handed weapons
5. Item damage and destruction
6. Item discovery (revealing item properties over time)
7. Narrative-driven item creation through LLM integration
8. Combat loot generation
9. Item parsing from narrative text

## Planned Features

1. Advanced item crafting
2. Item decay and maintenance
3. Magic item effects
4. More sophisticated item generation algorithms
5. Enhanced item UI representation

## Usage Example

```python
from core.inventory.inventory_manager import InventoryManager
from core.inventory.item_factory import ItemFactory

# Create an inventory manager
inventory = InventoryManager()

# Create an item factory
item_factory = ItemFactory()
item_factory.load_templates()

# Create an item
sword = item_factory.create_item_from_spec("iron_sword")

# Add to inventory
inventory.add_item(sword)

# Equip the item
inventory.equip_item(sword.id, "main_hand")
```

```

### File: core\combat\README.md

```markdown
# Combat System (`core.combat`)

This module implements the turn-based combat system for the RPG game. It handles combat encounters, including entity management, turn order, action resolution, damage calculation, status effects, and interaction with other core systems.

## Overview

The combat system provides the framework for resolving conflicts between the player and enemies. Key features include:

-   **Turn-Based Flow:** Combat proceeds in rounds, with entities taking turns based on initiative.
-   **Action System:** Entities can perform various actions like attacking, casting spells, defending, using items, or attempting to flee.
-   **Stat Integration:** Combat calculations (hit chance, damage, defense, initiative) rely heavily on entity stats defined in `core.stats`.
-   **Dice Mechanics:** Uses the `core.utils.dice` module for randomized outcomes like attack rolls, damage, and critical hits/fumbles.
-   **Status Effects:** Entities can be affected by various conditions (e.g., defending, poisoned) that modify their capabilities or inflict damage over time.
-   **Combat Logging:** Records significant events during the encounter.

## Core Components

### 1. Combat Manager (`combat_manager.py`)

The central orchestrator of combat encounters.

-   **`CombatManager` Class:**
    -   Manages the overall state of a combat encounter (`CombatState`: `NOT_STARTED`, `IN_PROGRESS`, `PLAYER_VICTORY`, `PLAYER_DEFEAT`, `FLED`).
    -   Holds references to all participating `CombatEntity` objects.
    -   Determines turn order by calculating initiative (`_determine_initiative`) based on entity stats and a random roll.
    -   Processes `CombatAction` objects submitted by entities, resolving their effects (damage, healing, status effects, etc.).
    -   Advances turns (`_advance_turn`) and rounds.
    -   Checks for combat end conditions (player defeat, enemy defeat).
    -   Maintains a `combat_log` of events.
    -   Provides methods to start combat (`start_combat`) and get the current state (`get_combat_summary`).

### 2. Combat Entity (`combat_entity.py`)

Represents any participant in combat.

-   **`EntityType` Enum:** Defines the type of entity (`PLAYER`, `NPC`, `ALLY`, `ENEMY`, `CREATURE`).
-   **`CombatEntity` Class:**
    -   Stores the entity's current state in combat: ID, name, type, stats (from `core.stats`), current/max HP, MP, Stamina.
    -   Manages active `status_effects` (as a set of strings).
    -   Tracks initiative value and position (currently basic).
    -   Provides methods for taking damage (`take_damage`), healing (`heal`), spending/restoring resources (`spend_mp`, `spend_stamina`, etc.), and managing status effects (`add_status_effect`, `remove_status_effect`).
    -   Includes serialization methods (`to_dict`, `from_dict`).

### 3. Combat Action (`combat_action.py`)

Defines actions that entities can perform.

-   **`ActionType` Enum:** Categorizes actions (`ATTACK`, `SPELL`, `SKILL`, `DEFEND`, `ITEM`, `FLEE`, `MOVE`, `OTHER`).
-   **`CombatAction` Dataclass:** Base representation for an action, including performer ID, targets, costs (MP, stamina), dice notation for effects, description, and special effects.
-   **Specialized Action Subclasses:** Provide constructors and specific details for common actions:
    -   `AttackAction`: Basic attacks.
    -   `SpellAction`: Casting spells.
    -   `DefendAction`: Taking a defensive stance (applies "defending" status).
    -   `ItemAction`: Using items (currently basic implementation).
    -   `FleeAction`: Attempting to escape combat.

### 4. Developer Commands (`dev_commands.py`)

Provides commands for testing and debugging the combat system via the command processor (`core.base.commands`).

-   Registers commands like `//start_combat`, `//combat_status`, `//set_hp`, `//combat_action`.
-   Includes helper functions (`create_player_combat_entity`, `create_npc_combat_entity`) to convert game state objects (Player, NPCs from `core.character.npc_system`) into `CombatEntity` instances suitable for the `CombatManager`.

## Combat Flow

1.  **Initialization (`CombatManager.start_combat`):**
    -   Player and enemy entities are added to the `CombatManager`.
    -   Initiative is rolled for all entities (`_determine_initiative`).
    -   Turn order is established based on initiative rolls (highest first).
    -   Combat state is set to `IN_PROGRESS`, round counter starts at 1.
    -   Combat start and turn order are logged.
2.  **Turn Progression (`CombatManager._advance_turn`):**
    -   The manager identifies the `CombatEntity` whose turn it is based on the `turn_order` and `current_turn_index`.
    -   The entity (or its controlling agent/player) decides on a `CombatAction`.
3.  **Action Execution (`CombatManager.perform_action`):**
    -   The chosen `CombatAction` is passed to the `CombatManager`.
    -   The manager validates the action (is it the performer's turn? enough resources?).
    -   The appropriate handler (`_handle_attack_action`, `_handle_spell_action`, etc.) is called.
    -   **Resolution:**
        -   **Attack:** Roll to hit (d20 + bonus) vs. target's defense. On hit, roll damage (`dice_notation`), apply damage to target's HP. Check for critical hits/fumbles.
        -   **Spell/Item:** Check resource costs, apply effects (damage, healing, status effects) based on `dice_notation` and `special_effects`.
        -   **Defend:** Apply "defending" status effect.
        -   **Flee:** Calculate flee chance based on agility comparison, roll percentage dice.
    -   Results are logged.
4.  **State Check (`CombatManager._check_combat_state`):**
    -   After each action, the manager checks if all players or all enemies are defeated.
    -   If an end condition is met, the `state` is updated (`PLAYER_VICTORY`, `PLAYER_DEFEAT`).
    -   If the flee action was successful, the state is set to `FLED`.
5.  **Next Turn:**
    -   If combat is still `IN_PROGRESS`, the turn index advances (`_advance_turn`).
    -   Defeated entities are skipped.
    -   If the turn order wraps around, the round number increments.
    -   The process repeats from step 2.

## Key Mechanics

### Damage Calculation

-   Handled primarily within `CombatManager._handle_attack_action` and effect application in other handlers.
-   **Hit Chance:** Typically involves a d20 roll + attacker's relevant bonus (e.g., from stats) compared against the target's defense value (derived stat).
-   **Damage:** Based on the action's `dice_notation` (e.g., "2d6+3"), rolled using `core.utils.dice.roll_dice_notation`.
-   **Critical Hits/Fumbles:** Detected using `core.utils.dice.check_success` based on the d20 roll. Criticals usually involve rolling extra damage dice (`core.utils.dice.roll_critical`).
-   **Application:** Damage is applied using `CombatEntity.take_damage`, which reduces `current_hp`.

### Status Effects

-   Managed by `CombatEntity` (stored in `status_effects` set).
-   Applied by actions (e.g., `DefendAction` adds "defending", spells/items can add others via `special_effects`).
-   The *effects* of status effects (e.g., damage reduction for "defending", damage over time for "burning") need to be implemented within the relevant calculation steps (e.g., modifying damage taken in `take_damage`, applying DoT at the start/end of a turn - *Note: Turn-based effect processing is not explicitly shown in the current `CombatManager` code*).

## Dependencies and Interactions

The `core.combat` module relies on several other parts of the codebase:

-   **`core.stats`:** Essential for `CombatEntity` attributes (HP, MP, Stamina) and combat calculations (initiative, attack bonuses, defense). `StatType` and `DerivedStatType` are used directly.
-   **`core.utils.dice`:** Used extensively by `CombatManager` for all random rolls (initiative, hit chance, damage, flee chance).
-   **`core.base.commands`:** Used by `__init__.py` and `dev_commands.py` to register console commands.
-   **`core.base.state`:** Used by `dev_commands.py` to access the global game state (player info, NPC system).
-   **`core.character.npc_system`:** Used by `dev_commands.py` to create `CombatEntity` instances for enemies when starting test combats.
-   **`core.items` (Planned):** The `ItemAction` exists, but full integration (checking inventory, consuming items) is not yet implemented in `CombatManager._handle_item_action`.
-   **`core.utils.logging_config`:** Used for logging combat events and debug information.

## Configuration

While specific combat rules (like status effect details, critical hit multipliers) might be intended for external configuration (e.g., JSON files), the analyzed code within `core/combat/` does not currently show direct reading from configuration files. Default values or logic are embedded within the code (e.g., flee chance calculation, defend action effect).

## Usage Examples

*(Existing examples retained for demonstrating basic API usage)*

### 1. Starting Combat

```python
from core.combat.combat_manager import CombatManager
from core.combat.combat_entity import CombatEntity, EntityType
# Assume player_stats and enemy_stats are dictionaries populated from core.stats
# Assume player and enemy are created similar to dev_commands helpers

# Create combat manager
combat_mgr = CombatManager()

# Start combat
combat_mgr.start_combat(player_entity, [enemy_entity])
```

### 2. Performing Combat Actions

```python
from core.combat.combat_action import AttackAction, DefendAction

# Assume combat_mgr is an active CombatManager instance
# Assume current entity ID is known

# Attack action
attack = AttackAction(
    performer_id="player", # Use actual entity ID
    target_id="enemy_goblin_1", # Use actual entity ID
    weapon_name="sword",
    dice_notation="1d8+3" # Example damage
)
result = combat_mgr.perform_action(attack)

# Defend action
defend = DefendAction(performer_id="player") # Use actual entity ID
result = combat_mgr.perform_action(defend)
```

### 3. Getting Combat Information

```python
from core.combat.combat_manager import CombatState

# Assume combat_mgr is an active CombatManager instance

# Get combat summary
summary = combat_mgr.get_combat_summary()
print(f"Round: {summary['round']}, Turn: {summary['current_turn']}")
for entity_id, entity_data in summary['entities'].items():
    print(f"  {entity_data['name']}: {entity_data['hp']}")

# Check if combat has ended
if combat_mgr.state != CombatState.IN_PROGRESS:
    print(f"Combat ended: {combat_mgr.state.name}")

# Get recent combat log entries
for entry in summary['log']:
    print(entry)
```

## LLM Integration

*(Existing section retained)*

The combat system supports integration with the LLM narrative system:

-   Combat results can be narrated by the LLM.
-   Special combat actions can be triggered through narrative.
-   The LLM can apply appropriate modifiers based on narrative context.
-   Combat log provides content for narrative descriptions.

## Future Enhancements

*(Existing section retained)*

-   Multiple target and area effect attacks/spells.
-   Positioning and movement mechanics.
-   More complex action economy (e.g., main action, bonus action).
-   Tactical options (flanking, cover, opportunity attacks).
-   Combat AI for enemy decision-making (potentially via `core.agents`).
-   Full integration with `core.items` for item consumption.
-   Processing of duration-based status effects each turn.

## Testing

*(Existing section retained)*

The combat system requires comprehensive testing, including:
-   Initiative and turn order logic.
-   Attack/spell/item/flee action resolution.
-   Status effect application and interaction.
-   Combat state transitions (victory, defeat, flee).
-   Edge cases and error handling.

```

### File: core\character\README.md

```markdown
# Core Character Module: Just-in-Time NPC System

This module (`core/character`) implements a dynamic system for managing Non-Player Characters (NPCs) within the game. Its core feature is a "just-in-time" generation approach, where NPCs are created and enhanced only when needed for specific interactions. This allows the game to efficiently manage a potentially large number of NPCs without requiring full generation of all characters at the start, optimizing performance and memory usage.

## Core Concept: Just-in-Time Generation

The primary innovation of this system is the "just-in-time" generation of NPCs. Instead of generating all NPCs with complete details up front, the system:

1.  Creates NPCs with minimal information when they are first encountered or mentioned (e.g., by name).
2.  Generates or enhances NPC stats, personality, and other details only when required for a specific type of interaction (e.g., combat, social dialogue, trading).
3.  Persists only the information that matters for future interactions, focusing on NPCs designated as `is_persistent`.

This approach offers several benefits:
-   Optimizes memory usage by only storing necessary information for active or important NPCs.
-   Creates more appropriate NPCs tailored to specific interaction types (e.g., stronger combat stats for enemies, higher charisma for merchants).
-   Allows narrative systems (like an LLM) to freely introduce NPCs without worrying about immediate, detailed implementation.
-   Saves processing time by avoiding the generation of unused NPCs or attributes.

## System Components

The `core/character` module is divided into several Python files for better organization and maintainability:

### 1. `npc_base.py`
-   **Purpose:** Defines the core data structures for NPCs.
-   **Key Classes/Enums:**
    -   `NPC`: The central dataclass representing an NPC, holding attributes like `id`, `name`, `npc_type`, `relationship`, `location`, `description`, `stats_manager`, `memories`, `inventory` (basic list), etc.
    -   `NPCMemory`: Dataclass representing a recorded interaction or event involving an NPC.
    -   `NPCType`: Enum defining NPC roles (MERCHANT, ENEMY, QUEST_GIVER, etc.).
    -   `NPCRelationship`: Enum defining the NPC's disposition towards the player (HOSTILE, FRIENDLY, NEUTRAL, etc.).
    -   `NPCInteractionType`: Enum defining the context of an interaction (COMBAT, SOCIAL, COMMERCE, etc.), used to determine necessary stats/details.
-   **Functionality:** Basic serialization (`to_dict`) and deserialization (`from_dict`) methods for `NPC` and `NPCMemory`.

### 2. `npc_manager.py`
-   **Purpose:** Manages the collection of active `NPC` objects currently loaded in memory.
-   **Key Class:** `NPCManager`.
-   **Functionality:** Acts as a central registry, providing methods for adding, removing, and retrieving NPCs using indices for ID, name (case-insensitive), and location.

### 3. `npc_generator.py`
-   **Purpose:** Responsible for generating NPC details, including stats, personality, and names.
-   **Key Class:** `NPCGenerator`.
-   **Functionality:**
    -   Loads NPC templates from configuration (`config/character/npc_templates.json`). Templates define stat ranges, personality traits, and name pools.
    -   Generates random names based on pools.
    -   Generates stats (`StatsManager` instance) appropriate for a given `NPCInteractionType` using template distributions.
    -   Enhances stats of existing NPCs for new interaction types.
    -   Generates basic personality descriptions.
-   **Dependencies:** `core.stats.stats_manager`, `config/character/npc_templates.json`.

### 4. `npc_creator.py`
-   **Purpose:** Provides a higher-level interface for creating and enhancing NPCs.
-   **Key Class:** `NPCCreator`.
-   **Functionality:**
    -   Uses `NPCGenerator` and `NPCManager`.
    -   Provides methods to create specific NPC types (`create_enemy`, `create_merchant`, etc.).
    -   Implements the core "get or create" logic (`get_or_create_npc`) for just-in-time instantiation.
    -   Handles enhancing existing NPCs when they are needed for a new interaction context (`enhance_npc_for_interaction`).

### 5. `npc_persistence.py`
-   **Purpose:** Manages the saving and loading of *persistent* NPCs to/from disk storage.
-   **Key Class:** `NPCPersistence`.
-   **Functionality:**
    -   Saves individual persistent NPCs (`save_npc`) or all persistent NPCs (`save_all_persistent_npcs`) to JSON files (named `{npc_id}.json`) in a specified directory (e.g., `saves/npcs/`).
    -   Loads NPCs from these files (`load_npc`, `load_all_npcs`).
    -   Handles cleanup of old/unused NPC files.
    -   Provides import/export functionality for NPC data.

### 6. `npc_memory.py`
-   **Purpose:** Manages the recording, retrieval, and lifecycle of NPC memories.
-   **Key Class:** `NPCMemoryManager`.
-   **Functionality:**
    -   Records new `NPCMemory` instances associated with an NPC (`record_interaction`).
    -   Retrieves memories based on recency, importance, location, or specific events (like relationship changes).
    -   Summarizes interactions with an NPC.
    -   Provides relevant memories as context for new interactions (`get_relevant_context_for_interaction`).
    -   Prunes old or unimportant memories to manage data size.

### 7. `background_generator.py`
-   **Purpose:** Generates or enhances narrative backgrounds for characters using an external LLM.
-   **Key Class:** `BackgroundGenerator`.
-   **Functionality:** Constructs prompts based on character data (race, class, etc.) and sends requests to the `LLMManager` to generate or improve background text.
-   **Dependencies:** `core.llm.llm_manager`.

### 8. `npc_system.py`
-   **Purpose:** Acts as a facade, integrating all the above components into a unified interface.
-   **Key Class:** `NPCSystem`.
-   **Functionality:**
    -   Initializes and provides access to the `NPCManager`, `NPCCreator`, `NPCPersistence`, and `NPCMemoryManager`.
    -   Provides high-level methods for common operations like loading/saving state, getting/creating NPCs (`get_or_create_npc`), preparing NPCs for interaction (`prepare_npc_for_interaction`), recording interactions, and retrieving interaction context.
    -   Simplifies interaction with the NPC subsystem for other parts of the game.

## Key Concepts & Data Flow

-   **NPC Representation:** The `NPC` class is the core data structure, holding all information about a non-player character. It relies on `core.stats.StatsManager` to handle numerical attributes and derived stats.
-   **Dynamic Stats:** Stats are not always pre-defined. `NPCGenerator` creates or enhances the `StatsManager` instance for an NPC based on the `NPCInteractionType` when needed.
-   **Memory:** Interactions are logged as `NPCMemory` objects, managed by `NPCMemoryManager`. These memories inform future interactions and can provide context to narrative systems.
-   **Persistence:** NPCs marked with `is_persistent=True` are saved by `NPCPersistence` to JSON files in the `saves/npcs/` directory (or as configured). `NPCSystem` orchestrates loading and saving the overall state.
-   **Configuration:** NPC generation relies heavily on templates defined in `config/character/npc_templates.json`.

## Interaction Types

The system uses `NPCInteractionType` to determine the necessary level of detail and specific stats required for an NPC:

-   **COMBAT**: Requires full combat stats (STR, DEX, CON, HP, Attack, Defense, etc.).
-   **SOCIAL**: Focuses on social stats (CHA, WIS).
-   **COMMERCE**: Focuses on relevant stats for trading (CHA, INT).
-   **QUEST**: May require specific knowledge or flags related to quests.
-   **INFORMATION**: Focuses on knowledge-related stats (INT, WIS).
-   **SERVICE**: May require specific skills or flags related to services offered.
-   **MINIMAL**: Requires only basic identification information; no stats are generated initially.

## Using the NPC System

The primary interface is the `NPCSystem` class, typically accessed via a central game state manager or a dedicated function like `get_npc_system()`.

```python
# Example: Assuming npc_system is an instance of NPCSystem

# Get or create an NPC for a specific interaction
# If "Guard Captain" exists, enhance for combat if needed. If not, create him.
npc, is_new = npc_system.get_or_create_npc(
    name="Guard Captain",
    interaction_type=NPCInteractionType.COMBAT,
    location="City Gates",
    npc_subtype="guard_captain" # Optional: uses specific template if available
)

# Record an interaction
memory = npc_system.record_interaction(
    npc_or_name="Guard Captain", # Can use name or NPC object
    interaction_type=NPCInteractionType.SOCIAL,
    description="Player asked about recent patrols.",
    location="City Gates",
    importance=5
)

# Get context for an LLM or dialogue system
context = npc_system.get_context_for_interaction(
    "Guard Captain",
    NPCInteractionType.SOCIAL
)
# context dictionary contains npc details, relevant stats, and recent/important memories
```

## Integration with LLM & Narrative

The just-in-time approach is well-suited for integration with LLM-driven narrative engines:

1.  The LLM can mention NPCs by name without needing them to exist beforehand.
2.  `npc_system.get_or_create_npc` handles creating a minimal NPC record.
3.  When an interaction occurs (e.g., player talks to the NPC), `npc_system.prepare_npc_for_interaction` ensures the NPC has the necessary details (like social stats).
4.  `npc_system.get_context_for_interaction` provides the LLM with the NPC's current state, relevant stats, and past interactions (memories) to inform its response generation.
5.  `BackgroundGenerator` can be invoked to create richer backstories for important NPCs introduced by the LLM.

This allows the narrative engine to dynamically populate the world with characters without the burden of pre-defining every detail.

```

### File: core\base\README.md

```markdown
# Core Base Module (`core/base`)

This module provides the foundational building blocks and core systems for the game engine. It contains the essential infrastructure for game operation, including state management, command handling, the main game loop, configuration loading, and the central engine coordination.

## Purpose

The `core/base` module establishes the fundamental architecture upon which the rest of the game is built. It defines how game state is managed, how player input is processed, how time progresses, and how these different systems interact under the control of the main `GameEngine`.

## Key Components

### `GameEngine` (`engine.py`)

*   **Role**: The central coordinator and main entry point for game operations.
*   **Responsibilities**:
    *   Initializes and manages other base components (`StateManager`, `CommandProcessor`, `GameLoop`) and integrates with other systems like `AgentManager`.
    *   Handles game initialization (starting new games, loading saved games).
    *   Processes player input, routing it to `CommandProcessor` for direct commands or `AgentManager` for interactive text/LLM processing.
    *   Manages the game loop lifecycle (running, stopping, pausing).
    *   Coordinates auto-saving based on configuration.
    *   Emits game output (system messages, narration, etc.) via the `output_generated` PySide6 signal for decoupling from UI components.
*   **Access**: Singleton, accessed via `get_game_engine()`.

### `StateManager` (`state/state_manager.py`)

*   **Role**: Manages the lifecycle and persistence of the game state.
*   **Responsibilities**:
    *   Creates new `GameState` instances for new games.
    *   Saves the current `GameState` to a file, including player data, world data, stats, inventory, conversation history, etc.
    *   Loads `GameState` from save files, restoring the game to a previous point.
    *   Handles serialization and deserialization of the entire game state.
    *   Provides access to the currently active `GameState`.
    *   Manages save files (listing available saves, deleting saves, undoing deletion).
*   **Access**: Singleton, accessed via `get_state_manager()`.

### `CommandProcessor` (`commands.py`)

*   **Role**: Parses and executes player commands.
*   **Responsibilities**:
    *   Maintains a registry of standard game commands (e.g., `help`, `save`, `load`, `look`, `inventory`) and their handlers.
    *   Supports registration and execution of developer-specific commands (prefixed with `//`).
    *   Parses command arguments, respecting quoted strings.
    *   Processes special commands embedded within LLM responses (e.g., `{ITEM_CREATE chest}`).
    *   Defines `CommandResult` and `CommandStatus` to provide standardized outcomes for command execution (success, failure, error, exit, help).
*   **Access**: Singleton, accessed via `get_command_processor()`.

### `GameLoop` & `GameTime` (`game_loop.py`)

*   **`GameLoop`**:
    *   **Role**: Manages the progression of game time and scheduled events.
    *   **Responsibilities**: Operates on a tick-based system. Advances in-game time based on real-time elapsed and the current `GameSpeed`. Controls the game's speed (paused, normal, fast). Executes callbacks on each tick. Manages and executes `ScheduledEvent` instances at specific game times.
    *   **Access**: Singleton, accessed via `get_game_loop()`.
*   **`GameTime`**:
    *   **Role**: Represents and manipulates the in-game time.
    *   **Responsibilities**: Tracks the current game time (seconds since a starting epoch). Provides methods to get formatted date/time strings and the general time of day (Morning, Afternoon, etc.).
*   **`ScheduledEvent`**: Represents a callback function scheduled to run at a specific future game time, potentially repeating at intervals.

### State Dataclasses (`state/`)

These dataclasses define the structure of the game's state, managed by the `StateManager`.

*   **`GameState` (`game_state.py`)**: The top-level container for all state related to a single game session. It aggregates `PlayerState`, `WorldState`, an optional `CombatManager` (when combat is active), the conversation history, and session metadata (ID, timestamps, version).
*   **`PlayerState` (`player_state.py`)**: Holds all persistent information about the player character, including name, race, class (path), background, sex, level, experience, current location (area and district), references to their inventory and stats manager instances, equipped items, and quest status.
*   **`WorldState` (`world_state.py`)**: Contains information about the game world environment, such as the current game time, date, weather conditions, day/night status, active magical effects, global variables (used for tracking world events or quest progression), and a list of active world events.

### `GameConfig` (`config.py`)

*   **Role**: Manages game configuration settings.
*   **Responsibilities**: Loads configuration data from JSON files (e.g., `config/game_config.json`). Provides a simple interface to access configuration values throughout the application. Handles default values if specific settings are missing.
*   **Access**: Singleton, accessed via `get_config()`.

## Interactions

*   The `GameEngine` acts as the central orchestrator. It receives player input and uses the `CommandProcessor` (for commands like `/save`) or the `AgentManager` (for natural language) to handle it. It uses the `StateManager` to load/save the game and access the current `GameState`. It controls the `GameLoop` to manage time progression and pausing.
*   The `StateManager` is responsible for the `GameState` object. When saving/loading, it serializes/deserializes the `GameState`, which includes the nested `PlayerState` and `WorldState`, along with data from associated systems like stats and inventory.
*   The `CommandProcessor` and `AgentManager` operate on the current `GameState` provided by the `GameEngine` or `StateManager` to understand the context (player location, inventory, world variables) needed to execute commands or generate relevant LLM responses.
*   The `GameLoop` advances the `game_time` within the `WorldState` (managed by `StateManager`) and triggers scheduled events or tick callbacks, which might affect other parts of the state (e.g., NPC behavior, world events).

## Dependencies

*   **Internal Core Modules**:
    *   `core.utils`: For logging, JSON handling, save file management (`SaveManager`).
    *   `core.agents`: The `GameEngine` interacts with the `AgentManager` for LLM processing.
    *   `core.inventory`: `StateManager` saves/loads inventory data; `GameEngine` registers inventory commands.
    *   `core.combat`: `GameState` can hold a `CombatManager`; `StateManager` saves/loads combat state.
    *   `core.character`: `StateManager` interacts with `NPCSystem`.
    *   `core.stats`: `StateManager` saves/loads stats data via `StatsManager`.
*   **External Libraries**:
    *   `PySide6`: Used by `GameEngine` for its `output_generated` signal, enabling decoupling from the UI.

## Usage Example

The game engine is typically accessed through the `get_game_engine()` function, which returns a singleton instance of the `GameEngine` class:

```python
from core.base.engine import get_game_engine

# Get the engine instance
engine = get_game_engine()

# Start a new game (or load one)
engine.start_new_game(player_name="Adventurer")
# or engine.load_game("my_save.json")

# Process player input (command or natural language)
result = engine.process_command("look around") # Handled by LLM if enabled
result_save = engine.process_command("/save my_adventure") # Direct command

# Output is handled via the engine's output_generated signal
# (Connect a slot/function to this signal in your UI or main application)

```

### File: core\agents\README.md

```markdown
# Agents Module

The `core/agents` module provides a system of specialized, LLM-powered agents designed to manage different aspects of the game's narrative, rules, and context. These agents work together, coordinated by the `AgentManager`, to create a dynamic and interactive game experience.

## Purpose

The primary goal of the agent system is to leverage Large Language Models (LLMs) to:

*   Generate rich, descriptive, and contextually relevant game narrative.
*   Interpret player input and translate it into game actions and narrative consequences.
*   Enforce game rules consistently and fairly.
*   Manage the flow of information, ensuring agents have the necessary context (game state, memories, etc.) to perform their tasks.
*   Allow for modular design, where different agents handle specific responsibilities.

## Key Components

### `base_agent.py`

Defines the foundational elements for all agents:

*   **`BaseAgent`**: An abstract base class providing common functionality like configuration loading (`config/llm/agents/<agent_name>.json`), interaction with the `LLMManager`, basic prompt construction, and settings reloading. All specific agents inherit from this class.
*   **`AgentContext`**: A dataclass holding the information passed to an agent for processing a request. This includes game state, player state, world state, player input, conversation history, relevant memories, and potentially additional context retrieved during processing.
*   **`AgentResponse`**: A dataclass containing the output from an agent, including the generated text (`content`), any extracted commands (`commands`), and metadata (like LLM usage details).

### `agent_manager.py`

*   **`AgentManager`**: A singleton class that acts as the central coordinator for the agent system. It orchestrates the processing pipeline for player input:
    1.  Creates the initial `AgentContext`.
    2.  (Optional) Calls the `ContextEvaluatorAgent` to enrich the context with summaries or relevant memories.
    3.  (Optional) Calls the `RuleCheckerAgent` to validate the player's intended action based on game rules and state. If invalid, the process stops and returns feedback.
    4.  Calls the `NarratorAgent` to generate an initial narrative response.
    5.  Checks the Narrator's response for specific data retrieval commands (e.g., `{GET_INVENTORY}`, `{GET_STATS}`).
    6.  If data retrieval commands are present, it uses `data_retrieval_commands.py` to fetch the required data from the `GameState`.
    7.  Calls the `NarratorAgent` *again* with the enhanced context (including the retrieved data) to generate the final narrative.
    8.  Processes any narrative item commands (e.g., `{ITEM:potion}`) using the `NarrativeItemManager`.
    9.  Extracts remaining commands (e.g., `{STAT_CHECK}`, `{QUEST_UPDATE}`) from the final narrative.
    10. Returns the final narrative text and the list of commands to the game loop for execution.

### `narrator.py`

*   **`NarratorAgent`**: Responsible for generating the game's narrative content.
    *   Takes the `AgentContext` (potentially enriched by the `AgentManager`) and crafts descriptive text based on player actions, game state, and world events.
    *   Instructed via its system prompt to use specific data retrieval commands (`{GET_INVENTORY}`, `{GET_STATS}`, `{GET_QUESTS}`, `{GET_LOCATION_INFO}`) when the player asks for game information, rather than hallucinating details.
    *   Can embed other commands (e.g., `{ITEM_CREATE}`, `{STAT_CHECK}`, `{MUSIC_MOOD}`) within its narrative to trigger game state changes or checks.

### `rule_checker.py`

*   **`RuleCheckerAgent`**: Enforces game rules and validates player actions.
    *   Receives the `AgentContext` and evaluates if the player's input/action is permissible based on game rules, physics, character capabilities, and current state.
    *   Provides feedback if an action is invalid.
    *   Includes logic to prevent cheating (e.g., tracking looted entities).
    *   Can perform skill checks (`perform_skill_check`) when triggered by commands like `{STAT_CHECK}`.

### `context_evaluator.py`

*   **`ContextEvaluatorAgent`**: Analyzes the game context to determine relevance and provide summaries.
    *   Evaluates the current `AgentContext`, including game state, conversation history, and potentially memories.
    *   Generates concise context summaries to help other agents (especially the `NarratorAgent`) focus on the most relevant information.
    *   Can identify key elements in the context and evaluate the importance of memories.
    *   Includes basic caching for context summaries based on location and input hash.

### `data_retrieval_commands.py`

*   Contains helper functions used by the `AgentManager` to process data retrieval commands issued by the `NarratorAgent`. It fetches specific information (like inventory lists, character stats, quest details, location info) directly from the `GameState`.

## Interaction Flow

1.  Player input is received by the main game loop.
2.  The game loop calls `AgentManager.process_input()`, passing the current `GameState` and player input.
3.  `AgentManager` creates an `AgentContext`.
4.  `AgentManager` optionally calls `ContextEvaluatorAgent` and `RuleCheckerAgent`.
5.  `AgentManager` calls `NarratorAgent` (potentially twice if data retrieval is needed).
6.  `AgentManager` processes narrative items and extracts final commands.
7.  `AgentManager` returns the final narrative text and commands to the game loop.
8.  The game loop displays the narrative and executes the commands using the `CommandProcessor`.

## Dependencies

The `agents` module primarily depends on:

*   `core.base`: For `GameState`, `CommandProcessor`, configuration (`get_config`).
*   `core.llm`: For `LLMManager`, `LLMResponse`, `ProviderType`.
*   `core.inventory`: For `NarrativeItemManager` (used by `AgentManager`).
*   `core.stats`: For `StatsManager` (used by `RuleCheckerAgent` for skill checks).
*   `core.utils`: For logging configuration.

## Configuration

Each agent type (`Narrator`, `RuleChecker`, `ContextEvaluator`) loads its specific settings from a corresponding JSON file in `config/llm/agents/` (e.g., `config/llm/agents/narrator.json`). These files control:

*   LLM provider and model selection (or defaults).
*   LLM parameters (temperature, max tokens).
*   System prompt templates.
*   Inclusion/exclusion of context elements (history, memories).

## Extending the System

To create a new type of agent:

1.  Create a new Python file (e.g., `my_new_agent.py`).
2.  Define a class that inherits from `BaseAgent`.
3.  Implement the required abstract methods (`_generate_system_prompt`, `supports_command`).
4.  Override other methods (`_prepare_messages`, `process`) as needed for custom logic.
5.  Create a configuration file in `config/llm/agents/my_new_agent.json`.
6.  Integrate the new agent into the `AgentManager`'s workflow if necessary.

## Usage Example

```python
from core.agents.agent_manager import get_agent_manager
from core.base.state import get_state_manager # Assuming state is managed

# Get the singleton instances
agent_manager = get_agent_manager()
state_manager = get_state_manager()

# Ensure game state is loaded or initialized
# state_manager.load_game(...) or state_manager.new_game(...)

# Process player input
player_input = "I search the chest for traps"
narrative_text, commands = agent_manager.process_input(
    game_state=state_manager.state,
    player_input=player_input
)

# Display the narrative
print(narrative_text)

# Process any commands returned by the agents
if commands:
    results = agent_manager.process_commands(state_manager.state, commands)
    # Handle command results...

```

### File: config\README.md

```markdown
# Configuration Module

The `config` directory contains configuration files for various aspects of the game. This document focuses on the main configuration files located directly within this directory. Configuration for specific modules like items, combat, etc., can be found in their respective subdirectories.

## Main Configuration Files

These files control core aspects of the game and system:

*   **`game_config.json`**: Defines general game settings.
    *   `version`: The current game version.
    *   `title`: The title displayed for the game window.
    *   `default_save_slot`: The save slot used by default (e.g., for auto-saves).
    *   `auto_save_interval`: How often the game auto-saves (in seconds).
    *   `max_save_slots`: The maximum number of manual save slots available.
*   **`gui_config.json`**: Controls settings related to the Graphical User Interface (GUI).
    *   `resolution`: The display resolution (width and height).
    *   `fullscreen`: Whether the game runs in fullscreen mode.
    *   `theme`: The visual theme used for the GUI.
    *   `font_size`: The default font size for UI elements.
    *   `show_fps`: Whether to display the current frames per second.
*   **`llm_config.json`**: Manages settings for Large Language Model (LLM) integration.
    *   `enabled`: A simple flag to enable or disable all LLM features globally. More detailed LLM configurations are likely found in the `llm/` subdirectory.
*   **`system_config.json`**: Contains system-level configurations.
    *   `log_level`: The minimum severity level for log messages (e.g., INFO, DEBUG).
    *   `log_to_file`: Whether logs should be written to a file.
    *   `log_to_console`: Whether logs should be output to the console.
    *   `debug_mode`: Enables or disables general debug features.
    *   `save_dir`: The directory where save game files are stored (relative to the project root).
    *   `log_dir`: The directory where log files are stored (relative to the project root).

## Configuration Format

All configuration files use JSON format for easy editing and parsing. Most configuration files follow a similar structure:

```json
{
  "version": "1.0",
  "name": "Configuration Name",
  "description": "Description of the configuration",
  "settings": {
    "setting1": "value1",
    "setting2": "value2",
    "nested_setting": {
      "subsetting1": "value3"
    }
  }
}
```

## Usage

Configuration files are typically loaded by their respective modules at startup. For example:

*   Game configuration might be loaded by a central game manager.
*   GUI settings are likely loaded by the GUI initialization module.
*   System settings are used by logging and file management components.

## Editing Configuration

Configuration files can be edited manually with a text editor. Ensure the JSON format remains valid after editing. Some settings might also be adjustable through in-game menus.

```

### File: config\world\locations\defaults.json

```json
{
  "culture_mix": {
    "concordant": 0.5,
    "verdant": 0.2,
    "crystalline": 0.15,
    "ashen": 0.1,
    "tempest": 0.05
  },
  "metadata": {
    "version": "1.0.0",
    "description": "Default cultural mixture applied to locations that don't specify culture_mix."
  }
}
```

### File: config\items\README.md

```markdown
# Item Configuration

This directory contains JSON configuration files that define the various items available in the game. These files serve as templates from which specific item instances are created.

## Item Configuration Files

The item definitions are categorized into the following files:

### base_weapons.json

Defines weapon templates including:
- Basic weapons (swords, bows, daggers, etc.)
- Weapon properties (damage, range, speed)
- Weapon categories and types
- Required attributes and restrictions (implicitly via stats or tags)
- Equip slots (e.g., main_hand, off_hand, two_hand)

### base_armor.json

Defines armor templates including:
- Armor types (light, medium, heavy - often indicated by tags or stats)
- Armor pieces (helmet, chest, gloves, etc.)
- Protection values and resistance stats
- Weight and mobility effects
- Equip slots

### consumables.json

Defines consumable items including:
- Potions and elixirs
- Food and drinks
- Scrolls and magical consumables
- Temporary effect items (defined via stats/effects)
- Crafting materials (if applicable)

### miscellaneous.json

Defines miscellaneous items including:
- Quest items
- Valuables and currency items (if not handled separately)
- Tools and utilities
- Decorative items
- Container items

## Item Definition Format

Each JSON file contains a list of item objects. Each item object defines a specific item template using the following key-value pairs:

*   `id` (String, Required): A unique identifier for the item template. Used internally to reference the item. Conventionally includes `template_` prefix.
*   `name` (String, Required): The display name of the item shown to the player.
*   `description` (String, Required): A textual description of the item shown to the player.
*   `item_type` (String, Required): The general category of the item (e.g., "weapon", "armor", "consumable", "misc").
*   `rarity` (String, Required): The rarity level of the item (e.g., "common", "uncommon", "rare", "epic", "legendary"). Affects drop rates, value, and potentially stats.
*   `weight` (Float, Required): The weight of the item, affecting inventory capacity.
*   `value` (Integer, Required): The base monetary value of the item in the smallest currency unit (e.g., copper).
*   `is_equippable` (Boolean, Required): Whether the item can be equipped by the player character.
*   `equip_slots` (List of Strings, Required if `is_equippable` is true): A list of equipment slots the item can occupy (e.g., `["main_hand", "off_hand"]`, `["chest"]`, `["two_hand"]`).
*   `stats` (List of Objects, Optional): A list defining the item's effects on character statistics or other properties. Each stat object contains:
    *   `name` (String, Required): The internal name of the stat being modified (e.g., "damage", "defense", "health_regen").
    *   `value` (Number, Required): The magnitude of the stat modification.
    *   `display_name` (String, Required): How the stat is presented to the player (e.g., "Damage", "Armor Class").
    *   `is_percentage` (Boolean, Optional): If true, the `value` is treated as a percentage modifier. Defaults to false if omitted.
*   `is_stackable` (Boolean, Required): Whether multiple instances of this item can occupy a single inventory slot.
*   `durability` (Integer, Optional): The maximum durability of the item. If omitted, the item may be considered indestructible or durability is not applicable.
*   `tags` (List of Strings, Optional): A list of tags used for categorization, filtering, or applying specific game logic (e.g., `["metal", "sword", "quest_item"]`).

### Example (Short Sword from base_weapons.json)

```json
 {
     "id": "template_sword_short",
     "name": "Short Sword",
     "description": "A simple one-handed sword designed for close combat.",
     "item_type": "weapon",
     "rarity": "common",
     "weight": 2.0,
     "value": 1000,
     "is_equippable": true,
     "equip_slots": ["main_hand", "off_hand"],
     "stats": [
         {
             "name": "damage",
             "value": 5,
             "display_name": "Damage"
         },
         {
             "name": "attack_speed",
             "value": 1.2,
             "display_name": "Attack Speed"
         }
     ],
     "is_stackable": false,
     "durability": 100,
     "tags": ["weapon", "sword", "metal", "one-handed"]
 }
```

## Adding or Modifying Items

To add a new item:
1.  Determine the appropriate category (weapon, armor, consumable, misc) and open the corresponding `.json` file (e.g., `base_weapons.json`).
2.  Add a new JSON object to the list, following the format described above.
3.  Ensure the `id` field is unique across all item configuration files.
4.  Fill in all required fields and any relevant optional fields.

To modify an existing item:
1.  Locate the item's definition within the relevant `.json` file using its `id` or `name`.
2.  Modify the desired key-value pairs, ensuring the structure remains valid JSON.

## Usage

These item templates are typically loaded by an `ItemFactory` or similar system at game startup. This factory is then used to create specific instances of items based on their template `id`.

Example (Conceptual Python):
```python
from core.inventory.item_factory import ItemFactory # Assuming this path

# Create an item factory instance
item_factory = ItemFactory()

# Load item templates from the config/items directory
item_factory.load_templates_from_directory("config/items")

# Create an item instance from a template
short_sword_instance = item_factory.create_item("template_sword_short")

print(f"Created item: {short_sword_instance.name}")
```
*(Note: The exact class names and methods might differ in the actual implementation.)*

## Item Generation

The game uses these templates in several ways:

1.  Direct creation of specific items (e.g., quest rewards, shop inventory).
2.  As a base for generating variations with randomized properties (e.g., magical affixes).
3.  As base templates or references for LLM-generated items, ensuring consistency.
4.  Populating loot tables and treasure chests.

## Narrative Item Integration

Templates can serve as references for systems like a `NarrativeItemManager` when creating items based on narrative descriptions or player actions. This helps to:

1.  Match narrative descriptions to existing item types.
2.  Determine appropriate stats and properties based on the template.
3.  Generate variations consistent with the game world and narrative context.
4.  Maintain game balance and item consistency.

```

### File: core\README.md

```markdown
# Core Module

The `core` module serves as the heart of the game engine, containing the primary logic, data structures, and systems that drive the gameplay experience. It is designed with a modular approach, organizing distinct functionalities into specific sub-modules.

## Overview

This module encapsulates the fundamental mechanics of the game, including state management, character representation, combat resolution, inventory handling, interaction with Large Language Models (LLMs), and various utility functions. The sub-modules are designed to interact with each other to create a cohesive game world.

## Architecture

The core module emphasizes modularity and separation of concerns. Key architectural patterns include:
*   **State Management:** Centralized handling of game, world, and player states within the `base/state` submodule.
*   **Command Pattern:** Processing player and system actions via a command system in `base/commands.py`.
*   **Agent-Based Systems:** Utilizing LLM-powered agents (`agents/`) for dynamic content generation and rule enforcement.
*   **Component-Based Structure:** Various managers (Inventory, Stats, Character, Combat, LLM) handle specific domains.

## Sub-Modules

Below is a breakdown of the primary sub-modules within `core`:

### `agents/`

Contains LLM-powered game agents responsible for:
*   Generating narrative content and descriptions (`narrator.py`).
*   Enforcing game rules and validating actions (`rule_checker.py`).
*   Evaluating game context (`context_evaluator.py`).
*   Coordinating agent interactions (`agent_manager.py`).

### `base/`

Provides the foundational engine components:
*   Main game engine logic (`engine.py`).
*   Game loop and time management (`game_loop.py`).
*   Command processing infrastructure (`commands.py`).
*   Configuration loading (`config.py`).
*   **`base/state/`**: Manages the different states of the game, including `game_state.py`, `player_state.py`, and `world_state.py`, coordinated by `state_manager.py`.

### `character/`

Manages all aspects of characters, both player and non-player characters (NPCs):
*   NPC creation, logic, memory, and persistence (`npc_*.py` files).
*   Character background generation (`background_generator.py`).
*   Overall coordination of character-related systems (`npc_system.py`, `npc_manager.py`).

### `combat/`

Handles the systems and logic required for combat encounters:
*   Defining combat actions (`combat_action.py`).
*   Representing entities involved in combat (`combat_entity.py`).
*   Managing the flow and rules of combat (`combat_manager.py`).

### `inventory/`

Manages all item-related functionality:
*   Core inventory and equipment management (`inventory_manager.py`, `equipment_manager.py`).
*   Item representation and creation (`item.py`, `item_factory.py`).
*   Currency management (`currency_manager.py`).
*   Dynamic item creation based on narrative context (`narrative_item_manager.py`).

### `llm/`

Integrates with Large Language Models (LLMs):
*   Manages interactions with different LLM providers (`llm_manager.py`, `provider_manager.py`).
*   Handles LLM settings and configuration (`settings_manager*.py`).

### `stats/`

Defines and manages statistics for characters and potentially items:
*   Base stat definitions and management (`stats_base.py`, `stats_manager.py`).
*   Handling of temporary or permanent modifiers (`modifier.py`, `modifier_manager.py`).
*   Calculation of derived statistics (`derived_stats.py`).
*   Skill check resolution (`skill_check.py`).
*   Combat-related effects tied to stats (`combat_effects.py`).

### `utils/`

Contains common utility functions and classes used across the core module:
*   Dice rolling (`dice.py`).
*   Data structures (`dotdict.py`).
*   Serialization/JSON handling (`json_utils.py`).
*   Logging setup (`logging_config.py`).
*   Saving and loading game state (`save_manager.py`).
*   Time-related functions (`time_utils.py`).

```

### File: gui\components\README.md

```markdown
# GUI Components

The `components` directory contains reusable UI components used in the game's graphical interface.

## Available Components

### character_sheet.py

The `CharacterSheet` component displays character information:
- Name, level, and basic stats
- Health, mana, and other resources
- Character attributes and skills
- Experience and progression

### command_input.py

The `CommandInput` component manages player input:
- Command text entry
- Command history navigation
- Auto-completion (if implemented)
- Command validation and feedback

### game_menu.py

The `GameMenu` component provides game menu functionality:
- New game, save, load options
- Settings and configuration
- Help and information
- Exit game functionality

### game_output.py

The `GameOutput` component displays game text and narrative:
- Scrollable text area for game output
- Formatting for different message types
- Image embedding (if applicable)
- History retention

### inventory_panel.py

The `InventoryPanel` component displays the player's inventory:
- Item listing with icons and basic info
- Equipment slots and equipped items
- Item interaction (use, equip, examine, etc.)
- Item filtering and sorting

### status_bar.py

The `StatusBar` component shows game status information:
- Current time and location
- Character status indicators
- Game mode indicators (LLM status, etc.)
- Quick access to common functions

## Implementation

All components are implemented using PySide6 (Qt) and follow a consistent pattern:
- Inherit from appropriate Qt widget classes
- Implement signals for event communication
- Provide public methods for external control
- Maintain internal state as needed

## Signals and Slots

Components communicate using Qt's signals and slots mechanism:
- Components emit signals when important events occur
- Other components or the main window connect to these signals
- Connected slots handle the events and update accordingly

## Styling

Components use stylesheets for visual styling:
- Common styles are defined in a central location
- Components can have specific style overrides
- Theme support is partially implemented

## Future Enhancements

1. Enhanced inventory visualization
2. More detailed character information display
3. Expandable panels and resizing
4. Theme selection and customization
5. Animated transitions and effects

```

### File: gui\dialogs\README.md

```markdown
# GUI Dialogs

The `dialogs` directory contains dialog windows used in the game's graphical interface.

## Available Dialogs

### new_game_dialog.py

The `NewGameDialog` handles new game creation:
- Character name input
- Starting options selection
- Game difficulty settings (if applicable)
- Character customization options

### load_game_dialog.py

The `LoadGameDialog` provides save game loading functionality:
- Lists available save files
- Displays save metadata (character, date, location)
- Allows selection and loading of saves
- Delete save option

### save_game_dialog.py

The `SaveGameDialog` handles game saving:
- Save name input
- Overwrite confirmation
- Save metadata preview
- Quick save option

### settings/ (directory)

Contains dialogs for various settings:
- Game settings (difficulty, time scale, etc.)
- Graphics settings (resolution, effects, etc.)
- Sound settings (volume, music, effects)
- LLM settings (provider, model, parameters)

## Implementation

All dialogs are implemented as modal windows using PySide6 (Qt):
- Inherit from `QDialog`
- Provide result handling through `accept()` and `reject()`
- Include validation for user input
- Maintain consistent styling

## Common Features

All dialogs share these common features:
- Consistent styling and layout
- Cancel and confirm buttons
- Input validation
- Error and notification handling
- Persistence of settings

## Usage

Dialogs are typically shown from the main window or game menu:

```python
from gui.dialogs.new_game_dialog import NewGameDialog

# Create and show the dialog
dialog = NewGameDialog(parent=self)
result = dialog.exec_()

if result == QDialog.Accepted:
    # Get dialog data
    player_name = dialog.get_player_name()
    
    # Use the data
    self.engine.initialize(new_game=True, player_name=player_name)
```

## Future Enhancements

1. More comprehensive settings dialogs
2. Advanced character creation options
3. Save file management (backup, restore, etc.)
4. Configuration editors for game data
5. Help and tutorial dialogs

```

### File: world_configurator\README.md

```markdown
# World Configurator Tool

## Overview

The World Configurator Tool is a desktop application built with **PySide6** designed for game designers and content creators to define, edit, and manage the world configuration data for the RPG project. It provides a user-friendly graphical interface for creating and modifying various aspects of the game world, ensuring data consistency and facilitating the content creation pipeline.

The tool works primarily with **JSON** data files, loading from and exporting to the main game's configuration directory (`config/`), making the generated data directly usable by the core game engine.

## Key Features

*   **Comprehensive World Editing:** Tabbed editors for managing:
    *   **Cultures:** Define cultural groups, values, traditions, and naming conventions.
    *   **Races:** Create and edit playable or NPC races with their attributes.
    *   **Classes:** Define character classes, abilities, and progression.
    *   **Locations:** Design game areas, points of interest, connections, and associated cultures.
    *   **World History:** Create historical eras and significant events.
    *   **Origins:** Define starting scenarios, locations, and conditions for new characters.
    *   **Quests:** Design quests, objectives, and storylines.
    *   **Magic Systems:** Define the rules and elements of magic within the world.
*   **Project Management:**
    *   Create new world configuration projects.
    *   Open, save, and manage project files (`.wcproj` structure, containing JSON data).
*   **Direct Game Integration:**
    *   **Load from Game:** Import existing configuration data directly from the game's `config/` directory (e.g., `config/cultures.json`, `config/locations.json`) into the tool for editing.
    *   **Export to Game:** Export the edited configuration data back to the appropriate JSON files within the game's `config/` directory. Automatic backups of existing files are created during export.
*   **Data Viewing:** View the raw JSON data for different configuration types within the tool.
*   **Settings:** Configure tool-specific settings (future implementation).

## Installation and Dependencies

1.  **Prerequisites:** Ensure you have Python 3.9+ installed.
2.  **Main Project Dependencies:** Install all dependencies for the main RPG project first by running `pip install -r requirements.txt` in the project root directory (`new project/`). The World Configurator relies on packages installed there.
3.  **PySide6:** The primary dependency for the GUI is PySide6, which should be included in the main `requirements.txt`. If not, install it via `pip install PySide6`.
4.  **Editable Install (Optional but Recommended):** For development, you can install the tool in editable mode from the `new project/` directory:
    ```bash
    pip install -e ./world_configurator
    ```
    Alternatively, use the provided batch script:
    ```bash
    install_world_configurator.bat
    ```

## Running the Tool

Launch the tool from the project root directory (`new project/`) using:

```bash
python world_configurator/main.py
```

Or, if installed via `pip install -e`:

```bash
python -m world_configurator.main
```

## Project Structure (`world_configurator/`)

*   `main.py`: Main application entry point.
*   `README.md`: This file.
*   `models/`: Pydantic data models defining the structure for world elements (cultures, locations, origins, etc.).
    *   `base_models.py`: Base Pydantic models and shared structures.
    *   `world_config.py`: Manages the overall world configuration state and managers.
    *   `*_data.py`: Specific data models (e.g., `location_data.py`, `origin_data.py`).
*   `ui/`: PySide6 user interface components.
    *   `main_window.py`: The main application window containing tabs and menus.
    *   `editors/`: Widgets for editing specific data types (e.g., `CultureEditor`, `LocationEditor`).
    *   `dialogs/`: Dialog windows for actions like New Project, Export, Settings.
*   `utils/`: Utility functions.
    *   `file_manager.py`: Handles loading/saving project files and interacting with game config files.
    *   `logging_setup.py`: Configures application logging.
    *   `data_validator.py`: (If present) Utilities for validating data consistency.
*   `data/`: (If used) Default or example data for the tool.
*   `logs/`: Contains log files generated by the tool.

## Usage Workflow

1.  **Launch** the World Configurator.
2.  **Load Data:**
    *   Use **File > Load from Game** to import the current configuration directly from the game's `config/` directory. This is useful for editing existing game data.
    *   Or, use **File > Open Project** to load a previously saved World Configurator project (`.wcproj`).
    *   Or, use **File > New Project** to start a fresh configuration.
3.  **Edit Data:** Navigate through the tabs (Cultures, Locations, Quests, etc.) to add, remove, or modify entries using the specific editors.
4.  **Save Progress:**
    *   Use **File > Save** or **File > Save As...** to save your work as a World Configurator project. This saves the current state within the tool but does *not* update the main game files yet.
5.  **Export to Game:**
    *   When ready to apply changes to the main game, use **File > Export to Game**.
    *   Select the specific components (e.g., Cultures, Locations) you wish to export.
    *   Confirm the export. The tool will write the updated data to the relevant JSON files in the `config/` directory, creating timestamped backups of the original files first.

## Data Integration with the Main Game (`core`)

The World Configurator acts as a dedicated editor for the configuration files located in the main project's `config/` directory (e.g., `config/cultures.json`, `config/locations.json`, `config/quests.json`, etc.).

*   **Loading:** The "Load from Game" feature reads these JSON files directly.
*   **Exporting:** The "Export to Game" feature writes the edited data back into these same JSON files.
*   **Core Engine:** The main game engine (`core/`) is designed to load its world definition, character options, quest data, etc., by reading these JSON files from the `config/` directory at startup or as needed.

Therefore, any data created or modified using the World Configurator and then exported will directly affect the game world experienced by the player when the main game is run.

## Developer Notes

*   **GUI Framework:** PySide6
*   **Data Models:** Pydantic
*   **Data Format:** JSON
*   **Game Config Path:** Interacts with files in the main project's `config/` directory (and its subdirectories like `config/items/`, `config/world/` if they exist and are targeted by specific managers). Backups are created in corresponding `backup/` subfolders within `config/`.
*   **Logging:** Configured via `utils/logging_setup.py`, outputting to `world_configurator/logs/`.

```

